
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	080027c1 	.word	0x080027c1
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08009c01 	.word	0x08009c01
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	080002bb 	.word	0x080002bb
 80000dc:	080096f1 	.word	0x080096f1
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f009 fdcc 	bl	8009da0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f009 f8c2 	bl	8009390 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f009 fd5e 	bl	8009d10 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f009 fd9c 	bl	8009d90 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f007 f82a 	bl	80072c0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f009 bd80 	b.w	8009d80 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	0800cb00 	.word	0x0800cb00
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	200008dc 	.word	0x200008dc
                ldr     r1, =__bss_base__
 80002a0:	200008e0 	.word	0x200008e0
                ldr     r2, =__bss_end__
 80002a4:	200024f0 	.word	0x200024f0
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f009 f820 	bl	8009320 <chThdExit>

080002e0 <_zombies>:
_zombies:       b       _zombies
 80002e0:	e7fe      	b.n	80002e0 <_zombies>

080002e2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e2:	f002 fafd 	bl	80028e0 <chSchDoReschedule>

080002e6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <_port_exit_from_isr+0x2>
	...

080002ec <memcpy>:
 80002ec:	4684      	mov	ip, r0
 80002ee:	ea41 0300 	orr.w	r3, r1, r0
 80002f2:	f013 0303 	ands.w	r3, r3, #3
 80002f6:	d16d      	bne.n	80003d4 <memcpy+0xe8>
 80002f8:	3a40      	subs	r2, #64	; 0x40
 80002fa:	d341      	bcc.n	8000380 <memcpy+0x94>
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a40      	subs	r2, #64	; 0x40
 800037e:	d2bd      	bcs.n	80002fc <memcpy+0x10>
 8000380:	3230      	adds	r2, #48	; 0x30
 8000382:	d311      	bcc.n	80003a8 <memcpy+0xbc>
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	3a10      	subs	r2, #16
 80003a6:	d2ed      	bcs.n	8000384 <memcpy+0x98>
 80003a8:	320c      	adds	r2, #12
 80003aa:	d305      	bcc.n	80003b8 <memcpy+0xcc>
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a04      	subs	r2, #4
 80003b6:	d2f9      	bcs.n	80003ac <memcpy+0xc0>
 80003b8:	3204      	adds	r2, #4
 80003ba:	d008      	beq.n	80003ce <memcpy+0xe2>
 80003bc:	07d2      	lsls	r2, r2, #31
 80003be:	bf1c      	itt	ne
 80003c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003c8:	d301      	bcc.n	80003ce <memcpy+0xe2>
 80003ca:	880b      	ldrh	r3, [r1, #0]
 80003cc:	8003      	strh	r3, [r0, #0]
 80003ce:	4660      	mov	r0, ip
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	2a08      	cmp	r2, #8
 80003d6:	d313      	bcc.n	8000400 <memcpy+0x114>
 80003d8:	078b      	lsls	r3, r1, #30
 80003da:	d08d      	beq.n	80002f8 <memcpy+0xc>
 80003dc:	f010 0303 	ands.w	r3, r0, #3
 80003e0:	d08a      	beq.n	80002f8 <memcpy+0xc>
 80003e2:	f1c3 0304 	rsb	r3, r3, #4
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	07db      	lsls	r3, r3, #31
 80003ea:	bf1c      	itt	ne
 80003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003f4:	d380      	bcc.n	80002f8 <memcpy+0xc>
 80003f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003fa:	f820 3b02 	strh.w	r3, [r0], #2
 80003fe:	e77b      	b.n	80002f8 <memcpy+0xc>
 8000400:	3a04      	subs	r2, #4
 8000402:	d3d9      	bcc.n	80003b8 <memcpy+0xcc>
 8000404:	3a01      	subs	r2, #1
 8000406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800040a:	f800 3b01 	strb.w	r3, [r0], #1
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0x118>
 8000410:	780b      	ldrb	r3, [r1, #0]
 8000412:	7003      	strb	r3, [r0, #0]
 8000414:	784b      	ldrb	r3, [r1, #1]
 8000416:	7043      	strb	r3, [r0, #1]
 8000418:	788b      	ldrb	r3, [r1, #2]
 800041a:	7083      	strb	r3, [r0, #2]
 800041c:	4660      	mov	r0, ip
 800041e:	4770      	bx	lr
 8000420:	eba2 0003 	sub.w	r0, r2, r3
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop

08000428 <strcmp>:
 8000428:	7802      	ldrb	r2, [r0, #0]
 800042a:	780b      	ldrb	r3, [r1, #0]
 800042c:	2a01      	cmp	r2, #1
 800042e:	bf28      	it	cs
 8000430:	429a      	cmpcs	r2, r3
 8000432:	d1f5      	bne.n	8000420 <memcpy+0x134>
 8000434:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000438:	ea40 0401 	orr.w	r4, r0, r1
 800043c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000440:	f06f 0c00 	mvn.w	ip, #0
 8000444:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000448:	b312      	cbz	r2, 8000490 <strcmp+0x68>
 800044a:	ea80 0401 	eor.w	r4, r0, r1
 800044e:	f014 0f07 	tst.w	r4, #7
 8000452:	d16a      	bne.n	800052a <strcmp+0x102>
 8000454:	f000 0407 	and.w	r4, r0, #7
 8000458:	f020 0007 	bic.w	r0, r0, #7
 800045c:	f004 0503 	and.w	r5, r4, #3
 8000460:	f021 0107 	bic.w	r1, r1, #7
 8000464:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000468:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800046c:	f014 0f04 	tst.w	r4, #4
 8000470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000474:	fa0c f405 	lsl.w	r4, ip, r5
 8000478:	ea62 0204 	orn	r2, r2, r4
 800047c:	ea66 0604 	orn	r6, r6, r4
 8000480:	d00a      	beq.n	8000498 <strcmp+0x70>
 8000482:	ea63 0304 	orn	r3, r3, r4
 8000486:	4662      	mov	r2, ip
 8000488:	ea67 0704 	orn	r7, r7, r4
 800048c:	4666      	mov	r6, ip
 800048e:	e003      	b.n	8000498 <strcmp+0x70>
 8000490:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000494:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000498:	fa82 f54c 	uadd8	r5, r2, ip
 800049c:	ea82 0406 	eor.w	r4, r2, r6
 80004a0:	faa4 f48c 	sel	r4, r4, ip
 80004a4:	bb6c      	cbnz	r4, 8000502 <strcmp+0xda>
 80004a6:	fa83 f54c 	uadd8	r5, r3, ip
 80004aa:	ea83 0507 	eor.w	r5, r3, r7
 80004ae:	faa5 f58c 	sel	r5, r5, ip
 80004b2:	b995      	cbnz	r5, 80004da <strcmp+0xb2>
 80004b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004bc:	fa82 f54c 	uadd8	r5, r2, ip
 80004c0:	ea82 0406 	eor.w	r4, r2, r6
 80004c4:	faa4 f48c 	sel	r4, r4, ip
 80004c8:	fa83 f54c 	uadd8	r5, r3, ip
 80004cc:	ea83 0507 	eor.w	r5, r3, r7
 80004d0:	faa5 f58c 	sel	r5, r5, ip
 80004d4:	4325      	orrs	r5, r4
 80004d6:	d0db      	beq.n	8000490 <strcmp+0x68>
 80004d8:	b99c      	cbnz	r4, 8000502 <strcmp+0xda>
 80004da:	ba2d      	rev	r5, r5
 80004dc:	fab5 f485 	clz	r4, r5
 80004e0:	f024 0407 	bic.w	r4, r4, #7
 80004e4:	fa27 f104 	lsr.w	r1, r7, r4
 80004e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004ec:	fa23 f304 	lsr.w	r3, r3, r4
 80004f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004fc:	eba0 0001 	sub.w	r0, r0, r1
 8000500:	4770      	bx	lr
 8000502:	ba24      	rev	r4, r4
 8000504:	fab4 f484 	clz	r4, r4
 8000508:	f024 0407 	bic.w	r4, r4, #7
 800050c:	fa26 f104 	lsr.w	r1, r6, r4
 8000510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000514:	fa22 f204 	lsr.w	r2, r2, r4
 8000518:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800051c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000520:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000524:	eba0 0001 	sub.w	r0, r0, r1
 8000528:	4770      	bx	lr
 800052a:	f014 0f03 	tst.w	r4, #3
 800052e:	d13c      	bne.n	80005aa <strcmp+0x182>
 8000530:	f010 0403 	ands.w	r4, r0, #3
 8000534:	d128      	bne.n	8000588 <strcmp+0x160>
 8000536:	f850 2b08 	ldr.w	r2, [r0], #8
 800053a:	f851 3b08 	ldr.w	r3, [r1], #8
 800053e:	fa82 f54c 	uadd8	r5, r2, ip
 8000542:	ea82 0503 	eor.w	r5, r2, r3
 8000546:	faa5 f58c 	sel	r5, r5, ip
 800054a:	b95d      	cbnz	r5, 8000564 <strcmp+0x13c>
 800054c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000554:	fa82 f54c 	uadd8	r5, r2, ip
 8000558:	ea82 0503 	eor.w	r5, r2, r3
 800055c:	faa5 f58c 	sel	r5, r5, ip
 8000560:	2d00      	cmp	r5, #0
 8000562:	d0e8      	beq.n	8000536 <strcmp+0x10e>
 8000564:	ba2d      	rev	r5, r5
 8000566:	fab5 f485 	clz	r4, r5
 800056a:	f024 0407 	bic.w	r4, r4, #7
 800056e:	fa23 f104 	lsr.w	r1, r3, r4
 8000572:	fa22 f204 	lsr.w	r2, r2, r4
 8000576:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800057a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000582:	eba0 0001 	sub.w	r0, r0, r1
 8000586:	4770      	bx	lr
 8000588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800058c:	f020 0003 	bic.w	r0, r0, #3
 8000590:	f850 2b08 	ldr.w	r2, [r0], #8
 8000594:	f021 0103 	bic.w	r1, r1, #3
 8000598:	f851 3b08 	ldr.w	r3, [r1], #8
 800059c:	fa0c f404 	lsl.w	r4, ip, r4
 80005a0:	ea62 0204 	orn	r2, r2, r4
 80005a4:	ea63 0304 	orn	r3, r3, r4
 80005a8:	e7c9      	b.n	800053e <strcmp+0x116>
 80005aa:	f010 0403 	ands.w	r4, r0, #3
 80005ae:	d01a      	beq.n	80005e6 <strcmp+0x1be>
 80005b0:	eba1 0104 	sub.w	r1, r1, r4
 80005b4:	f020 0003 	bic.w	r0, r0, #3
 80005b8:	07e4      	lsls	r4, r4, #31
 80005ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80005be:	d006      	beq.n	80005ce <strcmp+0x1a6>
 80005c0:	d20f      	bcs.n	80005e2 <strcmp+0x1ba>
 80005c2:	788b      	ldrb	r3, [r1, #2]
 80005c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005c8:	1ae4      	subs	r4, r4, r3
 80005ca:	d106      	bne.n	80005da <strcmp+0x1b2>
 80005cc:	b12b      	cbz	r3, 80005da <strcmp+0x1b2>
 80005ce:	78cb      	ldrb	r3, [r1, #3]
 80005d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	d100      	bne.n	80005da <strcmp+0x1b2>
 80005d8:	b91b      	cbnz	r3, 80005e2 <strcmp+0x1ba>
 80005da:	4620      	mov	r0, r4
 80005dc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80005e0:	4770      	bx	lr
 80005e2:	f101 0104 	add.w	r1, r1, #4
 80005e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80005ea:	07cc      	lsls	r4, r1, #31
 80005ec:	f021 0103 	bic.w	r1, r1, #3
 80005f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f4:	d848      	bhi.n	8000688 <strcmp+0x260>
 80005f6:	d224      	bcs.n	8000642 <strcmp+0x21a>
 80005f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80005fc:	fa82 f54c 	uadd8	r5, r2, ip
 8000600:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000604:	faa5 f58c 	sel	r5, r5, ip
 8000608:	d10a      	bne.n	8000620 <strcmp+0x1f8>
 800060a:	b965      	cbnz	r5, 8000626 <strcmp+0x1fe>
 800060c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000610:	ea84 0402 	eor.w	r4, r4, r2
 8000614:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000618:	d10e      	bne.n	8000638 <strcmp+0x210>
 800061a:	f850 2b04 	ldr.w	r2, [r0], #4
 800061e:	e7eb      	b.n	80005f8 <strcmp+0x1d0>
 8000620:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000624:	e055      	b.n	80006d2 <strcmp+0x2aa>
 8000626:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800062a:	d14d      	bne.n	80006c8 <strcmp+0x2a0>
 800062c:	7808      	ldrb	r0, [r1, #0]
 800062e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000632:	f1c0 0000 	rsb	r0, r0, #0
 8000636:	4770      	bx	lr
 8000638:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800063c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000640:	e047      	b.n	80006d2 <strcmp+0x2aa>
 8000642:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000646:	fa82 f54c 	uadd8	r5, r2, ip
 800064a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800064e:	faa5 f58c 	sel	r5, r5, ip
 8000652:	d10a      	bne.n	800066a <strcmp+0x242>
 8000654:	b965      	cbnz	r5, 8000670 <strcmp+0x248>
 8000656:	f851 3b04 	ldr.w	r3, [r1], #4
 800065a:	ea84 0402 	eor.w	r4, r4, r2
 800065e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000662:	d10c      	bne.n	800067e <strcmp+0x256>
 8000664:	f850 2b04 	ldr.w	r2, [r0], #4
 8000668:	e7eb      	b.n	8000642 <strcmp+0x21a>
 800066a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800066e:	e030      	b.n	80006d2 <strcmp+0x2aa>
 8000670:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000674:	d128      	bne.n	80006c8 <strcmp+0x2a0>
 8000676:	880b      	ldrh	r3, [r1, #0]
 8000678:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800067c:	e029      	b.n	80006d2 <strcmp+0x2aa>
 800067e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000682:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000686:	e024      	b.n	80006d2 <strcmp+0x2aa>
 8000688:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800068c:	fa82 f54c 	uadd8	r5, r2, ip
 8000690:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000694:	faa5 f58c 	sel	r5, r5, ip
 8000698:	d10a      	bne.n	80006b0 <strcmp+0x288>
 800069a:	b965      	cbnz	r5, 80006b6 <strcmp+0x28e>
 800069c:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a0:	ea84 0402 	eor.w	r4, r4, r2
 80006a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006a8:	d109      	bne.n	80006be <strcmp+0x296>
 80006aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ae:	e7eb      	b.n	8000688 <strcmp+0x260>
 80006b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006b4:	e00d      	b.n	80006d2 <strcmp+0x2aa>
 80006b6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006ba:	d105      	bne.n	80006c8 <strcmp+0x2a0>
 80006bc:	680b      	ldr	r3, [r1, #0]
 80006be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006c6:	e004      	b.n	80006d2 <strcmp+0x2aa>
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006d0:	4770      	bx	lr
 80006d2:	ba12      	rev	r2, r2
 80006d4:	ba1b      	rev	r3, r3
 80006d6:	fa82 f44c 	uadd8	r4, r2, ip
 80006da:	ea82 0403 	eor.w	r4, r2, r3
 80006de:	faa4 f58c 	sel	r5, r4, ip
 80006e2:	fab5 f485 	clz	r4, r5
 80006e6:	fa02 f204 	lsl.w	r2, r2, r4
 80006ea:	fa03 f304 	lsl.w	r3, r3, r4
 80006ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80006f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80006fa:	4770      	bx	lr
 80006fc:	0000      	movs	r0, r0
	...

08000700 <chMtxTryLock.constprop.0>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000700:	2320      	movs	r3, #32
 8000702:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <chMtxTryLock.constprop.0+0x2c>)
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	b122      	cbz	r2, 8000716 <chMtxTryLock.constprop.0+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800070c:	2000      	movs	r0, #0
 800070e:	2300      	movs	r3, #0
 8000710:	f383 8811 	msr	BASEPRI, r3
}
 8000714:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <chMtxTryLock.constprop.0+0x30>)
 8000718:	6992      	ldr	r2, [r2, #24]
 800071a:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 800071c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800071e:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8000720:	6393      	str	r3, [r2, #56]	; 0x38
 8000722:	2001      	movs	r0, #1
 8000724:	2300      	movs	r3, #0
 8000726:	f383 8811 	msr	BASEPRI, r3
}
 800072a:	4770      	bx	lr
 800072c:	2000082c 	.word	0x2000082c
 8000730:	200009b0 	.word	0x200009b0
	...

08000740 <chEvtGetAndClearEvents.constprop.0>:
 8000740:	2320      	movs	r3, #32
 8000742:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <chEvtGetAndClearEvents.constprop.0+0x18>)
 8000748:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800074a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800074c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800074e:	6353      	str	r3, [r2, #52]	; 0x34
 8000750:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200009b0 	.word	0x200009b0
 800075c:	00000000 	.word	0x00000000

08000760 <_test_assert_time_window.constprop.0>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
                (systime_t)((systime_t)end - (systime_t)start));
 8000764:	1a09      	subs	r1, r1, r0
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8000768:	1a18      	subs	r0, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800076a:	4288      	cmp	r0, r1
 800076c:	d201      	bcs.n	8000772 <_test_assert_time_window.constprop.0+0x12>
    return _test_fail(msg);
  return false;
 800076e:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000770:	4770      	bx	lr
  test_failure_message = msg;
 8000772:	4904      	ldr	r1, [pc, #16]	; (8000784 <_test_assert_time_window.constprop.0+0x24>)
  test_local_fail      = true;
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <_test_assert_time_window.constprop.0+0x28>)
  test_global_fail     = true;
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <_test_assert_time_window.constprop.0+0x2c>)
  test_failure_message = msg;
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <_test_assert_time_window.constprop.0+0x30>)
 800077a:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 800077c:	2001      	movs	r0, #1
 800077e:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 8000780:	7018      	strb	r0, [r3, #0]
 8000782:	4770      	bx	lr
 8000784:	20001c04 	.word	0x20001c04
 8000788:	20001ca8 	.word	0x20001ca8
 800078c:	20001c08 	.word	0x20001c08
 8000790:	0800a0c0 	.word	0x0800a0c0
	...

080007a0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80007a0:	b430      	push	{r4, r5}
 80007a2:	2320      	movs	r3, #32
 80007a4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80007a8:	4c0b      	ldr	r4, [pc, #44]	; (80007d8 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80007aa:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80007ae:	4249      	negs	r1, r1
 80007b0:	1a28      	subs	r0, r5, r0
 80007b2:	4008      	ands	r0, r1
  prev = p - offset;
 80007b4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d307      	bcc.n	80007ca <chCoreAllocFromTop+0x2a>
 80007ba:	4295      	cmp	r5, r2
 80007bc:	d305      	bcc.n	80007ca <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80007be:	6062      	str	r2, [r4, #4]
 80007c0:	2300      	movs	r3, #0
 80007c2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80007c6:	bc30      	pop	{r4, r5}
 80007c8:	4770      	bx	lr
    return NULL;
 80007ca:	2000      	movs	r0, #0
 80007cc:	2300      	movs	r3, #0
 80007ce:	f383 8811 	msr	BASEPRI, r3
}
 80007d2:	bc30      	pop	{r4, r5}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20001350 	.word	0x20001350
 80007dc:	00000000 	.word	0x00000000

080007e0 <oslib_test_008_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <oslib_test_008_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80007e2:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <oslib_test_008_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80007e4:	1dd9      	adds	r1, r3, #7
 80007e6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80007ea:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80007ec:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [8.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_008_001_setup(void) {
 80007f0:	b410      	push	{r4}
  heapp->provider = NULL;
 80007f2:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80007f4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80007fc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80007fe:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000800:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000804:	6010      	str	r0, [r2, #0]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8000806:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000808:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 800080a:	6150      	str	r0, [r2, #20]
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20001c28 	.word	0x20001c28
 8000814:	20001c0c 	.word	0x20001c0c
	...

08000820 <oslib_test_007_003_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <oslib_test_007_003_setup+0x18>)
 8000822:	2200      	movs	r2, #0
  mp->object_size = size;
 8000824:	2104      	movs	r1, #4
 8000826:	e9c3 3300 	strd	r3, r3, [r3]
  mp->align = align;
 800082a:	e9c3 1104 	strd	r1, r1, [r3, #16]
  mp->next = NULL;
 800082e:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 8000830:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8000832:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000810 	.word	0x20000810
 800083c:	00000000 	.word	0x00000000

08000840 <oslib_test_007_002_setup>:
 8000840:	f7ff bfee 	b.w	8000820 <oslib_test_007_003_setup>
	...

08000850 <null_provider>:
}
 8000850:	2000      	movs	r0, #0
 8000852:	4770      	bx	lr
	...

08000860 <oslib_test_007_001_setup>:
  mp->next = NULL;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <oslib_test_007_001_setup+0x10>)
 8000862:	2100      	movs	r1, #0
  mp->object_size = size;
 8000864:	2204      	movs	r2, #4
  mp->align = align;
 8000866:	e9c3 2201 	strd	r2, r2, [r3, #4]
  mp->next = NULL;
 800086a:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 800086c:	60d9      	str	r1, [r3, #12]
}
 800086e:	4770      	bx	lr
 8000870:	20000874 	.word	0x20000874
	...

08000880 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	1d1a      	adds	r2, r3, #4
 8000884:	6002      	str	r2, [r0, #0]
  return fn0();
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4718      	bx	r3
 800088a:	bf00      	nop
 800088c:	0000      	movs	r0, r0
	...

08000890 <__ch_delegate_fn1>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000890:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000892:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000894:	460a      	mov	r2, r1
 8000896:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000898:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800089a:	6018      	str	r0, [r3, #0]
 800089c:	f852 4b08 	ldr.w	r4, [r2], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 80008a0:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 80008a2:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 80008a4:	4623      	mov	r3, r4
}
 80008a6:	bc10      	pop	{r4}
  return fn1(p1);
 80008a8:	4718      	bx	r3
 80008aa:	bf00      	nop
 80008ac:	0000      	movs	r0, r0
	...

080008b0 <__ch_delegate_fn2>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 80008b0:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 80008b2:	b430      	push	{r4, r5}
 80008b4:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 80008b6:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 80008b8:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 80008ba:	6019      	str	r1, [r3, #0]
 80008bc:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
  return fn2(p1, p2);
 80008be:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80008c0:	f102 050c 	add.w	r5, r2, #12
 80008c4:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 80008c6:	4623      	mov	r3, r4
}
 80008c8:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 80008ca:	4718      	bx	r3
 80008cc:	0000      	movs	r0, r0
	...

080008d0 <__ch_delegate_fn3>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80008d0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 80008d2:	b470      	push	{r4, r5, r6}
 80008d4:	4604      	mov	r4, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80008d6:	1d1a      	adds	r2, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80008d8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80008dc:	6022      	str	r2, [r4, #0]
 80008de:	681d      	ldr	r5, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
  return fn3(p1, p2, p3);
 80008e0:	68da      	ldr	r2, [r3, #12]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80008e2:	f103 0610 	add.w	r6, r3, #16
 80008e6:	6026      	str	r6, [r4, #0]
  return fn3(p1, p2, p3);
 80008e8:	462b      	mov	r3, r5
}
 80008ea:	bc70      	pop	{r4, r5, r6}
  return fn3(p1, p2, p3);
 80008ec:	4718      	bx	r3
 80008ee:	bf00      	nop

080008f0 <__ch_delegate_fn4>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80008f0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 80008f2:	b470      	push	{r4, r5, r6}
 80008f4:	4604      	mov	r4, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80008f6:	1d1d      	adds	r5, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80008f8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80008fc:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80008fe:	6025      	str	r5, [r4, #0]
 8000900:	681d      	ldr	r5, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 8000902:	f103 0614 	add.w	r6, r3, #20
  return fn4(p1, p2, p3, p4);
 8000906:	46ac      	mov	ip, r5
 8000908:	691b      	ldr	r3, [r3, #16]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 800090a:	6026      	str	r6, [r4, #0]
}
 800090c:	bc70      	pop	{r4, r5, r6}
  return fn4(p1, p2, p3, p4);
 800090e:	4760      	bx	ip

08000910 <oslib_test_003_002_setup>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8000910:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <oslib_test_003_002_setup+0x40>)
 8000914:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <oslib_test_003_002_setup+0x44>)
 8000916:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 8000918:	f102 0508 	add.w	r5, r2, #8
  tqp->next = (thread_t *)tqp;
 800091c:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000920:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000924:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 8000928:	2200      	movs	r2, #0
 800092a:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 800092e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000932:	605d      	str	r5, [r3, #4]
 8000934:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8000938:	bc30      	pop	{r4, r5}
 800093a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 800093e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000942:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000944:	751a      	strb	r2, [r3, #20]
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
 800094a:	649a      	str	r2, [r3, #72]	; 0x48
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000088c 	.word	0x2000088c
 8000954:	2000095c 	.word	0x2000095c
	...

08000960 <oslib_test_003_001_setup>:
static void oslib_test_003_001_setup(void) {
 8000960:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <oslib_test_003_001_setup+0x40>)
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <oslib_test_003_001_setup+0x44>)
 8000966:	601a      	str	r2, [r3, #0]
  pp->top    = &buf[n];
 8000968:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800096c:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000970:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000974:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 8000978:	2200      	movs	r2, #0
 800097a:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 800097e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000982:	605d      	str	r5, [r3, #4]
 8000984:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
}
 8000988:	bc30      	pop	{r4, r5}
 800098a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 800098e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000992:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000994:	751a      	strb	r2, [r3, #20]
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
 8000998:	639a      	str	r2, [r3, #56]	; 0x38
 800099a:	649a      	str	r2, [r3, #72]	; 0x48
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000088c 	.word	0x2000088c
 80009a4:	2000095c 	.word	0x2000095c
	...

080009b0 <oslib_test_002_003_setup>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 80009b0:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <oslib_test_002_003_setup+0x2c>)
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <oslib_test_002_003_setup+0x30>)
 80009b6:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 80009b8:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 80009bc:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 80009c0:	2100      	movs	r1, #0
 80009c2:	f103 0020 	add.w	r0, r3, #32
  tqp->prev = (thread_t *)tqp;
 80009c6:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->top    = &buf[n];
 80009ca:	605d      	str	r5, [r3, #4]
  mbp->wrptr  = buf;
 80009cc:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 80009d0:	bc30      	pop	{r4, r5}
 80009d2:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 80009d6:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 80009d8:	7519      	strb	r1, [r3, #20]
 80009da:	4770      	bx	lr
 80009dc:	2000084c 	.word	0x2000084c
 80009e0:	20001438 	.word	0x20001438
	...

080009f0 <oslib_test_002_002_setup>:
 80009f0:	f7ff bfde 	b.w	80009b0 <oslib_test_002_003_setup>
	...

08000a00 <oslib_test_002_001_setup>:
 8000a00:	f7ff bfd6 	b.w	80009b0 <oslib_test_002_003_setup>
	...

08000a10 <rt_test_011_011_setup>:
  tqp->next = (thread_t *)tqp;
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <rt_test_011_011_setup+0xc>)
 8000a12:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000a14:	e9c3 3300 	strd	r3, r3, [r3]
 8000a18:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 8000a1a:	4770      	bx	lr
 8000a1c:	20001468 	.word	0x20001468

08000a20 <rt_test_011_010_setup>:
  tqp->next = (thread_t *)tqp;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <rt_test_011_010_setup+0xc>)
 8000a22:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000a24:	e9c3 3300 	strd	r3, r3, [r3]
 8000a28:	609a      	str	r2, [r3, #8]
}
 8000a2a:	4770      	bx	lr
 8000a2c:	20001584 	.word	0x20001584

08000a30 <tmo>:
static void tmo(void *param) {(void)param;}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
	...

08000a40 <rt_test_011_007_setup>:
  tqp->next = (thread_t *)tqp;
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <rt_test_011_007_setup+0xc>)
 8000a42:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000a44:	e9c3 3300 	strd	r3, r3, [r3]
 8000a48:	609a      	str	r2, [r3, #8]
}
 8000a4a:	4770      	bx	lr
 8000a4c:	20001584 	.word	0x20001584

08000a50 <rt_test_010_002_setup>:
  mp->next = NULL;
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <rt_test_010_002_setup+0x14>)
 8000a52:	2200      	movs	r2, #0
  mp->object_size = size;
 8000a54:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8000a58:	2104      	movs	r1, #4
 8000a5a:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 8000a5e:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8000a60:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_010_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000a62:	4770      	bx	lr
 8000a64:	20001448 	.word	0x20001448
	...

08000a70 <rt_test_010_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <rt_test_010_001_setup+0x30>)
  heapp->provider = NULL;
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <rt_test_010_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000a74:	1dd9      	adds	r1, r3, #7
 8000a76:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8000a7a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000a7c:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_010_001_setup(void) {
 8000a80:	b410      	push	{r4}
  heapp->provider = NULL;
 8000a82:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8000a84:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 8000a8c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 8000a8e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000a90:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000a94:	6010      	str	r0, [r2, #0]
}
 8000a96:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000a98:	6090      	str	r0, [r2, #8]
 8000a9a:	6150      	str	r0, [r2, #20]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20001598 	.word	0x20001598
 8000aa4:	200013b8 	.word	0x200013b8
	...

08000ab0 <rt_test_009_007_setup>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8000ab0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000ab2:	f7ff fe45 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000ab6:	4a02      	ldr	r2, [pc, #8]	; (8000ac0 <rt_test_009_007_setup+0x10>)
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <rt_test_009_007_setup+0x14>)
 8000aba:	6012      	str	r2, [r2, #0]
 8000abc:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000abe:	bd08      	pop	{r3, pc}
 8000ac0:	20000808 	.word	0x20000808
 8000ac4:	2000080c 	.word	0x2000080c
	...

08000ad0 <rt_test_009_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000ad0:	f7ff be36 	b.w	8000740 <chEvtGetAndClearEvents.constprop.0>
	...

08000ae0 <rt_test_009_005_setup>:
 8000ae0:	f7ff bff6 	b.w	8000ad0 <rt_test_009_006_setup>
	...

08000af0 <rt_test_009_004_setup>:
 8000af0:	f7ff bfee 	b.w	8000ad0 <rt_test_009_006_setup>
	...

08000b00 <rt_test_009_003_setup>:
 8000b00:	f7ff bfe6 	b.w	8000ad0 <rt_test_009_006_setup>
	...

08000b10 <rt_test_009_002_setup>:
 8000b10:	f7ff bfde 	b.w	8000ad0 <rt_test_009_006_setup>
	...

08000b20 <rt_test_007_009_setup>:
  tqp->next = (thread_t *)tqp;
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <rt_test_007_009_setup+0x1c>)
 8000b22:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <rt_test_007_009_setup+0x20>)
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <rt_test_007_009_setup+0x24>)
 8000b26:	6009      	str	r1, [r1, #0]
 8000b28:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 8000b2a:	e9c2 2200 	strd	r2, r2, [r2]
 8000b2e:	e9c3 3300 	strd	r3, r3, [r3]
 8000b32:	6049      	str	r1, [r1, #4]
 8000b34:	6090      	str	r0, [r2, #8]
 8000b36:	6098      	str	r0, [r3, #8]

static void rt_test_007_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000800 	.word	0x20000800
 8000b40:	2000082c 	.word	0x2000082c
 8000b44:	2000083c 	.word	0x2000083c
	...

08000b50 <rt_test_007_008_setup>:
  tqp->next = (thread_t *)tqp;
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <rt_test_007_008_setup+0x14>)
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <rt_test_007_008_setup+0x18>)
 8000b54:	6012      	str	r2, [r2, #0]
 8000b56:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8000b58:	e9c3 3300 	strd	r3, r3, [r3]
 8000b5c:	6052      	str	r2, [r2, #4]
 8000b5e:	6099      	str	r1, [r3, #8]
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000800 	.word	0x20000800
 8000b68:	2000082c 	.word	0x2000082c
 8000b6c:	00000000 	.word	0x00000000

08000b70 <rt_test_007_007_setup>:
 8000b70:	f7ff bfee 	b.w	8000b50 <rt_test_007_008_setup>
	...

08000b80 <rt_test_007_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <rt_test_007_005_setup+0xc>)
 8000b82:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000b84:	e9c3 3300 	strd	r3, r3, [r3]
 8000b88:	609a      	str	r2, [r3, #8]
}
 8000b8a:	4770      	bx	lr
 8000b8c:	2000082c 	.word	0x2000082c

08000b90 <rt_test_007_004_setup>:
  tqp->next = (thread_t *)tqp;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <rt_test_007_004_setup+0x14>)
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <rt_test_007_004_setup+0x18>)
 8000b94:	6012      	str	r2, [r2, #0]
 8000b96:	2100      	movs	r1, #0
 8000b98:	e9c2 2101 	strd	r2, r1, [r2, #4]
  tqp->prev = (thread_t *)tqp;
 8000b9c:	e9c3 3300 	strd	r3, r3, [r3]
 8000ba0:	6099      	str	r1, [r3, #8]
}
 8000ba2:	4770      	bx	lr
 8000ba4:	2000082c 	.word	0x2000082c
 8000ba8:	2000083c 	.word	0x2000083c
 8000bac:	00000000 	.word	0x00000000

08000bb0 <rt_test_007_001_setup>:
 8000bb0:	f7ff bfe6 	b.w	8000b80 <rt_test_007_005_setup>
	...

08000bc0 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <rt_test_006_005_setup+0xc>)
 8000bc2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000bc4:	e9c3 3300 	strd	r3, r3, [r3]
 8000bc8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000bca:	4770      	bx	lr
 8000bcc:	20001578 	.word	0x20001578

08000bd0 <rt_test_006_004_setup>:
 8000bd0:	f7ff bff6 	b.w	8000bc0 <rt_test_006_005_setup>
	...

08000be0 <rt_test_006_003_setup>:
 8000be0:	f7ff bfee 	b.w	8000bc0 <rt_test_006_005_setup>
	...

08000bf0 <rt_test_006_002_setup>:
 8000bf0:	f7ff bfe6 	b.w	8000bc0 <rt_test_006_005_setup>
	...

08000c00 <rt_test_006_001_setup>:
  tqp->next = (thread_t *)tqp;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <rt_test_006_001_setup+0xc>)
 8000c02:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000c04:	e9c3 3300 	strd	r3, r3, [r3]
 8000c08:	609a      	str	r2, [r3, #8]
}
 8000c0a:	4770      	bx	lr
 8000c0c:	20001578 	.word	0x20001578

08000c10 <rt_test_005_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 8000c10:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <rt_test_005_001_setup+0x8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	4770      	bx	lr
 8000c18:	20001cd8 	.word	0x20001cd8
 8000c1c:	00000000 	.word	0x00000000

08000c20 <_test_assert>:
  if (!condition)
 8000c20:	b108      	cbz	r0, 8000c26 <_test_assert+0x6>
  return false;
 8000c22:	2000      	movs	r0, #0
}
 8000c24:	4770      	bx	lr
bool _test_assert(bool condition, const char *msg) {
 8000c26:	b410      	push	{r4}
  test_global_fail     = true;
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000c2a:	4c05      	ldr	r4, [pc, #20]	; (8000c40 <_test_assert+0x20>)
  test_failure_message = msg;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <_test_assert+0x24>)
  test_local_fail      = true;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000c32:	7010      	strb	r0, [r2, #0]
}
 8000c34:	bc10      	pop	{r4}
  test_failure_message = msg;
 8000c36:	6019      	str	r1, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20001c08 	.word	0x20001c08
 8000c40:	20001ca8 	.word	0x20001ca8
 8000c44:	20001c04 	.word	0x20001c04
	...

08000c50 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <rt_test_003_002_execute+0x8>)
 8000c52:	2203      	movs	r2, #3
 8000c54:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000c56:	4770      	bx	lr
 8000c58:	20001cac 	.word	0x20001cac
 8000c5c:	00000000 	.word	0x00000000

08000c60 <rt_test_003_001_execute>:
  test_set_step(1);
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <rt_test_003_001_execute+0x14>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	6019      	str	r1, [r3, #0]
 8000c6a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c6c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (time == chVTGetSystemTimeX()) {
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d0fc      	beq.n	8000c6c <rt_test_003_001_execute+0xc>
}
 8000c72:	4770      	bx	lr
 8000c74:	20001cac 	.word	0x20001cac
	...

08000c80 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <rt_test_002_003_execute+0x20>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	2320      	movs	r3, #32
 8000c88:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000c8c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c90:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000c94:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c96:	2300      	movs	r3, #0
 8000c98:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000c9c:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000c9e:	4770      	bx	lr
 8000ca0:	20001cac 	.word	0x20001cac
	...

08000cb0 <test_terminate_threads>:
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <test_terminate_threads+0x30>)
void test_terminate_threads(void) {
 8000cb2:	b430      	push	{r4, r5}
 8000cb4:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000cb8:	2520      	movs	r5, #32
 8000cba:	2400      	movs	r4, #0
    if (threads[i])
 8000cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cc0:	b14a      	cbz	r2, 8000cd6 <test_terminate_threads+0x26>
 8000cc2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000cc6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000cca:	f041 0104 	orr.w	r1, r1, #4
 8000cce:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8000cd2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8000cd6:	4283      	cmp	r3, r0
 8000cd8:	d1f0      	bne.n	8000cbc <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 8000cda:	bc30      	pop	{r4, r5}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20001cc4 	.word	0x20001cc4
	...

08000cf0 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000cf0:	b310      	cbz	r0, 8000d38 <test_printn.part.0+0x48>
void test_printn(uint32_t n) {
 8000cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf4:	b085      	sub	sp, #20
    p = buf;
 8000cf6:	466c      	mov	r4, sp
      *p++ = (n % 10) + '0', n /= 10;
 8000cf8:	4f10      	ldr	r7, [pc, #64]	; (8000d3c <test_printn.part.0+0x4c>)
    p = buf;
 8000cfa:	4622      	mov	r2, r4
      *p++ = (n % 10) + '0', n /= 10;
 8000cfc:	fba7 1300 	umull	r1, r3, r7, r0
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000d06:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	3130      	adds	r1, #48	; 0x30
 8000d0e:	b2c9      	uxtb	r1, r1
    while (n)
 8000d10:	2e09      	cmp	r6, #9
 8000d12:	4615      	mov	r5, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000d14:	4618      	mov	r0, r3
 8000d16:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000d1a:	d8ef      	bhi.n	8000cfc <test_printn.part.0+0xc>
    while (p > buf)
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	d909      	bls.n	8000d34 <test_printn.part.0+0x44>
 8000d20:	4e07      	ldr	r6, [pc, #28]	; (8000d40 <test_printn.part.0+0x50>)
 8000d22:	e001      	b.n	8000d28 <test_printn.part.0+0x38>
 8000d24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
      streamPut(test_chp, *--p);
 8000d28:	6830      	ldr	r0, [r6, #0]
 8000d2a:	6803      	ldr	r3, [r0, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	4798      	blx	r3
    while (p > buf)
 8000d30:	42ac      	cmp	r4, r5
 8000d32:	d1f7      	bne.n	8000d24 <test_printn.part.0+0x34>
  }
}
 8000d34:	b005      	add	sp, #20
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	cccccccd 	.word	0xcccccccd
 8000d40:	20001c00 	.word	0x20001c00
	...

08000d50 <test_printn>:
  if (!n)
 8000d50:	b928      	cbnz	r0, 8000d5e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <test_printn+0x14>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	6803      	ldr	r3, [r0, #0]
 8000d58:	2130      	movs	r1, #48	; 0x30
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4718      	bx	r3
 8000d5e:	f7ff bfc7 	b.w	8000cf0 <test_printn.part.0>
 8000d62:	bf00      	nop
 8000d64:	20001c00 	.word	0x20001c00
	...

08000d70 <test_emit_token>:
 8000d70:	2320      	movs	r3, #32
 8000d72:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <test_emit_token+0x20>)
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <test_emit_token+0x24>)
 8000d7a:	6813      	ldr	r3, [r2, #0]
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d202      	bcs.n	8000d86 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000d80:	1c59      	adds	r1, r3, #1
 8000d82:	7018      	strb	r0, [r3, #0]
 8000d84:	6011      	str	r1, [r2, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20001cc0 	.word	0x20001cc0
 8000d94:	20001cc0 	.word	0x20001cc0
	...

08000da0 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 8000da0:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000da2:	6948      	ldr	r0, [r1, #20]
 8000da4:	3041      	adds	r0, #65	; 0x41
 8000da6:	b2c0      	uxtb	r0, r0
 8000da8:	f7ff ffe2 	bl	8000d70 <test_emit_token>

  return false;
}
 8000dac:	2000      	movs	r0, #0
 8000dae:	bd08      	pop	{r3, pc}

08000db0 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8000db0:	b508      	push	{r3, lr}

  test_emit_token('0');
 8000db2:	2030      	movs	r0, #48	; 0x30
 8000db4:	f7ff ffdc 	bl	8000d70 <test_emit_token>

  return (msg_t)0x55AA;
}
 8000db8:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop

08000dc0 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000dc4:	b2c0      	uxtb	r0, r0
 8000dc6:	f7ff ffd3 	bl	8000d70 <test_emit_token>

  return (msg_t)a;
}
 8000dca:	4620      	mov	r0, r4
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	bf00      	nop

08000dd0 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	460d      	mov	r5, r1
 8000dd4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000dd6:	b2c0      	uxtb	r0, r0
 8000dd8:	f7ff ffca 	bl	8000d70 <test_emit_token>
  test_emit_token((char)b);
 8000ddc:	b2e8      	uxtb	r0, r5
 8000dde:	f7ff ffc7 	bl	8000d70 <test_emit_token>

  return (msg_t)a;
}
 8000de2:	4620      	mov	r0, r4
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop
	...

08000df0 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	460e      	mov	r6, r1
 8000df4:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000df6:	b2c0      	uxtb	r0, r0
static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000df8:	4615      	mov	r5, r2
  test_emit_token((char)a);
 8000dfa:	f7ff ffb9 	bl	8000d70 <test_emit_token>
  test_emit_token((char)b);
 8000dfe:	b2f0      	uxtb	r0, r6
 8000e00:	f7ff ffb6 	bl	8000d70 <test_emit_token>
  test_emit_token((char)c);
 8000e04:	b2e8      	uxtb	r0, r5
 8000e06:	f7ff ffb3 	bl	8000d70 <test_emit_token>

  return (msg_t)a;
}
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
 8000e0e:	bf00      	nop

08000e10 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	460f      	mov	r7, r1
 8000e14:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000e16:	b2c0      	uxtb	r0, r0
static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000e18:	4616      	mov	r6, r2
 8000e1a:	461d      	mov	r5, r3
  test_emit_token((char)a);
 8000e1c:	f7ff ffa8 	bl	8000d70 <test_emit_token>
  test_emit_token((char)b);
 8000e20:	b2f8      	uxtb	r0, r7
 8000e22:	f7ff ffa5 	bl	8000d70 <test_emit_token>
  test_emit_token((char)c);
 8000e26:	b2f0      	uxtb	r0, r6
 8000e28:	f7ff ffa2 	bl	8000d70 <test_emit_token>
  test_emit_token((char)d);
 8000e2c:	b2e8      	uxtb	r0, r5
 8000e2e:	f7ff ff9f 	bl	8000d70 <test_emit_token>

  return (msg_t)a;
}
 8000e32:	4620      	mov	r0, r4
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
	...

08000e40 <dis_func_end>:

static int dis_func_end(void) {
 8000e40:	b508      	push	{r3, lr}

  test_emit_token('Z');
 8000e42:	205a      	movs	r0, #90	; 0x5a
 8000e44:	f7ff ff94 	bl	8000d70 <test_emit_token>
  exit_flag = true;
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <dis_func_end+0x14>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 8000e4e:	f64a 2055 	movw	r0, #43605	; 0xaa55
 8000e52:	bd08      	pop	{r3, pc}
 8000e54:	20001374 	.word	0x20001374
	...

08000e60 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000e60:	2043      	movs	r0, #67	; 0x43
 8000e62:	f7ff bf85 	b.w	8000d70 <test_emit_token>
 8000e66:	bf00      	nop
	...

08000e70 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000e70:	2042      	movs	r0, #66	; 0x42
 8000e72:	f7ff bf7d 	b.w	8000d70 <test_emit_token>
 8000e76:	bf00      	nop
	...

08000e80 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000e80:	2041      	movs	r0, #65	; 0x41
 8000e82:	f7ff bf75 	b.w	8000d70 <test_emit_token>
 8000e86:	bf00      	nop
	...

08000e90 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	f7ff bf6d 	b.w	8000d70 <test_emit_token>
 8000e96:	bf00      	nop
	...

08000ea0 <dyn_thread1>:
 8000ea0:	f7ff bff6 	b.w	8000e90 <thread>
	...

08000eb0 <test_println>:
void test_println(const char *msgp) {
 8000eb0:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000eb2:	7801      	ldrb	r1, [r0, #0]
 8000eb4:	b189      	cbz	r1, 8000eda <test_println+0x2a>
 8000eb6:	4d0a      	ldr	r5, [pc, #40]	; (8000ee0 <test_println+0x30>)
 8000eb8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000eba:	6828      	ldr	r0, [r5, #0]
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4798      	blx	r3
  while (*msgp)
 8000ec2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	d1f7      	bne.n	8000eba <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000eca:	6828      	ldr	r0, [r5, #0]
 8000ecc:	4905      	ldr	r1, [pc, #20]	; (8000ee4 <test_println+0x34>)
 8000ece:	6803      	ldr	r3, [r0, #0]
}
 8000ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	4718      	bx	r3
 8000eda:	4d01      	ldr	r5, [pc, #4]	; (8000ee0 <test_println+0x30>)
 8000edc:	e7f5      	b.n	8000eca <test_println+0x1a>
 8000ede:	bf00      	nop
 8000ee0:	20001c00 	.word	0x20001c00
 8000ee4:	0800b7cc 	.word	0x0800b7cc
	...

08000ef0 <test_print>:
  while (*msgp)
 8000ef0:	7801      	ldrb	r1, [r0, #0]
 8000ef2:	b159      	cbz	r1, 8000f0c <test_print+0x1c>
void test_print(const char *msgp) {
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d06      	ldr	r5, [pc, #24]	; (8000f10 <test_print+0x20>)
 8000ef8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000efa:	6828      	ldr	r0, [r5, #0]
 8000efc:	6803      	ldr	r3, [r0, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	4798      	blx	r3
  while (*msgp)
 8000f02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d1f7      	bne.n	8000efa <test_print+0xa>
}
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20001c00 	.word	0x20001c00
	...

08000f20 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000f20:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000f22:	4e0d      	ldr	r6, [pc, #52]	; (8000f58 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000f24:	4f0d      	ldr	r7, [pc, #52]	; (8000f5c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000f26:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8000f28:	463b      	mov	r3, r7
 8000f2a:	e005      	b.n	8000f38 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 8000f2c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f34:	4294      	cmp	r4, r2
 8000f36:	d106      	bne.n	8000f46 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000f38:	429d      	cmp	r5, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <_test_assert_sequence+0xc>
  if (*expected)
 8000f3c:	7800      	ldrb	r0, [r0, #0]
 8000f3e:	b910      	cbnz	r0, 8000f46 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000f40:	6037      	str	r7, [r6, #0]
}
 8000f42:	bcf0      	pop	{r4, r5, r6, r7}
 8000f44:	4770      	bx	lr
  test_local_fail      = true;
 8000f46:	4c06      	ldr	r4, [pc, #24]	; (8000f60 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000f50:	7010      	strb	r0, [r2, #0]
}
 8000f52:	bcf0      	pop	{r4, r5, r6, r7}
  test_failure_message = msg;
 8000f54:	6019      	str	r1, [r3, #0]
}
 8000f56:	4770      	bx	lr
 8000f58:	20001cc0 	.word	0x20001cc0
 8000f5c:	20001cb0 	.word	0x20001cb0
 8000f60:	20001ca8 	.word	0x20001ca8
 8000f64:	20001c08 	.word	0x20001c08
 8000f68:	20001c04 	.word	0x20001c04
 8000f6c:	00000000 	.word	0x00000000

08000f70 <rt_test_009_002_execute>:
  test_set_step(1);
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <rt_test_009_002_execute+0x40>)
static void rt_test_009_002_execute(void) {
 8000f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8000f74:	2601      	movs	r6, #1
 8000f76:	4f0f      	ldr	r7, [pc, #60]	; (8000fb4 <rt_test_009_002_execute+0x44>)
 8000f78:	6016      	str	r6, [r2, #0]
 8000f7a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8000f7c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000f7e:	fa25 f304 	lsr.w	r3, r5, r4
 8000f82:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000f86:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8000f8a:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000f8c:	d00d      	beq.n	8000faa <rt_test_009_002_execute+0x3a>
      handlers[eid](eid);
 8000f8e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8000f92:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8000f96:	3401      	adds	r4, #1
      handlers[eid](eid);
 8000f98:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d1ef      	bne.n	8000f7e <rt_test_009_002_execute+0xe>
}
 8000f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000fa2:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <rt_test_009_002_execute+0x48>)
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <rt_test_009_002_execute+0x4c>)
 8000fa6:	f7ff bfbb 	b.w	8000f20 <_test_assert_sequence>
    eid++;
 8000faa:	3401      	adds	r4, #1
 8000fac:	e7e7      	b.n	8000f7e <rt_test_009_002_execute+0xe>
 8000fae:	bf00      	nop
 8000fb0:	20001cac 	.word	0x20001cac
 8000fb4:	0800c2bc 	.word	0x0800c2bc
 8000fb8:	0800a0d4 	.word	0x0800a0d4
 8000fbc:	0800a0e8 	.word	0x0800a0e8

08000fc0 <print_line>:
static void print_line(void) {
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	4d08      	ldr	r5, [pc, #32]	; (8000fe4 <print_line+0x24>)
 8000fc4:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8000fc6:	6828      	ldr	r0, [r5, #0]
 8000fc8:	6803      	ldr	r3, [r0, #0]
 8000fca:	212d      	movs	r1, #45	; 0x2d
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000fd0:	3c01      	subs	r4, #1
 8000fd2:	d1f8      	bne.n	8000fc6 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000fd4:	6828      	ldr	r0, [r5, #0]
 8000fd6:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <print_line+0x28>)
 8000fd8:	6803      	ldr	r3, [r0, #0]
}
 8000fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4718      	bx	r3
 8000fe4:	20001c00 	.word	0x20001c00
 8000fe8:	0800b7cc 	.word	0x0800b7cc
 8000fec:	00000000 	.word	0x00000000

08000ff0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000ff2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ff4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000ff8:	4249      	negs	r1, r1
 8000ffa:	1a20      	subs	r0, r4, r0
 8000ffc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ffe:	4298      	cmp	r0, r3
 8001000:	d304      	bcc.n	800100c <chCoreAllocAlignedI+0x1c>
 8001002:	4284      	cmp	r4, r0
 8001004:	d302      	bcc.n	800100c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001006:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8001008:	6050      	str	r0, [r2, #4]
 800100a:	4770      	bx	lr
    return NULL;
 800100c:	2000      	movs	r0, #0
 800100e:	bc10      	pop	{r4}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20001350 	.word	0x20001350
	...

08001020 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001020:	b508      	push	{r3, lr}
 8001022:	2220      	movs	r2, #32
 8001024:	4603      	mov	r3, r0
 8001026:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800102a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 800102c:	b128      	cbz	r0, 800103a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 800102e:	6802      	ldr	r2, [r0, #0]
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001038:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	2a00      	cmp	r2, #0
 800103e:	d0f8      	beq.n	8001032 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8001040:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8001044:	4790      	blx	r2
 8001046:	2300      	movs	r3, #0
 8001048:	f383 8811 	msr	BASEPRI, r3
}
 800104c:	bd08      	pop	{r3, pc}
 800104e:	bf00      	nop

08001050 <oslib_test_007_001_execute>:
static void oslib_test_007_001_execute(void) {
 8001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8001054:	4e3b      	ldr	r6, [pc, #236]	; (8001144 <oslib_test_007_001_execute+0xf4>)
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <oslib_test_007_001_execute+0xf8>)
 8001058:	4c3c      	ldr	r4, [pc, #240]	; (800114c <oslib_test_007_001_execute+0xfc>)
 800105a:	2201      	movs	r2, #1
 800105c:	6032      	str	r2, [r6, #0]
 800105e:	2520      	movs	r5, #32
 8001060:	2204      	movs	r2, #4
 8001062:	2000      	movs	r0, #0
 8001064:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001072:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001074:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001076:	440b      	add	r3, r1
  while (n != 0U) {
 8001078:	d1f4      	bne.n	8001064 <oslib_test_007_001_execute+0x14>
  test_set_step(2);
 800107a:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800107c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800114c <oslib_test_007_001_execute+0xfc>
 8001080:	4f33      	ldr	r7, [pc, #204]	; (8001150 <oslib_test_007_001_execute+0x100>)
  test_set_step(2);
 8001082:	6033      	str	r3, [r6, #0]
 8001084:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001086:	4640      	mov	r0, r8
 8001088:	f7ff ffca 	bl	8001020 <chPoolAlloc>
 800108c:	3800      	subs	r0, #0
 800108e:	bf18      	it	ne
 8001090:	2001      	movne	r0, #1
 8001092:	4639      	mov	r1, r7
 8001094:	f7ff fdc4 	bl	8000c20 <_test_assert>
 8001098:	2800      	cmp	r0, #0
 800109a:	d150      	bne.n	800113e <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800109c:	3d01      	subs	r5, #1
 800109e:	d1f2      	bne.n	8001086 <oslib_test_007_001_execute+0x36>
  test_set_step(3);
 80010a0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80010a2:	482a      	ldr	r0, [pc, #168]	; (800114c <oslib_test_007_001_execute+0xfc>)
  test_set_step(3);
 80010a4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80010a6:	f7ff ffbb 	bl	8001020 <chPoolAlloc>
 80010aa:	fab0 f080 	clz	r0, r0
 80010ae:	4929      	ldr	r1, [pc, #164]	; (8001154 <oslib_test_007_001_execute+0x104>)
 80010b0:	0940      	lsrs	r0, r0, #5
 80010b2:	f7ff fdb5 	bl	8000c20 <_test_assert>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d141      	bne.n	800113e <oslib_test_007_001_execute+0xee>
  test_set_step(4);
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <oslib_test_007_001_execute+0xf8>)
 80010bc:	2204      	movs	r2, #4
 80010be:	f103 0710 	add.w	r7, r3, #16
 80010c2:	6032      	str	r2, [r6, #0]
 80010c4:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 80010c6:	461a      	mov	r2, r3
 80010c8:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 80010cc:	6821      	ldr	r1, [r4, #0]
 80010ce:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 80010d2:	6022      	str	r2, [r4, #0]
 80010d4:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80010d8:	42bb      	cmp	r3, r7
 80010da:	d1f4      	bne.n	80010c6 <oslib_test_007_001_execute+0x76>
  test_set_step(5);
 80010dc:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80010de:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800114c <oslib_test_007_001_execute+0xfc>
 80010e2:	4f1b      	ldr	r7, [pc, #108]	; (8001150 <oslib_test_007_001_execute+0x100>)
  test_set_step(5);
 80010e4:	6033      	str	r3, [r6, #0]
 80010e6:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80010e8:	4640      	mov	r0, r8
 80010ea:	f7ff ff99 	bl	8001020 <chPoolAlloc>
 80010ee:	3800      	subs	r0, #0
 80010f0:	bf18      	it	ne
 80010f2:	2001      	movne	r0, #1
 80010f4:	4639      	mov	r1, r7
 80010f6:	f7ff fd93 	bl	8000c20 <_test_assert>
 80010fa:	bb00      	cbnz	r0, 800113e <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80010fc:	3d01      	subs	r5, #1
 80010fe:	d1f3      	bne.n	80010e8 <oslib_test_007_001_execute+0x98>
  test_set_step(6);
 8001100:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <oslib_test_007_001_execute+0xfc>)
  test_set_step(6);
 8001104:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001106:	f7ff ff8b 	bl	8001020 <chPoolAlloc>
 800110a:	fab0 f080 	clz	r0, r0
 800110e:	4911      	ldr	r1, [pc, #68]	; (8001154 <oslib_test_007_001_execute+0x104>)
 8001110:	0940      	lsrs	r0, r0, #5
 8001112:	f7ff fd85 	bl	8000c20 <_test_assert>
 8001116:	b990      	cbnz	r0, 800113e <oslib_test_007_001_execute+0xee>
  test_set_step(7);
 8001118:	2107      	movs	r1, #7
  mp->provider = provider;
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <oslib_test_007_001_execute+0x108>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <oslib_test_007_001_execute+0xfc>)
  test_set_step(7);
 800111e:	6031      	str	r1, [r6, #0]
  mp->object_size = size;
 8001120:	2304      	movs	r3, #4
  mp->align = align;
 8001122:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->next = NULL;
 8001126:	6025      	str	r5, [r4, #0]
  mp->provider = provider;
 8001128:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800112a:	f7ff ff79 	bl	8001020 <chPoolAlloc>
 800112e:	fab0 f080 	clz	r0, r0
}
 8001132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001136:	4909      	ldr	r1, [pc, #36]	; (800115c <oslib_test_007_001_execute+0x10c>)
 8001138:	0940      	lsrs	r0, r0, #5
 800113a:	f7ff bd71 	b.w	8000c20 <_test_assert>
}
 800113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001142:	bf00      	nop
 8001144:	20001cac 	.word	0x20001cac
 8001148:	20001568 	.word	0x20001568
 800114c:	20000874 	.word	0x20000874
 8001150:	0800a0ec 	.word	0x0800a0ec
 8001154:	0800a0f8 	.word	0x0800a0f8
 8001158:	08000851 	.word	0x08000851
 800115c:	0800a108 	.word	0x0800a108

08001160 <chEvtAddEvents>:
 8001160:	2320      	movs	r3, #32
 8001162:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <chEvtAddEvents+0x18>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116c:	4310      	orrs	r0, r2
 800116e:	6358      	str	r0, [r3, #52]	; 0x34
 8001170:	2300      	movs	r3, #0
 8001172:	f383 8811 	msr	BASEPRI, r3
}
 8001176:	4770      	bx	lr
 8001178:	200009b0 	.word	0x200009b0
 800117c:	00000000 	.word	0x00000000

08001180 <chEvtUnregister>:
 8001180:	2320      	movs	r3, #32
 8001182:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8001186:	4603      	mov	r3, r0
 8001188:	e001      	b.n	800118e <chEvtUnregister+0xe>
    if (p->next == elp) {
 800118a:	428b      	cmp	r3, r1
 800118c:	d007      	beq.n	800119e <chEvtUnregister+0x1e>
  while (p->next != (event_listener_t *)esp) {
 800118e:	461a      	mov	r2, r3
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4283      	cmp	r3, r0
 8001194:	d1f9      	bne.n	800118a <chEvtUnregister+0xa>
 8001196:	2300      	movs	r3, #0
 8001198:	f383 8811 	msr	BASEPRI, r3
}
 800119c:	4770      	bx	lr
      p->next = elp->next;
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	f383 8811 	msr	BASEPRI, r3
}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 80011b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  esp->next = (event_listener_t *)esp;
 80011b4:	4c36      	ldr	r4, [pc, #216]	; (8001290 <rt_test_009_001_execute+0xe0>)
  test_set_step(2);
 80011b6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80012a0 <rt_test_009_001_execute+0xf0>
 80011ba:	6024      	str	r4, [r4, #0]
 80011bc:	2202      	movs	r2, #2
static void rt_test_009_001_execute(void) {
 80011be:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(2);
 80011c0:	f8c8 2000 	str.w	r2, [r8]
 80011c4:	2720      	movs	r7, #32
 80011c6:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 80011ca:	4932      	ldr	r1, [pc, #200]	; (8001294 <rt_test_009_001_execute+0xe4>)
  elp->next     = esp->next;
 80011cc:	6820      	ldr	r0, [r4, #0]
  elp->listener = currp;
 80011ce:	698b      	ldr	r3, [r1, #24]
  elp->next     = esp->next;
 80011d0:	9005      	str	r0, [sp, #20]
  esp->next     = elp;
 80011d2:	f10d 0914 	add.w	r9, sp, #20
  elp->events   = events;
 80011d6:	2001      	movs	r0, #1
  elp->flags    = (eventflags_t)0;
 80011d8:	2500      	movs	r5, #0
  elp->listener = currp;
 80011da:	9306      	str	r3, [sp, #24]
  elp->wflags   = wflags;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e0:	e9cd 5308 	strd	r5, r3, [sp, #32]
  elp->events   = events;
 80011e4:	9007      	str	r0, [sp, #28]
  esp->next     = elp;
 80011e6:	f8c4 9000 	str.w	r9, [r4]
 80011ea:	f385 8811 	msr	BASEPRI, r5
 80011ee:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 80011f2:	6988      	ldr	r0, [r1, #24]
  elp->next     = esp->next;
 80011f4:	6821      	ldr	r1, [r4, #0]
 80011f6:	9100      	str	r1, [sp, #0]
  elp->events   = events;
 80011f8:	e9cd 0201 	strd	r0, r2, [sp, #4]
  elp->wflags   = wflags;
 80011fc:	e9cd 5303 	strd	r5, r3, [sp, #12]
  esp->next     = elp;
 8001200:	f8c4 d000 	str.w	sp, [r4]
 8001204:	f385 8811 	msr	BASEPRI, r5
 8001208:	f387 8811 	msr	BASEPRI, r7
  return (bool)(esp != (event_source_t *)esp->next);
 800120c:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800120e:	4922      	ldr	r1, [pc, #136]	; (8001298 <rt_test_009_001_execute+0xe8>)
 8001210:	1b00      	subs	r0, r0, r4
 8001212:	bf18      	it	ne
 8001214:	2001      	movne	r0, #1
 8001216:	f7ff fd03 	bl	8000c20 <_test_assert>
 800121a:	b120      	cbz	r0, 8001226 <rt_test_009_001_execute+0x76>
 800121c:	f385 8811 	msr	BASEPRI, r5
}
 8001220:	b00b      	add	sp, #44	; 0x2c
 8001222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001226:	4606      	mov	r6, r0
 8001228:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800122c:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 800122e:	4649      	mov	r1, r9
 8001230:	4620      	mov	r0, r4
  test_set_step(3);
 8001232:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el1);
 8001236:	f7ff ffa3 	bl	8001180 <chEvtUnregister>
 800123a:	f387 8811 	msr	BASEPRI, r7
 800123e:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001240:	4915      	ldr	r1, [pc, #84]	; (8001298 <rt_test_009_001_execute+0xe8>)
 8001242:	1b00      	subs	r0, r0, r4
 8001244:	bf18      	it	ne
 8001246:	2001      	movne	r0, #1
 8001248:	f7ff fcea 	bl	8000c20 <_test_assert>
 800124c:	4605      	mov	r5, r0
 800124e:	b120      	cbz	r0, 800125a <rt_test_009_001_execute+0xaa>
 8001250:	f386 8811 	msr	BASEPRI, r6
}
 8001254:	b00b      	add	sp, #44	; 0x2c
 8001256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800125a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 800125e:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001260:	4669      	mov	r1, sp
 8001262:	4620      	mov	r0, r4
  test_set_step(4);
 8001264:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el2);
 8001268:	f7ff ff8a 	bl	8001180 <chEvtUnregister>
 800126c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001270:	6820      	ldr	r0, [r4, #0]
 8001272:	490a      	ldr	r1, [pc, #40]	; (800129c <rt_test_009_001_execute+0xec>)
 8001274:	1b00      	subs	r0, r0, r4
 8001276:	fab0 f080 	clz	r0, r0
 800127a:	0940      	lsrs	r0, r0, #5
 800127c:	f7ff fcd0 	bl	8000c20 <_test_assert>
 8001280:	2800      	cmp	r0, #0
 8001282:	d1cb      	bne.n	800121c <rt_test_009_001_execute+0x6c>
 8001284:	f380 8811 	msr	BASEPRI, r0
}
 8001288:	b00b      	add	sp, #44	; 0x2c
 800128a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	20000808 	.word	0x20000808
 8001294:	200009b0 	.word	0x200009b0
 8001298:	0800a124 	.word	0x0800a124
 800129c:	0800a130 	.word	0x0800a130
 80012a0:	20001cac 	.word	0x20001cac
	...

080012b0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <chTMStopMeasurementX+0x40>)
 80012b4:	6852      	ldr	r2, [r2, #4]
 80012b6:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
  tmp->last = (now - tmp->last) - offset;
 80012ba:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80012bc:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 80012be:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 80012c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 80012c4:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80012c6:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 80012c8:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 80012ca:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 80012cc:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80012ce:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 80012d0:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 80012d2:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80012d4:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80012d8:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80012da:	bf88      	it	hi
 80012dc:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80012de:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80012e0:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 80012e4:	bf38      	it	cc
 80012e6:	6003      	strcc	r3, [r0, #0]
}
 80012e8:	bc30      	pop	{r4, r5}
 80012ea:	4770      	bx	lr
 80012ec:	e0001000 	.word	0xe0001000
 80012f0:	200009b0 	.word	0x200009b0
	...

08001300 <chTMStartMeasurementX>:
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <chTMStartMeasurementX+0x8>)
 8001302:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001304:	6083      	str	r3, [r0, #8]
}
 8001306:	4770      	bx	lr
 8001308:	e0001000 	.word	0xe0001000
 800130c:	00000000 	.word	0x00000000

08001310 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001310:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 8001312:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001316:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001318:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 800131c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 800131e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8001322:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001324:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001326:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 800132a:	6805      	ldr	r5, [r0, #0]
 800132c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800132e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8001332:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8001336:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 800133a:	f843 2c38 	str.w	r2, [r3, #-56]
 800133e:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 8001340:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8001344:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8001348:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800134c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8001350:	4d0c      	ldr	r5, [pc, #48]	; (8001384 <chThdCreateSuspendedI+0x74>)
 8001352:	f843 0c3c 	str.w	r0, [r3, #-60]
  tp->epending  = (eventmask_t)0;
 8001356:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800135a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800135e:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8001362:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8001366:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 800136a:	f843 4c34 	str.w	r4, [r3, #-52]
 800136e:	6120      	str	r0, [r4, #16]
 8001370:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8001372:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001376:	f843 1c18 	str.w	r1, [r3, #-24]
}
 800137a:	bcf0      	pop	{r4, r5, r6, r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200009b0 	.word	0x200009b0
 8001384:	080002d1 	.word	0x080002d1
	...

08001390 <wakeup>:
 8001390:	2320      	movs	r3, #32
 8001392:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8001396:	f890 3020 	ldrb.w	r3, [r0, #32]
 800139a:	2b07      	cmp	r3, #7
 800139c:	d80d      	bhi.n	80013ba <wakeup+0x2a>
 800139e:	e8df f003 	tbb	[pc, r3]
 80013a2:	0c27      	.short	0x0c27
 80013a4:	0408230c 	.word	0x0408230c
 80013a8:	080c      	.short	0x080c
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80013aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80013ac:	6893      	ldr	r3, [r2, #8]
 80013ae:	3301      	adds	r3, #1
 80013b0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80013b2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80013b6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80013b8:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80013ba:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80013bc:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80013be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 80013c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80013c6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80013c8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80013cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d2fb      	bcs.n	80013cc <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	2100      	movs	r1, #0
 80013d8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80013dc:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80013de:	6058      	str	r0, [r3, #4]
 80013e0:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80013e4:	bc10      	pop	{r4}
 80013e6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80013e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    break;
 80013ee:	e7e4      	b.n	80013ba <wakeup+0x2a>
 80013f0:	2300      	movs	r3, #0
 80013f2:	f383 8811 	msr	BASEPRI, r3
 80013f6:	4770      	bx	lr
 80013f8:	200009b0 	.word	0x200009b0
 80013fc:	00000000 	.word	0x00000000

08001400 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001400:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8001402:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8001406:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800140a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	428a      	cmp	r2, r1
 8001410:	d2fb      	bcs.n	800140a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001418:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800141a:	6058      	str	r0, [r3, #4]
}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200009b0 	.word	0x200009b0
	...

08001430 <chThdDequeueNextI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001430:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001432:	6800      	ldr	r0, [r0, #0]

  if (queue_notempty(tqp)) {
 8001434:	4283      	cmp	r3, r0
 8001436:	d006      	beq.n	8001446 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001438:	6802      	ldr	r2, [r0, #0]
 800143a:	601a      	str	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800143c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800143e:	6053      	str	r3, [r2, #4]
 8001440:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001442:	f7ff bfdd 	b.w	8001400 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001446:	4770      	bx	lr
	...

08001450 <chMBPostI.constprop.0>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <chMBPostI.constprop.0+0x40>)
 8001452:	7d1a      	ldrb	r2, [r3, #20]
 8001454:	b9ca      	cbnz	r2, 800148a <chMBPostI.constprop.0+0x3a>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001456:	b570      	push	{r4, r5, r6, lr}
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8001458:	e9d3 6100 	ldrd	r6, r1, [r3]
 800145c:	691a      	ldr	r2, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800145e:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001460:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001464:	d00e      	beq.n	8001484 <chMBPostI.constprop.0+0x34>
    *mbp->wrptr++ = msg;
 8001466:	689d      	ldr	r5, [r3, #8]
 8001468:	1d2c      	adds	r4, r5, #4
 800146a:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 800146c:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 800146e:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8001470:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <chMBPostI.constprop.0+0x44>)
      mbp->wrptr = mbp->buffer;
 8001476:	bf98      	it	ls
 8001478:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 800147a:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800147c:	f7ff ffd8 	bl	8001430 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 8001480:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001482:	bd70      	pop	{r4, r5, r6, pc}
  return MSG_TIMEOUT;
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001488:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 800148a:	f06f 0001 	mvn.w	r0, #1
}
 800148e:	4770      	bx	lr
 8001490:	2000084c 	.word	0x2000084c
 8001494:	2000086c 	.word	0x2000086c
	...

080014a0 <chMBPostAheadI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 80014a0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <chMBPostAheadI.constprop.0+0x40>)
 80014a4:	7d1a      	ldrb	r2, [r3, #20]
 80014a6:	b9ba      	cbnz	r2, 80014d8 <chMBPostAheadI.constprop.0+0x38>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80014a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014ac:	6919      	ldr	r1, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80014ae:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80014b0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80014b4:	d00d      	beq.n	80014d2 <chMBPostAheadI.constprop.0+0x32>
    if (--mbp->rdptr < mbp->buffer) {
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	3a04      	subs	r2, #4
 80014ba:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 80014bc:	bf88      	it	hi
 80014be:	1f2a      	subhi	r2, r5, #4
 80014c0:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 80014c2:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 80014c4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <chMBPostAheadI.constprop.0+0x44>)
    mbp->cnt++;
 80014c8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80014ca:	f7ff ffb1 	bl	8001430 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 80014ce:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 80014d8:	f06f 0001 	mvn.w	r0, #1
}
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	2000084c 	.word	0x2000084c
 80014e4:	2000086c 	.word	0x2000086c
	...

080014f0 <chMBFetchI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80014f0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <chMBFetchI.constprop.0+0x40>)
 80014f4:	7d1a      	ldrb	r2, [r3, #20]
 80014f6:	b9ba      	cbnz	r2, 8001528 <chMBFetchI.constprop.0+0x38>
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	b191      	cbz	r1, 8001522 <chMBFetchI.constprop.0+0x32>
    *msgp = *mbp->rdptr++;
 80014fc:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 80014fe:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8001500:	6815      	ldr	r5, [r2, #0]
 8001502:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8001504:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8001506:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8001508:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    *msgp = *mbp->rdptr++;
 800150c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 800150e:	bf28      	it	cs
 8001510:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <chMBFetchI.constprop.0+0x44>)
      mbp->rdptr = mbp->buffer;
 8001514:	bf28      	it	cs
 8001516:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8001518:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800151a:	f7ff ff89 	bl	8001430 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 800151e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001520:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001526:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001528:	f06f 0001 	mvn.w	r0, #1
}
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	2000084c 	.word	0x2000084c
 8001534:	20000864 	.word	0x20000864
	...

08001540 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001544:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8001546:	4284      	cmp	r4, r0
 8001548:	d00a      	beq.n	8001560 <chThdDequeueAllI.constprop.0+0x20>
  tp->u.rdymsg = msg;
 800154a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800154e:	6803      	ldr	r3, [r0, #0]
 8001550:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001552:	605c      	str	r4, [r3, #4]
 8001554:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001556:	f7ff ff53 	bl	8001400 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	42a0      	cmp	r0, r4
 800155e:	d1f6      	bne.n	800154e <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001560:	bd38      	pop	{r3, r4, r5, pc}
 8001562:	bf00      	nop
	...

08001570 <chCondSignalI.constprop.0>:
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <chCondSignalI.constprop.0+0x18>)
 8001572:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001574:	4298      	cmp	r0, r3
 8001576:	d006      	beq.n	8001586 <chCondSignalI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	601a      	str	r2, [r3, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 800157c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800157e:	6053      	str	r3, [r2, #4]
 8001580:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001582:	f7ff bf3d 	b.w	8001400 <chSchReadyI>
  }
}
 8001586:	4770      	bx	lr
 8001588:	20000800 	.word	0x20000800
 800158c:	00000000 	.word	0x00000000

08001590 <chEvtSignalI>:
  tp->epending |= events;
 8001590:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001592:	f890 3020 	ldrb.w	r3, [r0, #32]
  tp->epending |= events;
 8001596:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001598:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 800159a:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800159c:	d009      	beq.n	80015b2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800159e:	2b0b      	cmp	r3, #11
 80015a0:	d000      	beq.n	80015a4 <chEvtSignalI+0x14>
}
 80015a2:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80015a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80015a6:	438b      	bics	r3, r1
 80015a8:	d1fb      	bne.n	80015a2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80015ae:	f7ff bf27 	b.w	8001400 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80015b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80015b4:	4219      	tst	r1, r3
 80015b6:	d1f8      	bne.n	80015aa <chEvtSignalI+0x1a>
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80015c0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 80015c2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 80015c4:	42a0      	cmp	r0, r4
 80015c6:	d00f      	beq.n	80015e8 <chEvtBroadcastFlagsI+0x28>
 80015c8:	4606      	mov	r6, r0
 80015ca:	460d      	mov	r5, r1
    elp->flags |= flags;
 80015cc:	68e3      	ldr	r3, [r4, #12]
 80015ce:	432b      	orrs	r3, r5
 80015d0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80015d2:	b115      	cbz	r5, 80015da <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80015d4:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80015d6:	421d      	tst	r5, r3
 80015d8:	d003      	beq.n	80015e2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 80015da:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80015de:	f7ff ffd7 	bl	8001590 <chEvtSignalI>
    elp = elp->next;
 80015e2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80015e4:	42a6      	cmp	r6, r4
 80015e6:	d1f1      	bne.n	80015cc <chEvtBroadcastFlagsI+0xc>
}
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
 80015ea:	bf00      	nop
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <chMtxUnlockS+0x48>)
void chMtxUnlockS(mutex_t *mp) {
 80015f2:	4601      	mov	r1, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80015f4:	6800      	ldr	r0, [r0, #0]
 80015f6:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 80015f8:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80015fa:	68cb      	ldr	r3, [r1, #12]
 80015fc:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80015fe:	4288      	cmp	r0, r1
 8001600:	d016      	beq.n	8001630 <chMtxUnlockS+0x40>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001602:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001604:	b14b      	cbz	r3, 800161a <chMtxUnlockS+0x2a>
 8001606:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001608:	4293      	cmp	r3, r2
 800160a:	d003      	beq.n	8001614 <chMtxUnlockS+0x24>
 800160c:	6892      	ldr	r2, [r2, #8]
 800160e:	4294      	cmp	r4, r2
 8001610:	bf38      	it	cc
 8001612:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001614:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f5      	bne.n	8001606 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800161a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800161c:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 800161e:	60ac      	str	r4, [r5, #8]
 8001620:	600b      	str	r3, [r1, #0]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001622:	bc30      	pop	{r4, r5}
  tqp->next->queue.prev = (thread_t *)tqp;
 8001624:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8001626:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800162a:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800162c:	f7ff bee8 	b.w	8001400 <chSchReadyI>
      mp->owner = NULL;
 8001630:	2300      	movs	r3, #0
}
 8001632:	bc30      	pop	{r4, r5}
      mp->owner = NULL;
 8001634:	6083      	str	r3, [r0, #8]
}
 8001636:	4770      	bx	lr
 8001638:	200009b0 	.word	0x200009b0
 800163c:	00000000 	.word	0x00000000

08001640 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001640:	6883      	ldr	r3, [r0, #8]
 8001642:	3301      	adds	r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	6083      	str	r3, [r0, #8]
 8001648:	dd00      	ble.n	800164c <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800164a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 800164c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 8001652:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001654:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001656:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001658:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800165a:	f7ff bed1 	b.w	8001400 <chSchReadyI>
 800165e:	bf00      	nop

08001660 <chCacheReleaseObjectI>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @iclass
 */
void chCacheReleaseObjectI(objects_cache_t *ocp,
                           oc_object_t *objp) {
 8001660:	b538      	push	{r3, r4, r5, lr}
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8001662:	6a0b      	ldr	r3, [r1, #32]
 8001664:	2b00      	cmp	r3, #0
                           oc_object_t *objp) {
 8001666:	460c      	mov	r4, r1
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8001668:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800166a:	db2f      	blt.n	80016cc <chCacheReleaseObjectI+0x6c>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800166c:	0719      	lsls	r1, r3, #28
 800166e:	d414      	bmi.n	800169a <chCacheReleaseObjectI+0x3a>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8001670:	069a      	lsls	r2, r3, #26
 8001672:	d423      	bmi.n	80016bc <chCacheReleaseObjectI+0x5c>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 8001674:	69c2      	ldr	r2, [r0, #28]
 8001676:	60a2      	str	r2, [r4, #8]
 8001678:	f100 0114 	add.w	r1, r0, #20
 800167c:	60e1      	str	r1, [r4, #12]
 800167e:	60d4      	str	r4, [r2, #12]
 8001680:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8001682:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 800168c:	3030      	adds	r0, #48	; 0x30
 800168e:	f7ff ffd7 	bl	8001640 <chSemSignalI>
 8001692:	6a23      	ldr	r3, [r4, #32]
 8001694:	3301      	adds	r3, #1
 8001696:	6223      	str	r3, [r4, #32]

  /* Releasing the object, we know there are no threads waiting so
     using the "fast" signal variant.*/
  chSemFastSignalI(&objp->obj_sem);
}
 8001698:	bd38      	pop	{r3, r4, r5, pc}
    HASH_REMOVE(objp);
 800169a:	e9d4 2500 	ldrd	r2, r5, [r4]
    LRU_INSERT_TAIL(ocp, objp);
 800169e:	6a01      	ldr	r1, [r0, #32]
    HASH_REMOVE(objp);
 80016a0:	602a      	str	r2, [r5, #0]
    LRU_INSERT_TAIL(ocp, objp);
 80016a2:	f100 0314 	add.w	r3, r0, #20
    HASH_REMOVE(objp);
 80016a6:	6055      	str	r5, [r2, #4]
    objp->obj_group = 0U;
 80016a8:	2200      	movs	r2, #0
    objp->obj_flags = OC_FLAG_INLRU;
 80016aa:	2501      	movs	r5, #1
    LRU_INSERT_TAIL(ocp, objp);
 80016ac:	e9c4 3102 	strd	r3, r1, [r4, #8]
 80016b0:	608c      	str	r4, [r1, #8]
 80016b2:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 80016b4:	e9c4 2204 	strd	r2, r2, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80016b8:	6265      	str	r5, [r4, #36]	; 0x24
 80016ba:	e7e7      	b.n	800168c <chCacheReleaseObjectI+0x2c>
      LRU_INSERT_TAIL(ocp, objp);
 80016bc:	6a02      	ldr	r2, [r0, #32]
 80016be:	60e2      	str	r2, [r4, #12]
 80016c0:	f100 0114 	add.w	r1, r0, #20
 80016c4:	60a1      	str	r1, [r4, #8]
 80016c6:	6094      	str	r4, [r2, #8]
 80016c8:	6204      	str	r4, [r0, #32]
 80016ca:	e7da      	b.n	8001682 <chCacheReleaseObjectI+0x22>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80016cc:	f003 031a 	and.w	r3, r3, #26
 80016d0:	624b      	str	r3, [r1, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 80016d2:	f101 0018 	add.w	r0, r1, #24
}
 80016d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSemSignalI(&objp->obj_sem);
 80016da:	f7ff bfb1 	b.w	8001640 <chSemSignalI>
 80016de:	bf00      	nop

080016e0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80016e0:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <chVTDoResetI+0x7c>)
 80016e4:	69d1      	ldr	r1, [r2, #28]
void chVTDoResetI(virtual_timer_t *vtp) {
 80016e6:	b083      	sub	sp, #12
  if (ch.vtlist.next != vtp) {
 80016e8:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 80016ea:	9001      	str	r0, [sp, #4]
  if (ch.vtlist.next != vtp) {
 80016ec:	d011      	beq.n	8001712 <chVTDoResetI+0x32>
 80016ee:	4603      	mov	r3, r0
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80016f0:	e9d0 1000 	ldrd	r1, r0, [r0]
 80016f4:	6001      	str	r1, [r0, #0]
    vtp->next->prev = vtp->prev;
 80016f6:	6819      	ldr	r1, [r3, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80016f8:	321c      	adds	r2, #28
    vtp->func = NULL;
 80016fa:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80016fc:	4291      	cmp	r1, r2
    vtp->next->prev = vtp->prev;
 80016fe:	6048      	str	r0, [r1, #4]
    vtp->func = NULL;
 8001700:	60dc      	str	r4, [r3, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001702:	d003      	beq.n	800170c <chVTDoResetI+0x2c>
      vtp->next->delta += vtp->delta;
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	688b      	ldr	r3, [r1, #8]
 8001708:	4413      	add	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800170c:	b003      	add	sp, #12
 800170e:	bc10      	pop	{r4}
 8001710:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8001712:	4610      	mov	r0, r2
 8001714:	680b      	ldr	r3, [r1, #0]
 8001716:	f840 3f1c 	str.w	r3, [r0, #28]!
  vtp->func = NULL;
 800171a:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800171c:	4283      	cmp	r3, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800171e:	6058      	str	r0, [r3, #4]
  vtp->func = NULL;
 8001720:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001722:	d016      	beq.n	8001752 <chVTDoResetI+0x72>
  ch.vtlist.next->delta += vtp->delta;
 8001724:	688c      	ldr	r4, [r1, #8]
 8001726:	6899      	ldr	r1, [r3, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001728:	6a92      	ldr	r2, [r2, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 800172a:	440c      	add	r4, r1
 800172c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001730:	609c      	str	r4, [r3, #8]
 8001732:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001734:	1a99      	subs	r1, r3, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 8001736:	428c      	cmp	r4, r1
 8001738:	d9e8      	bls.n	800170c <chVTDoResetI+0x2c>
  delta = ch.vtlist.next->delta - nowdelta;
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4423      	add	r3, r4
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800173e:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001740:	bf98      	it	ls
 8001742:	1c8c      	addls	r4, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001748:	4422      	add	r2, r4
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800174c:	b003      	add	sp, #12
 800174e:	bc10      	pop	{r4}
 8001750:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0U;
 8001752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001756:	60dc      	str	r4, [r3, #12]
    return;
 8001758:	e7d8      	b.n	800170c <chVTDoResetI+0x2c>
 800175a:	bf00      	nop
 800175c:	200009b0 	.word	0x200009b0

08001760 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001760:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001762:	4d1f      	ldr	r5, [pc, #124]	; (80017e0 <chVTDoSetI+0x80>)
 8001764:	462f      	mov	r7, r5
 8001766:	2902      	cmp	r1, #2
 8001768:	f857 4f1c 	ldr.w	r4, [r7, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 800176c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001770:	bf38      	it	cc
 8001772:	2102      	movcc	r1, #2
 8001774:	42bc      	cmp	r4, r7
  vtp->par = par;
 8001776:	e9c0 2303 	strd	r2, r3, [r0, #12]
 800177a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800177c:	d022      	beq.n	80017c4 <chVTDoSetI+0x64>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800177e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	18c9      	adds	r1, r1, r3
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001784:	d216      	bcs.n	80017b4 <chVTDoSetI+0x54>
    else if (delta < p->delta) {
 8001786:	68a3      	ldr	r3, [r4, #8]
 8001788:	428b      	cmp	r3, r1
 800178a:	d903      	bls.n	8001794 <chVTDoSetI+0x34>
 800178c:	e017      	b.n	80017be <chVTDoSetI+0x5e>
    p = p->next;
 800178e:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8001790:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	428b      	cmp	r3, r1
 8001796:	d3fa      	bcc.n	800178e <chVTDoSetI+0x2e>
  vtp->prev = vtp->next->prev;
 8001798:	6863      	ldr	r3, [r4, #4]
 800179a:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 800179e:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 80017a0:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 80017a2:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 80017a4:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 80017aa:	1a59      	subs	r1, r3, r1
 80017ac:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80017ae:	626a      	str	r2, [r5, #36]	; 0x24
}
 80017b0:	bcf0      	pop	{r4, r5, r6, r7}
 80017b2:	4770      	bx	lr
      delta -= p->delta;
 80017b4:	68a2      	ldr	r2, [r4, #8]
      p = p->next;
 80017b6:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 80017b8:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 80017ba:	68a3      	ldr	r3, [r4, #8]
 80017bc:	e7ea      	b.n	8001794 <chVTDoSetI+0x34>
  return systime + (systime_t)interval;
 80017be:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80017c0:	6372      	str	r2, [r6, #52]	; 0x34
 80017c2:	e7e7      	b.n	8001794 <chVTDoSetI+0x34>
      ch.vtlist.lasttime = now;
 80017c4:	62ab      	str	r3, [r5, #40]	; 0x28
 80017c6:	18cf      	adds	r7, r1, r3
  STM32_ST_TIM->SR     = 0;
 80017c8:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80017ca:	2302      	movs	r3, #2
      ch.vtlist.prev = vtp;
 80017cc:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80017d0:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 80017d4:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80017d6:	6377      	str	r7, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80017d8:	6132      	str	r2, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80017da:	60f3      	str	r3, [r6, #12]
 80017dc:	e7e8      	b.n	80017b0 <chVTDoSetI+0x50>
 80017de:	bf00      	nop
 80017e0:	200009b0 	.word	0x200009b0
	...

080017f0 <chSysGetStatusAndLockX.part.0>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017f0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80017f4:	2320      	movs	r3, #32
 80017f6:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 80017fa:	4770      	bx	lr
 80017fc:	0000      	movs	r0, r0
	...

08001800 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001800:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8001802:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001804:	d512      	bpl.n	800182c <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <chSysIntegrityCheckI+0xb0>)
 8001808:	6819      	ldr	r1, [r3, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800180a:	4299      	cmp	r1, r3
 800180c:	d043      	beq.n	8001896 <chSysIntegrityCheckI+0x96>
    n = (cnt_t)0;
 800180e:	2200      	movs	r2, #0
      tp = tp->queue.next;
 8001810:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001812:	4299      	cmp	r1, r3
      n++;
 8001814:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001818:	d1fa      	bne.n	8001810 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 800181a:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800181c:	428c      	cmp	r4, r1
 800181e:	d037      	beq.n	8001890 <chSysIntegrityCheckI+0x90>
      tp = tp->queue.prev;
 8001820:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001822:	429c      	cmp	r4, r3
      n--;
 8001824:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001828:	d1fa      	bne.n	8001820 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 800182a:	bb8a      	cbnz	r2, 8001890 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800182c:	0783      	lsls	r3, r0, #30
 800182e:	d514      	bpl.n	800185a <chSysIntegrityCheckI+0x5a>
    vtp = ch.vtlist.next;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <chSysIntegrityCheckI+0xb0>)
 8001832:	461c      	mov	r4, r3
 8001834:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001838:	42a1      	cmp	r1, r4
 800183a:	d032      	beq.n	80018a2 <chSysIntegrityCheckI+0xa2>
    n = (cnt_t)0;
 800183c:	2200      	movs	r2, #0
      vtp = vtp->next;
 800183e:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001840:	42a1      	cmp	r1, r4
      n++;
 8001842:	f102 0201 	add.w	r2, r2, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001846:	d1fa      	bne.n	800183e <chSysIntegrityCheckI+0x3e>
    vtp = ch.vtlist.prev;
 8001848:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800184a:	428b      	cmp	r3, r1
 800184c:	d020      	beq.n	8001890 <chSysIntegrityCheckI+0x90>
      vtp = vtp->prev;
 800184e:	685b      	ldr	r3, [r3, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001850:	42a3      	cmp	r3, r4
      n--;
 8001852:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001856:	d1fa      	bne.n	800184e <chSysIntegrityCheckI+0x4e>
    if (n != (cnt_t)0) {
 8001858:	b9d2      	cbnz	r2, 8001890 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800185a:	f010 0004 	ands.w	r0, r0, #4
 800185e:	d015      	beq.n	800188c <chSysIntegrityCheckI+0x8c>
    tp = ch.rlist.newer;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <chSysIntegrityCheckI+0xb0>)
 8001862:	691a      	ldr	r2, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001864:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8001866:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800186a:	d004      	beq.n	8001876 <chSysIntegrityCheckI+0x76>
      tp = tp->newer;
 800186c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800186e:	429a      	cmp	r2, r3
      n++;
 8001870:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8001874:	d1fa      	bne.n	800186c <chSysIntegrityCheckI+0x6c>
    tp = ch.rlist.older;
 8001876:	695a      	ldr	r2, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8001878:	429a      	cmp	r2, r3
 800187a:	d004      	beq.n	8001886 <chSysIntegrityCheckI+0x86>
      tp = tp->older;
 800187c:	6952      	ldr	r2, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800187e:	429a      	cmp	r2, r3
      n--;
 8001880:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist) {
 8001884:	d1fa      	bne.n	800187c <chSysIntegrityCheckI+0x7c>
    if (n != (cnt_t)0) {
 8001886:	3800      	subs	r0, #0
 8001888:	bf18      	it	ne
 800188a:	2001      	movne	r0, #1
}
 800188c:	bc10      	pop	{r4}
 800188e:	4770      	bx	lr
      return true;
 8001890:	2001      	movs	r0, #1
}
 8001892:	bc10      	pop	{r4}
 8001894:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 8001896:	685c      	ldr	r4, [r3, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001898:	429c      	cmp	r4, r3
    n = (cnt_t)0;
 800189a:	bf18      	it	ne
 800189c:	2200      	movne	r2, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 800189e:	d1bf      	bne.n	8001820 <chSysIntegrityCheckI+0x20>
 80018a0:	e7c4      	b.n	800182c <chSysIntegrityCheckI+0x2c>
    vtp = ch.vtlist.prev;
 80018a2:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80018a4:	42a3      	cmp	r3, r4
    n = (cnt_t)0;
 80018a6:	bf18      	it	ne
 80018a8:	2200      	movne	r2, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80018aa:	d1d0      	bne.n	800184e <chSysIntegrityCheckI+0x4e>
 80018ac:	e7d5      	b.n	800185a <chSysIntegrityCheckI+0x5a>
 80018ae:	bf00      	nop
 80018b0:	200009b0 	.word	0x200009b0
	...

080018c0 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 80018c0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80018c2:	4e24      	ldr	r6, [pc, #144]	; (8001954 <rt_test_002_001_execute+0x94>)
 80018c4:	2001      	movs	r0, #1
 80018c6:	6030      	str	r0, [r6, #0]
 80018c8:	2520      	movs	r5, #32
 80018ca:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80018ce:	f7ff ff97 	bl	8001800 <chSysIntegrityCheckI>
 80018d2:	2300      	movs	r3, #0
 80018d4:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 80018d8:	f080 0001 	eor.w	r0, r0, #1
 80018dc:	491e      	ldr	r1, [pc, #120]	; (8001958 <rt_test_002_001_execute+0x98>)
 80018de:	b2c0      	uxtb	r0, r0
 80018e0:	f7ff f99e 	bl	8000c20 <_test_assert>
 80018e4:	b100      	cbz	r0, 80018e8 <rt_test_002_001_execute+0x28>
}
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 80018e8:	4604      	mov	r4, r0
 80018ea:	2002      	movs	r0, #2
 80018ec:	6030      	str	r0, [r6, #0]
 80018ee:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80018f2:	f7ff ff85 	bl	8001800 <chSysIntegrityCheckI>
 80018f6:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "virtual timers list check failed");
 80018fa:	f080 0001 	eor.w	r0, r0, #1
 80018fe:	4917      	ldr	r1, [pc, #92]	; (800195c <rt_test_002_001_execute+0x9c>)
 8001900:	b2c0      	uxtb	r0, r0
 8001902:	f7ff f98d 	bl	8000c20 <_test_assert>
 8001906:	4604      	mov	r4, r0
 8001908:	2800      	cmp	r0, #0
 800190a:	d1ec      	bne.n	80018e6 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 800190c:	2303      	movs	r3, #3
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8001914:	2004      	movs	r0, #4
 8001916:	f7ff ff73 	bl	8001800 <chSysIntegrityCheckI>
 800191a:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "registry list check failed");
 800191e:	f080 0001 	eor.w	r0, r0, #1
 8001922:	490f      	ldr	r1, [pc, #60]	; (8001960 <rt_test_002_001_execute+0xa0>)
 8001924:	b2c0      	uxtb	r0, r0
 8001926:	f7ff f97b 	bl	8000c20 <_test_assert>
 800192a:	4604      	mov	r4, r0
 800192c:	2800      	cmp	r0, #0
 800192e:	d1da      	bne.n	80018e6 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 8001930:	2304      	movs	r3, #4
 8001932:	6033      	str	r3, [r6, #0]
 8001934:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8001938:	2008      	movs	r0, #8
 800193a:	f7ff ff61 	bl	8001800 <chSysIntegrityCheckI>
 800193e:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "port layer check failed");
 8001942:	f080 0001 	eor.w	r0, r0, #1
}
 8001946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 800194a:	4906      	ldr	r1, [pc, #24]	; (8001964 <rt_test_002_001_execute+0xa4>)
 800194c:	b2c0      	uxtb	r0, r0
 800194e:	f7ff b967 	b.w	8000c20 <_test_assert>
 8001952:	bf00      	nop
 8001954:	20001cac 	.word	0x20001cac
 8001958:	0800a140 	.word	0x0800a140
 800195c:	0800a158 	.word	0x0800a158
 8001960:	0800a17c 	.word	0x0800a17c
 8001964:	0800a198 	.word	0x0800a198
	...

08001970 <_idle_thread>:
}
 8001970:	e7fe      	b.n	8001970 <_idle_thread>
 8001972:	bf00      	nop
	...

08001980 <oslib_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 8001980:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001982:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <oslib_test_001_003_execute+0x130>)
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8001984:	4c4b      	ldr	r4, [pc, #300]	; (8001ab4 <oslib_test_001_003_execute+0x134>)
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8001986:	484c      	ldr	r0, [pc, #304]	; (8001ab8 <oslib_test_001_003_execute+0x138>)
  test_set_step(1);
 8001988:	2501      	movs	r5, #1
 800198a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 800198c:	f7ff fab0 	bl	8000ef0 <test_print>
void test_printn(uint32_t n) {
 8001990:	4628      	mov	r0, r5
 8001992:	f7ff f9ad 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fa8a 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 800199c:	4847      	ldr	r0, [pc, #284]	; (8001abc <oslib_test_001_003_execute+0x13c>)
 800199e:	f7ff faa7 	bl	8000ef0 <test_print>
 80019a2:	4628      	mov	r0, r5
 80019a4:	f7ff f9a4 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fa81 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 80019ae:	4844      	ldr	r0, [pc, #272]	; (8001ac0 <oslib_test_001_003_execute+0x140>)
 80019b0:	f7ff fa9e 	bl	8000ef0 <test_print>
 80019b4:	4628      	mov	r0, r5
 80019b6:	f7ff f99b 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff fa78 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 80019c0:	4840      	ldr	r0, [pc, #256]	; (8001ac4 <oslib_test_001_003_execute+0x144>)
 80019c2:	f7ff fa95 	bl	8000ef0 <test_print>
 80019c6:	4628      	mov	r0, r5
 80019c8:	f7ff f992 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff fa6f 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 80019d2:	483d      	ldr	r0, [pc, #244]	; (8001ac8 <oslib_test_001_003_execute+0x148>)
 80019d4:	f7ff fa8c 	bl	8000ef0 <test_print>
 80019d8:	4628      	mov	r0, r5
 80019da:	f7ff f989 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fa66 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 80019e4:	4839      	ldr	r0, [pc, #228]	; (8001acc <oslib_test_001_003_execute+0x14c>)
 80019e6:	f7ff fa83 	bl	8000ef0 <test_print>
 80019ea:	4628      	mov	r0, r5
 80019ec:	f7ff f980 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_PIPES);
    test_println("");
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff fa5d 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 80019f6:	4836      	ldr	r0, [pc, #216]	; (8001ad0 <oslib_test_001_003_execute+0x150>)
 80019f8:	f7ff fa7a 	bl	8000ef0 <test_print>
 80019fc:	4628      	mov	r0, r5
 80019fe:	f7ff f977 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_CACHES);
    test_println("");
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fa54 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 8001a08:	4832      	ldr	r0, [pc, #200]	; (8001ad4 <oslib_test_001_003_execute+0x154>)
 8001a0a:	f7ff fa71 	bl	8000ef0 <test_print>
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f7ff f96e 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DELEGATES);
    test_println("");
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fa4b 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8001a1a:	482f      	ldr	r0, [pc, #188]	; (8001ad8 <oslib_test_001_003_execute+0x158>)
 8001a1c:	f7ff fa68 	bl	8000ef0 <test_print>
 8001a20:	4628      	mov	r0, r5
 8001a22:	f7ff f965 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fa42 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8001a2c:	482b      	ldr	r0, [pc, #172]	; (8001adc <oslib_test_001_003_execute+0x15c>)
 8001a2e:	f7ff fa5f 	bl	8000ef0 <test_print>
 8001a32:	2008      	movs	r0, #8
 8001a34:	f7ff f95c 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7ff fa39 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8001a3e:	4828      	ldr	r0, [pc, #160]	; (8001ae0 <oslib_test_001_003_execute+0x160>)
 8001a40:	f7ff fa56 	bl	8000ef0 <test_print>
 8001a44:	4628      	mov	r0, r5
 8001a46:	f7ff f953 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff fa30 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8001a50:	4824      	ldr	r0, [pc, #144]	; (8001ae4 <oslib_test_001_003_execute+0x164>)
 8001a52:	f7ff fa4d 	bl	8000ef0 <test_print>
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7ff f94a 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff fa27 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8001a62:	4821      	ldr	r0, [pc, #132]	; (8001ae8 <oslib_test_001_003_execute+0x168>)
 8001a64:	f7ff fa44 	bl	8000ef0 <test_print>
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f7ff f941 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fa1e 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <oslib_test_001_003_execute+0x16c>)
 8001a76:	f7ff fa3b 	bl	8000ef0 <test_print>
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	f7ff f938 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8001a80:	4620      	mov	r0, r4
 8001a82:	f7ff fa15 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8001a86:	481a      	ldr	r0, [pc, #104]	; (8001af0 <oslib_test_001_003_execute+0x170>)
 8001a88:	f7ff fa32 	bl	8000ef0 <test_print>
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f7ff f92f 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fa0c 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <oslib_test_001_003_execute+0x174>)
 8001a9a:	f7ff fa29 	bl	8000ef0 <test_print>
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f7ff f926 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
 8001aa4:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001aaa:	f7ff ba01 	b.w	8000eb0 <test_println>
 8001aae:	bf00      	nop
 8001ab0:	20001cac 	.word	0x20001cac
 8001ab4:	0800b820 	.word	0x0800b820
 8001ab8:	0800a1b0 	.word	0x0800a1b0
 8001abc:	0800a1dc 	.word	0x0800a1dc
 8001ac0:	0800a208 	.word	0x0800a208
 8001ac4:	0800a234 	.word	0x0800a234
 8001ac8:	0800a260 	.word	0x0800a260
 8001acc:	0800a28c 	.word	0x0800a28c
 8001ad0:	0800a2b8 	.word	0x0800a2b8
 8001ad4:	0800a2e4 	.word	0x0800a2e4
 8001ad8:	0800a310 	.word	0x0800a310
 8001adc:	0800a33c 	.word	0x0800a33c
 8001ae0:	0800a368 	.word	0x0800a368
 8001ae4:	0800a394 	.word	0x0800a394
 8001ae8:	0800a3c0 	.word	0x0800a3c0
 8001aec:	0800a3ec 	.word	0x0800a3ec
 8001af0:	0800a418 	.word	0x0800a418
 8001af4:	0800a444 	.word	0x0800a444
	...

08001b00 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8001b00:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <oslib_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/LIB");
 8001b04:	4819      	ldr	r0, [pc, #100]	; (8001b6c <oslib_test_001_002_execute+0x6c>)
    test_println("");
 8001b06:	4c1a      	ldr	r4, [pc, #104]	; (8001b70 <oslib_test_001_002_execute+0x70>)
  test_set_step(1);
 8001b08:	2501      	movs	r5, #1
 8001b0a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/LIB");
 8001b0c:	f7ff f9d0 	bl	8000eb0 <test_println>
    test_print("--- Stable Flag:                        ");
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <oslib_test_001_002_execute+0x74>)
 8001b12:	f7ff f9ed 	bl	8000ef0 <test_print>
 8001b16:	4628      	mov	r0, r5
 8001b18:	f7ff f8ea 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff f9c7 	bl	8000eb0 <test_println>
    test_print("--- Version String:                     ");
 8001b22:	4815      	ldr	r0, [pc, #84]	; (8001b78 <oslib_test_001_002_execute+0x78>)
 8001b24:	f7ff f9e4 	bl	8000ef0 <test_print>
    test_println(CH_OSLIB_VERSION);
 8001b28:	4814      	ldr	r0, [pc, #80]	; (8001b7c <oslib_test_001_002_execute+0x7c>)
 8001b2a:	f7ff f9c1 	bl	8000eb0 <test_println>
    test_print("--- Major Number:                       ");
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <oslib_test_001_002_execute+0x80>)
 8001b30:	f7ff f9de 	bl	8000ef0 <test_print>
 8001b34:	4628      	mov	r0, r5
 8001b36:	f7ff f8db 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff f9b8 	bl	8000eb0 <test_println>
    test_print("--- Minor Number:                       ");
 8001b40:	4810      	ldr	r0, [pc, #64]	; (8001b84 <oslib_test_001_002_execute+0x84>)
 8001b42:	f7ff f9d5 	bl	8000ef0 <test_print>
 8001b46:	2002      	movs	r0, #2
 8001b48:	f7ff f8d2 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff f9af 	bl	8000eb0 <test_println>
    test_print("--- Patch Number:                       ");
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <oslib_test_001_002_execute+0x88>)
 8001b54:	f7ff f9cc 	bl	8000ef0 <test_print>
    test_printn(CH_OSLIB_PATCH);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff f8f9 	bl	8000d50 <test_printn>
    test_println("");
 8001b5e:	4620      	mov	r0, r4
}
 8001b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001b64:	f7ff b9a4 	b.w	8000eb0 <test_println>
 8001b68:	20001cac 	.word	0x20001cac
 8001b6c:	0800a470 	.word	0x0800a470
 8001b70:	0800b820 	.word	0x0800b820
 8001b74:	0800a4a4 	.word	0x0800a4a4
 8001b78:	0800a4d0 	.word	0x0800a4d0
 8001b7c:	0800a4fc 	.word	0x0800a4fc
 8001b80:	0800a504 	.word	0x0800a504
 8001b84:	0800a530 	.word	0x0800a530
 8001b88:	0800a55c 	.word	0x0800a55c
 8001b8c:	00000000 	.word	0x00000000

08001b90 <rt_test_011_012_execute>:
 * - [11.12.8] The size of an event listener is printed.
 * - [11.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_011_012_execute(void) {
 8001b90:	b570      	push	{r4, r5, r6, lr}

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8001b92:	4d34      	ldr	r5, [pc, #208]	; (8001c64 <rt_test_011_012_execute+0xd4>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8001b94:	4c34      	ldr	r4, [pc, #208]	; (8001c68 <rt_test_011_012_execute+0xd8>)
    test_print("--- System: ");
 8001b96:	4835      	ldr	r0, [pc, #212]	; (8001c6c <rt_test_011_012_execute+0xdc>)
  test_set_step(1);
 8001b98:	2301      	movs	r3, #1
 8001b9a:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 8001b9c:	f7ff f9a8 	bl	8000ef0 <test_print>
 8001ba0:	f44f 6008 	mov.w	r0, #2176	; 0x880
 8001ba4:	f7ff f8a4 	bl	8000cf0 <test_printn.part.0>
    test_println(" bytes");
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff f981 	bl	8000eb0 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8001bae:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 8001bb0:	482f      	ldr	r0, [pc, #188]	; (8001c70 <rt_test_011_012_execute+0xe0>)
  test_set_step(2);
 8001bb2:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8001bb4:	f7ff f99c 	bl	8000ef0 <test_print>
 8001bb8:	2044      	movs	r0, #68	; 0x44
 8001bba:	f7ff f899 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff f976 	bl	8000eb0 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8001bc4:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8001bc6:	482b      	ldr	r0, [pc, #172]	; (8001c74 <rt_test_011_012_execute+0xe4>)
  test_set_step(3);
 8001bc8:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8001bca:	f7ff f991 	bl	8000ef0 <test_print>
 8001bce:	2014      	movs	r0, #20
 8001bd0:	f7ff f88e 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff f96b 	bl	8000eb0 <test_println>
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8001bda:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 8001bdc:	4826      	ldr	r0, [pc, #152]	; (8001c78 <rt_test_011_012_execute+0xe8>)
  test_set_step(4);
 8001bde:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 8001be0:	f7ff f986 	bl	8000ef0 <test_print>
 8001be4:	200c      	movs	r0, #12
 8001be6:	f7ff f883 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff f960 	bl	8000eb0 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8001bf0:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8001bf2:	4822      	ldr	r0, [pc, #136]	; (8001c7c <rt_test_011_012_execute+0xec>)
  test_set_step(5);
 8001bf4:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8001bf6:	f7ff f97b 	bl	8000ef0 <test_print>
 8001bfa:	2010      	movs	r0, #16
 8001bfc:	f7ff f878 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff f955 	bl	8000eb0 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8001c06:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8001c08:	481d      	ldr	r0, [pc, #116]	; (8001c80 <rt_test_011_012_execute+0xf0>)
  test_set_step(6);
 8001c0a:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 8001c0c:	f7ff f970 	bl	8000ef0 <test_print>
 8001c10:	2008      	movs	r0, #8
 8001c12:	f7ff f86d 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff f94a 	bl	8000eb0 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8001c1c:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8001c1e:	4819      	ldr	r0, [pc, #100]	; (8001c84 <rt_test_011_012_execute+0xf4>)
  test_set_step(7);
 8001c20:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8001c22:	f7ff f965 	bl	8000ef0 <test_print>
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff f862 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff f93f 	bl	8000eb0 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8001c32:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8001c34:	4814      	ldr	r0, [pc, #80]	; (8001c88 <rt_test_011_012_execute+0xf8>)
  test_set_step(8);
 8001c36:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8001c38:	f7ff f95a 	bl	8000ef0 <test_print>
 8001c3c:	2014      	movs	r0, #20
 8001c3e:	f7ff f857 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff f934 	bl	8000eb0 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8001c48:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8001c4a:	4810      	ldr	r0, [pc, #64]	; (8001c8c <rt_test_011_012_execute+0xfc>)
  test_set_step(9);
 8001c4c:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 8001c4e:	f7ff f94f 	bl	8000ef0 <test_print>
 8001c52:	2028      	movs	r0, #40	; 0x28
 8001c54:	f7ff f84c 	bl	8000cf0 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8001c58:	4620      	mov	r0, r4
#endif
  }
  test_end_step(9);
}
 8001c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 8001c5e:	f7ff b927 	b.w	8000eb0 <test_println>
 8001c62:	bf00      	nop
 8001c64:	20001cac 	.word	0x20001cac
 8001c68:	0800a598 	.word	0x0800a598
 8001c6c:	0800a588 	.word	0x0800a588
 8001c70:	0800a5a0 	.word	0x0800a5a0
 8001c74:	0800a5b0 	.word	0x0800a5b0
 8001c78:	0800a5c0 	.word	0x0800a5c0
 8001c7c:	0800a5d0 	.word	0x0800a5d0
 8001c80:	0800a5e0 	.word	0x0800a5e0
 8001c84:	0800a5f0 	.word	0x0800a5f0
 8001c88:	0800a600 	.word	0x0800a600
 8001c8c:	0800a610 	.word	0x0800a610

08001c90 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001c90:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001c92:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <rt_test_001_003_execute+0x250>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001c94:	4c93      	ldr	r4, [pc, #588]	; (8001ee4 <rt_test_001_003_execute+0x254>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001c96:	4894      	ldr	r0, [pc, #592]	; (8001ee8 <rt_test_001_003_execute+0x258>)
  test_set_step(1);
 8001c98:	2501      	movs	r5, #1
 8001c9a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001c9c:	f7ff f928 	bl	8000ef0 <test_print>
 8001ca0:	2020      	movs	r0, #32
 8001ca2:	f7ff f825 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff f902 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8001cac:	488f      	ldr	r0, [pc, #572]	; (8001eec <rt_test_001_003_execute+0x25c>)
 8001cae:	f7ff f91f 	bl	8000ef0 <test_print>
 8001cb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8001cb6:	f7ff f81b 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff f8f8 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8001cc0:	488b      	ldr	r0, [pc, #556]	; (8001ef0 <rt_test_001_003_execute+0x260>)
 8001cc2:	f7ff f915 	bl	8000ef0 <test_print>
 8001cc6:	2020      	movs	r0, #32
 8001cc8:	f7ff f812 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff f8ef 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8001cd2:	4888      	ldr	r0, [pc, #544]	; (8001ef4 <rt_test_001_003_execute+0x264>)
 8001cd4:	f7ff f90c 	bl	8000ef0 <test_print>
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f7ff f809 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff f8e6 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8001ce4:	4884      	ldr	r0, [pc, #528]	; (8001ef8 <rt_test_001_003_execute+0x268>)
 8001ce6:	f7ff f903 	bl	8000ef0 <test_print>
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7ff f800 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff f8dd 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8001cf6:	4881      	ldr	r0, [pc, #516]	; (8001efc <rt_test_001_003_execute+0x26c>)
 8001cf8:	f7ff f8fa 	bl	8000ef0 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff f827 	bl	8000d50 <test_printn>
    test_println("");
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff f8d4 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8001d08:	487d      	ldr	r0, [pc, #500]	; (8001f00 <rt_test_001_003_execute+0x270>)
 8001d0a:	f7ff f8f1 	bl	8000ef0 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff f81e 	bl	8000d50 <test_printn>
    test_println("");
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff f8cb 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8001d1a:	487a      	ldr	r0, [pc, #488]	; (8001f04 <rt_test_001_003_execute+0x274>)
 8001d1c:	f7ff f8e8 	bl	8000ef0 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff f815 	bl	8000d50 <test_printn>
    test_println("");
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff f8c2 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8001d2c:	4876      	ldr	r0, [pc, #472]	; (8001f08 <rt_test_001_003_execute+0x278>)
 8001d2e:	f7ff f8df 	bl	8000ef0 <test_print>
 8001d32:	4628      	mov	r0, r5
 8001d34:	f7fe ffdc 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff f8b9 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8001d3e:	4873      	ldr	r0, [pc, #460]	; (8001f0c <rt_test_001_003_execute+0x27c>)
 8001d40:	f7ff f8d6 	bl	8000ef0 <test_print>
 8001d44:	4628      	mov	r0, r5
 8001d46:	f7fe ffd3 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff f8b0 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001d50:	486f      	ldr	r0, [pc, #444]	; (8001f10 <rt_test_001_003_execute+0x280>)
 8001d52:	f7ff f8cd 	bl	8000ef0 <test_print>
 8001d56:	4628      	mov	r0, r5
 8001d58:	f7fe ffca 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff f8a7 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001d62:	486c      	ldr	r0, [pc, #432]	; (8001f14 <rt_test_001_003_execute+0x284>)
 8001d64:	f7ff f8c4 	bl	8000ef0 <test_print>
 8001d68:	4628      	mov	r0, r5
 8001d6a:	f7fe ffc1 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff f89e 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001d74:	4868      	ldr	r0, [pc, #416]	; (8001f18 <rt_test_001_003_execute+0x288>)
 8001d76:	f7ff f8bb 	bl	8000ef0 <test_print>
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f7fe ffb8 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff f895 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8001d86:	4865      	ldr	r0, [pc, #404]	; (8001f1c <rt_test_001_003_execute+0x28c>)
 8001d88:	f7ff f8b2 	bl	8000ef0 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7fe ffdf 	bl	8000d50 <test_printn>
    test_println("");
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff f88c 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001d98:	4861      	ldr	r0, [pc, #388]	; (8001f20 <rt_test_001_003_execute+0x290>)
 8001d9a:	f7ff f8a9 	bl	8000ef0 <test_print>
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f7fe ffa6 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff f883 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8001daa:	485e      	ldr	r0, [pc, #376]	; (8001f24 <rt_test_001_003_execute+0x294>)
 8001dac:	f7ff f8a0 	bl	8000ef0 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7fe ffcd 	bl	8000d50 <test_printn>
    test_println("");   
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff f87a 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8001dbc:	485a      	ldr	r0, [pc, #360]	; (8001f28 <rt_test_001_003_execute+0x298>)
 8001dbe:	f7ff f897 	bl	8000ef0 <test_print>
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f7fe ff94 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff f871 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8001dce:	4857      	ldr	r0, [pc, #348]	; (8001f2c <rt_test_001_003_execute+0x29c>)
 8001dd0:	f7ff f88e 	bl	8000ef0 <test_print>
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f7fe ff8b 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff f868 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8001de0:	4853      	ldr	r0, [pc, #332]	; (8001f30 <rt_test_001_003_execute+0x2a0>)
 8001de2:	f7ff f885 	bl	8000ef0 <test_print>
 8001de6:	4628      	mov	r0, r5
 8001de8:	f7fe ff82 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff f85f 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8001df2:	4850      	ldr	r0, [pc, #320]	; (8001f34 <rt_test_001_003_execute+0x2a4>)
 8001df4:	f7ff f87c 	bl	8000ef0 <test_print>
 8001df8:	4628      	mov	r0, r5
 8001dfa:	f7fe ff79 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff f856 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8001e04:	484c      	ldr	r0, [pc, #304]	; (8001f38 <rt_test_001_003_execute+0x2a8>)
 8001e06:	f7ff f873 	bl	8000ef0 <test_print>
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7fe ff70 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff f84d 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8001e16:	4849      	ldr	r0, [pc, #292]	; (8001f3c <rt_test_001_003_execute+0x2ac>)
 8001e18:	f7ff f86a 	bl	8000ef0 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7fe ff97 	bl	8000d50 <test_printn>
    test_println("");
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7ff f844 	bl	8000eb0 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001e28:	4845      	ldr	r0, [pc, #276]	; (8001f40 <rt_test_001_003_execute+0x2b0>)
 8001e2a:	f7ff f861 	bl	8000ef0 <test_print>
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f7fe ff5e 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff f83b 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001e3a:	4842      	ldr	r0, [pc, #264]	; (8001f44 <rt_test_001_003_execute+0x2b4>)
 8001e3c:	f7ff f858 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7fe ff85 	bl	8000d50 <test_printn>
    test_println("");
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff f832 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001e4c:	483e      	ldr	r0, [pc, #248]	; (8001f48 <rt_test_001_003_execute+0x2b8>)
 8001e4e:	f7ff f84f 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7fe ff7c 	bl	8000d50 <test_printn>
    test_println("");
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff f829 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001e5e:	483b      	ldr	r0, [pc, #236]	; (8001f4c <rt_test_001_003_execute+0x2bc>)
 8001e60:	f7ff f846 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7fe ff73 	bl	8000d50 <test_printn>
    test_println("");
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff f820 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001e70:	4837      	ldr	r0, [pc, #220]	; (8001f50 <rt_test_001_003_execute+0x2c0>)
 8001e72:	f7ff f83d 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7fe ff6a 	bl	8000d50 <test_printn>
    test_println("");
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff f817 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8001e82:	4834      	ldr	r0, [pc, #208]	; (8001f54 <rt_test_001_003_execute+0x2c4>)
 8001e84:	f7ff f834 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_TRACE_MASK);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7fe ff61 	bl	8000d50 <test_printn>
    test_println("");
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff f80e 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8001e94:	4830      	ldr	r0, [pc, #192]	; (8001f58 <rt_test_001_003_execute+0x2c8>)
 8001e96:	f7ff f82b 	bl	8000ef0 <test_print>
 8001e9a:	2080      	movs	r0, #128	; 0x80
 8001e9c:	f7fe ff28 	bl	8000cf0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff f805 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8001ea6:	482d      	ldr	r0, [pc, #180]	; (8001f5c <rt_test_001_003_execute+0x2cc>)
 8001ea8:	f7ff f822 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7fe ff4f 	bl	8000d50 <test_printn>
    test_println("");
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7fe fffc 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001eb8:	4829      	ldr	r0, [pc, #164]	; (8001f60 <rt_test_001_003_execute+0x2d0>)
 8001eba:	f7ff f819 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe ff46 	bl	8000d50 <test_printn>
    test_println("");
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7fe fff3 	bl	8000eb0 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8001eca:	4826      	ldr	r0, [pc, #152]	; (8001f64 <rt_test_001_003_execute+0x2d4>)
 8001ecc:	f7ff f810 	bl	8000ef0 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7fe ff3d 	bl	8000d50 <test_printn>
    test_println("");
 8001ed6:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001edc:	f7fe bfe8 	b.w	8000eb0 <test_println>
 8001ee0:	20001cac 	.word	0x20001cac
 8001ee4:	0800b820 	.word	0x0800b820
 8001ee8:	0800a620 	.word	0x0800a620
 8001eec:	0800a64c 	.word	0x0800a64c
 8001ef0:	0800a678 	.word	0x0800a678
 8001ef4:	0800a6a4 	.word	0x0800a6a4
 8001ef8:	0800a6d0 	.word	0x0800a6d0
 8001efc:	0800a6fc 	.word	0x0800a6fc
 8001f00:	0800a728 	.word	0x0800a728
 8001f04:	0800a754 	.word	0x0800a754
 8001f08:	0800a780 	.word	0x0800a780
 8001f0c:	0800a7ac 	.word	0x0800a7ac
 8001f10:	0800a7d8 	.word	0x0800a7d8
 8001f14:	0800a804 	.word	0x0800a804
 8001f18:	0800a830 	.word	0x0800a830
 8001f1c:	0800a85c 	.word	0x0800a85c
 8001f20:	0800a888 	.word	0x0800a888
 8001f24:	0800a8b4 	.word	0x0800a8b4
 8001f28:	0800a8e0 	.word	0x0800a8e0
 8001f2c:	0800a90c 	.word	0x0800a90c
 8001f30:	0800a938 	.word	0x0800a938
 8001f34:	0800a964 	.word	0x0800a964
 8001f38:	0800a990 	.word	0x0800a990
 8001f3c:	0800a9bc 	.word	0x0800a9bc
 8001f40:	0800a9e8 	.word	0x0800a9e8
 8001f44:	0800aa14 	.word	0x0800aa14
 8001f48:	0800aa40 	.word	0x0800aa40
 8001f4c:	0800aa6c 	.word	0x0800aa6c
 8001f50:	0800aa98 	.word	0x0800aa98
 8001f54:	0800aac4 	.word	0x0800aac4
 8001f58:	0800aaf0 	.word	0x0800aaf0
 8001f5c:	0800ab1c 	.word	0x0800ab1c
 8001f60:	0800ab48 	.word	0x0800ab48
 8001f64:	0800ab74 	.word	0x0800ab74
	...

08001f70 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8001f70:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8001f74:	4819      	ldr	r0, [pc, #100]	; (8001fdc <rt_test_001_002_execute+0x6c>)
    test_println("");
 8001f76:	4c1a      	ldr	r4, [pc, #104]	; (8001fe0 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 8001f78:	2501      	movs	r5, #1
 8001f7a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8001f7c:	f7fe ff98 	bl	8000eb0 <test_println>
    test_print("--- Stable Flag:                        ");
 8001f80:	4818      	ldr	r0, [pc, #96]	; (8001fe4 <rt_test_001_002_execute+0x74>)
 8001f82:	f7fe ffb5 	bl	8000ef0 <test_print>
 8001f86:	4628      	mov	r0, r5
 8001f88:	f7fe feb2 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7fe ff8f 	bl	8000eb0 <test_println>
    test_print("--- Version String:                     ");
 8001f92:	4815      	ldr	r0, [pc, #84]	; (8001fe8 <rt_test_001_002_execute+0x78>)
 8001f94:	f7fe ffac 	bl	8000ef0 <test_print>
    test_println(CH_KERNEL_VERSION);
 8001f98:	4814      	ldr	r0, [pc, #80]	; (8001fec <rt_test_001_002_execute+0x7c>)
 8001f9a:	f7fe ff89 	bl	8000eb0 <test_println>
    test_print("--- Major Number:                       ");
 8001f9e:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <rt_test_001_002_execute+0x80>)
 8001fa0:	f7fe ffa6 	bl	8000ef0 <test_print>
 8001fa4:	2006      	movs	r0, #6
 8001fa6:	f7fe fea3 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7fe ff80 	bl	8000eb0 <test_println>
    test_print("--- Minor Number:                       ");
 8001fb0:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <rt_test_001_002_execute+0x84>)
 8001fb2:	f7fe ff9d 	bl	8000ef0 <test_print>
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f7fe fe9a 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7fe ff77 	bl	8000eb0 <test_println>
    test_print("--- Patch Number:                       ");
 8001fc2:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <rt_test_001_002_execute+0x88>)
 8001fc4:	f7fe ff94 	bl	8000ef0 <test_print>
 8001fc8:	4628      	mov	r0, r5
 8001fca:	f7fe fe91 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8001fce:	4620      	mov	r0, r4
}
 8001fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001fd4:	f7fe bf6c 	b.w	8000eb0 <test_println>
 8001fd8:	20001cac 	.word	0x20001cac
 8001fdc:	0800aba0 	.word	0x0800aba0
 8001fe0:	0800b820 	.word	0x0800b820
 8001fe4:	0800a4a4 	.word	0x0800a4a4
 8001fe8:	0800a4d0 	.word	0x0800a4d0
 8001fec:	0800abd4 	.word	0x0800abd4
 8001ff0:	0800a504 	.word	0x0800a504
 8001ff4:	0800a530 	.word	0x0800a530
 8001ff8:	0800a55c 	.word	0x0800a55c
 8001ffc:	00000000 	.word	0x00000000

08002000 <rt_test_001_001_execute>:
  test_set_step(1);
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 8002002:	481d      	ldr	r0, [pc, #116]	; (8002078 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 8002004:	b510      	push	{r4, lr}
  test_set_step(1);
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 800200a:	f7fe ff71 	bl	8000ef0 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 800200e:	481b      	ldr	r0, [pc, #108]	; (800207c <rt_test_001_001_execute+0x7c>)
    test_println("");
 8002010:	4c1b      	ldr	r4, [pc, #108]	; (8002080 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8002012:	f7fe ff4d 	bl	8000eb0 <test_println>
    test_print("--- Core Variant:                       ");
 8002016:	481b      	ldr	r0, [pc, #108]	; (8002084 <rt_test_001_001_execute+0x84>)
 8002018:	f7fe ff6a 	bl	8000ef0 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 800201c:	481a      	ldr	r0, [pc, #104]	; (8002088 <rt_test_001_001_execute+0x88>)
 800201e:	f7fe ff47 	bl	8000eb0 <test_println>
    test_print("--- Compiler:                           ");
 8002022:	481a      	ldr	r0, [pc, #104]	; (800208c <rt_test_001_001_execute+0x8c>)
 8002024:	f7fe ff64 	bl	8000ef0 <test_print>
    test_println(PORT_COMPILER_NAME);
 8002028:	4819      	ldr	r0, [pc, #100]	; (8002090 <rt_test_001_001_execute+0x90>)
 800202a:	f7fe ff41 	bl	8000eb0 <test_println>
    test_print("--- Port Info:                          ");
 800202e:	4819      	ldr	r0, [pc, #100]	; (8002094 <rt_test_001_001_execute+0x94>)
 8002030:	f7fe ff5e 	bl	8000ef0 <test_print>
    test_println(PORT_INFO);
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <rt_test_001_001_execute+0x98>)
 8002036:	f7fe ff3b 	bl	8000eb0 <test_println>
    test_print("--- Natural alignment:                  ");
 800203a:	4818      	ldr	r0, [pc, #96]	; (800209c <rt_test_001_001_execute+0x9c>)
 800203c:	f7fe ff58 	bl	8000ef0 <test_print>
 8002040:	2004      	movs	r0, #4
 8002042:	f7fe fe55 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8002046:	4620      	mov	r0, r4
 8002048:	f7fe ff32 	bl	8000eb0 <test_println>
    test_print("--- Stack alignment:                    ");
 800204c:	4814      	ldr	r0, [pc, #80]	; (80020a0 <rt_test_001_001_execute+0xa0>)
 800204e:	f7fe ff4f 	bl	8000ef0 <test_print>
 8002052:	2008      	movs	r0, #8
 8002054:	f7fe fe4c 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 8002058:	4620      	mov	r0, r4
 800205a:	f7fe ff29 	bl	8000eb0 <test_println>
    test_print("--- Working area alignment:             ");
 800205e:	4811      	ldr	r0, [pc, #68]	; (80020a4 <rt_test_001_001_execute+0xa4>)
 8002060:	f7fe ff46 	bl	8000ef0 <test_print>
 8002064:	2008      	movs	r0, #8
 8002066:	f7fe fe43 	bl	8000cf0 <test_printn.part.0>
    test_println("");
 800206a:	4620      	mov	r0, r4
}
 800206c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002070:	f7fe bf1e 	b.w	8000eb0 <test_println>
 8002074:	20001cac 	.word	0x20001cac
 8002078:	0800abdc 	.word	0x0800abdc
 800207c:	0800ac08 	.word	0x0800ac08
 8002080:	0800b820 	.word	0x0800b820
 8002084:	0800ac14 	.word	0x0800ac14
 8002088:	0800ac40 	.word	0x0800ac40
 800208c:	0800ac4c 	.word	0x0800ac4c
 8002090:	0800ac78 	.word	0x0800ac78
 8002094:	0800acb8 	.word	0x0800acb8
 8002098:	0800ace4 	.word	0x0800ace4
 800209c:	0800acfc 	.word	0x0800acfc
 80020a0:	0800ad28 	.word	0x0800ad28
 80020a4:	0800ad54 	.word	0x0800ad54
	...

080020b0 <oslib_test_001_001_execute>:
 80020b0:	f7ff bfa6 	b.w	8002000 <rt_test_001_001_execute>
	...

080020c0 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 80020c4:	b1b8      	cbz	r0, 80020f6 <parse_arguments+0x36>
 80020c6:	4604      	mov	r4, r0
    *saveptr = str;
 80020c8:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 80020ca:	4912      	ldr	r1, [pc, #72]	; (8002114 <parse_arguments+0x54>)
 80020cc:	4620      	mov	r0, r4
 80020ce:	f007 ffdf 	bl	800a090 <strspn>

  if (*p == '"') {
 80020d2:	5c21      	ldrb	r1, [r4, r0]
 80020d4:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 80020d6:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 80020da:	d012      	beq.n	8002102 <parse_arguments+0x42>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 80020dc:	490d      	ldr	r1, [pc, #52]	; (8002114 <parse_arguments+0x54>)
 80020de:	4630      	mov	r0, r6
 80020e0:	f007 ffba 	bl	800a058 <strpbrk>
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 80020e4:	b198      	cbz	r0, 800210e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 80020e6:	1c42      	adds	r2, r0, #1
 80020e8:	2300      	movs	r3, #0
 80020ea:	602a      	str	r2, [r5, #0]
 80020ec:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 80020ee:	7833      	ldrb	r3, [r6, #0]
 80020f0:	b123      	cbz	r3, 80020fc <parse_arguments+0x3c>
}
 80020f2:	4630      	mov	r0, r6
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 80020f6:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d1e6      	bne.n	80020ca <parse_arguments+0xa>
    return NULL;
 80020fc:	2600      	movs	r6, #0
}
 80020fe:	4630      	mov	r0, r6
 8002100:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8002102:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8002104:	4630      	mov	r0, r6
 8002106:	f007 fecd 	bl	8009ea4 <strchr>
  if (*saveptr != NULL) {
 800210a:	2800      	cmp	r0, #0
 800210c:	d1eb      	bne.n	80020e6 <parse_arguments+0x26>
 800210e:	6028      	str	r0, [r5, #0]
 8002110:	e7ed      	b.n	80020ee <parse_arguments+0x2e>
 8002112:	bf00      	nop
 8002114:	0800ad80 	.word	0x0800ad80
	...

08002120 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002120:	b40e      	push	{r1, r2, r3}
 8002122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	ab0f      	add	r3, sp, #60	; 0x3c
 800212a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800212e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8002130:	4625      	mov	r5, r4
 8002132:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002136:	2900      	cmp	r1, #0
 8002138:	f000 823b 	beq.w	80025b2 <chprintf+0x492>
 800213c:	4607      	mov	r7, r0
 800213e:	4699      	mov	r9, r3
  int n = 0;
 8002140:	f04f 0800 	mov.w	r8, #0
 8002144:	e00c      	b.n	8002160 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4638      	mov	r0, r7
 800214a:	68db      	ldr	r3, [r3, #12]
      n++;
 800214c:	f108 0801 	add.w	r8, r8, #1
 8002150:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 8002152:	4798      	blx	r3
    c = *fmt++;
 8002154:	4625      	mov	r5, r4
 8002156:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 800215a:	2900      	cmp	r1, #0
 800215c:	f000 80be 	beq.w	80022dc <chprintf+0x1bc>
    if (c != '%') {
 8002160:	2925      	cmp	r1, #37	; 0x25
 8002162:	d1f0      	bne.n	8002146 <chprintf+0x26>
    if (*fmt == '-') {
 8002164:	7863      	ldrb	r3, [r4, #1]
 8002166:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8002168:	bf04      	itt	eq
 800216a:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 800216c:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 800216e:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 8002170:	bf18      	it	ne
 8002172:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8002174:	2b2b      	cmp	r3, #43	; 0x2b
 8002176:	bf03      	ittte	eq
 8002178:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 800217a:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 800217e:	4475      	addeq	r5, lr
    do_sign = false;
 8002180:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8002184:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8002186:	bf05      	ittet	eq
 8002188:	461e      	moveq	r6, r3
      fmt++;
 800218a:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 800218c:	2620      	movne	r6, #32
      fmt++;
 800218e:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 8002190:	2b2a      	cmp	r3, #42	; 0x2a
 8002192:	f040 80ac 	bne.w	80022ee <chprintf+0x1ce>
      width = va_arg(ap, int);
 8002196:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 800219a:	786b      	ldrb	r3, [r5, #1]
 800219c:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 800219e:	2b2e      	cmp	r3, #46	; 0x2e
 80021a0:	f000 8130 	beq.w	8002404 <chprintf+0x2e4>
    precision = 0;
 80021a4:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 80021a6:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 80021aa:	2d4c      	cmp	r5, #76	; 0x4c
 80021ac:	f000 80b2 	beq.w	8002314 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 80021b0:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 80021b4:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 80021b8:	f200 8198 	bhi.w	80024ec <chprintf+0x3cc>
 80021bc:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80021c0:	0196015e 	.word	0x0196015e
 80021c4:	01960196 	.word	0x01960196
 80021c8:	015e0196 	.word	0x015e0196
 80021cc:	01960196 	.word	0x01960196
 80021d0:	01960196 	.word	0x01960196
 80021d4:	019a0196 	.word	0x019a0196
 80021d8:	01960035 	.word	0x01960035
 80021dc:	01960196 	.word	0x01960196
 80021e0:	00940196 	.word	0x00940196
 80021e4:	01960196 	.word	0x01960196
 80021e8:	01960035 	.word	0x01960035
 80021ec:	01960196 	.word	0x01960196
 80021f0:	01960196 	.word	0x01960196
 80021f4:	01960196 	.word	0x01960196
 80021f8:	01960196 	.word	0x01960196
 80021fc:	014d0196 	.word	0x014d0196
 8002200:	0196015e 	.word	0x0196015e
 8002204:	01960196 	.word	0x01960196
 8002208:	015e0196 	.word	0x015e0196
 800220c:	01960196 	.word	0x01960196
 8002210:	01960196 	.word	0x01960196
 8002214:	019a0196 	.word	0x019a0196
 8002218:	01960035 	.word	0x01960035
 800221c:	012d0196 	.word	0x012d0196
 8002220:	00940196 	.word	0x00940196
 8002224:	01960196 	.word	0x01960196
 8002228:	0035      	.short	0x0035
      if (c == 0) {
 800222a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 800222e:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 8002232:	f10d 0317 	add.w	r3, sp, #23
 8002236:	e000      	b.n	800223a <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 8002238:	4663      	mov	r3, ip
    i = (int)(l % radix);
 800223a:	46aa      	mov	sl, r5
 800223c:	fbb5 f5fe 	udiv	r5, r5, lr
 8002240:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 8002244:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8002248:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 800224a:	bfc8      	it	gt
 800224c:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 8002250:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8002252:	45f2      	cmp	sl, lr
    *--q = i;
 8002254:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8002258:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 800225c:	d2ec      	bcs.n	8002238 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 800225e:	f10d 0a0c 	add.w	sl, sp, #12
 8002262:	f10d 0517 	add.w	r5, sp, #23
 8002266:	eba5 050c 	sub.w	r5, r5, ip
 800226a:	46d6      	mov	lr, sl
 800226c:	f10d 0c17 	add.w	ip, sp, #23
 8002270:	e001      	b.n	8002276 <chprintf+0x156>
 8002272:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8002276:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 800227a:	4563      	cmp	r3, ip
 800227c:	d1f9      	bne.n	8002272 <chprintf+0x152>
 800227e:	1b49      	subs	r1, r1, r5
 8002280:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8002282:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002286:	b920      	cbnz	r0, 8002292 <chprintf+0x172>
    if (width < 0) {
 8002288:	2900      	cmp	r1, #0
      width = -width;
 800228a:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 800228e:	f300 8145 	bgt.w	800251c <chprintf+0x3fc>
    while (--i >= 0) {
 8002292:	2d00      	cmp	r5, #0
 8002294:	db0f      	blt.n	80022b6 <chprintf+0x196>
 8002296:	1c6b      	adds	r3, r5, #1
 8002298:	4453      	add	r3, sl
 800229a:	9401      	str	r4, [sp, #4]
 800229c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	4638      	mov	r0, r7
 80022a8:	4790      	blx	r2
    while (--i >= 0) {
 80022aa:	45a2      	cmp	sl, r4
 80022ac:	d1f7      	bne.n	800229e <chprintf+0x17e>
 80022ae:	f108 0801 	add.w	r8, r8, #1
 80022b2:	9c01      	ldr	r4, [sp, #4]
 80022b4:	44a8      	add	r8, r5
    while (width) {
 80022b6:	f1bb 0f00 	cmp.w	fp, #0
 80022ba:	f43f af4b 	beq.w	8002154 <chprintf+0x34>
 80022be:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4631      	mov	r1, r6
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4638      	mov	r0, r7
 80022c8:	4798      	blx	r3
    while (width) {
 80022ca:	3d01      	subs	r5, #1
 80022cc:	d1f8      	bne.n	80022c0 <chprintf+0x1a0>
    c = *fmt++;
 80022ce:	4625      	mov	r5, r4
 80022d0:	44d8      	add	r8, fp
 80022d2:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80022d6:	2900      	cmp	r1, #0
 80022d8:	f47f af42 	bne.w	8002160 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80022dc:	4640      	mov	r0, r8
 80022de:	b006      	add	sp, #24
 80022e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e4:	b003      	add	sp, #12
 80022e6:	4770      	bx	lr
      if (c == 0) {
 80022e8:	f04f 0e0a 	mov.w	lr, #10
 80022ec:	e79f      	b.n	800222e <chprintf+0x10e>
        c = *fmt++;
 80022ee:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f3      	beq.n	80022dc <chprintf+0x1bc>
      width = 0;
 80022f4:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 80022f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 80022fe:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8002302:	f63f af4c 	bhi.w	800219e <chprintf+0x7e>
        c = *fmt++;
 8002306:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800230a:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f1      	bne.n	80022f6 <chprintf+0x1d6>
 8002312:	e7e3      	b.n	80022dc <chprintf+0x1bc>
      c = *fmt++;
 8002314:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0df      	beq.n	80022dc <chprintf+0x1bc>
    switch (c) {
 800231c:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8002320:	2d34      	cmp	r5, #52	; 0x34
 8002322:	f200 80e3 	bhi.w	80024ec <chprintf+0x3cc>
 8002326:	f20f 0c08 	addw	ip, pc, #8
 800232a:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 800232e:	bf00      	nop
 8002330:	0800247d 	.word	0x0800247d
 8002334:	080024ed 	.word	0x080024ed
 8002338:	080024ed 	.word	0x080024ed
 800233c:	080024ed 	.word	0x080024ed
 8002340:	080024ed 	.word	0x080024ed
 8002344:	0800247d 	.word	0x0800247d
 8002348:	080024ed 	.word	0x080024ed
 800234c:	080024ed 	.word	0x080024ed
 8002350:	080024ed 	.word	0x080024ed
 8002354:	080024ed 	.word	0x080024ed
 8002358:	080024ed 	.word	0x080024ed
 800235c:	080024f5 	.word	0x080024f5
 8002360:	0800222b 	.word	0x0800222b
 8002364:	080024ed 	.word	0x080024ed
 8002368:	080024ed 	.word	0x080024ed
 800236c:	080024ed 	.word	0x080024ed
 8002370:	080024ed 	.word	0x080024ed
 8002374:	080022e9 	.word	0x080022e9
 8002378:	080024ed 	.word	0x080024ed
 800237c:	080024ed 	.word	0x080024ed
 8002380:	0800222b 	.word	0x0800222b
 8002384:	080024ed 	.word	0x080024ed
 8002388:	080024ed 	.word	0x080024ed
 800238c:	080024ed 	.word	0x080024ed
 8002390:	080024ed 	.word	0x080024ed
 8002394:	080024ed 	.word	0x080024ed
 8002398:	080024ed 	.word	0x080024ed
 800239c:	080024ed 	.word	0x080024ed
 80023a0:	080024ed 	.word	0x080024ed
 80023a4:	080024ed 	.word	0x080024ed
 80023a8:	080024ed 	.word	0x080024ed
 80023ac:	0800245b 	.word	0x0800245b
 80023b0:	0800247d 	.word	0x0800247d
 80023b4:	080024ed 	.word	0x080024ed
 80023b8:	080024ed 	.word	0x080024ed
 80023bc:	080024ed 	.word	0x080024ed
 80023c0:	080024ed 	.word	0x080024ed
 80023c4:	0800247d 	.word	0x0800247d
 80023c8:	080024ed 	.word	0x080024ed
 80023cc:	080024ed 	.word	0x080024ed
 80023d0:	080024ed 	.word	0x080024ed
 80023d4:	080024ed 	.word	0x080024ed
 80023d8:	080024ed 	.word	0x080024ed
 80023dc:	080024f5 	.word	0x080024f5
 80023e0:	0800222b 	.word	0x0800222b
 80023e4:	080024ed 	.word	0x080024ed
 80023e8:	080024ed 	.word	0x080024ed
 80023ec:	0800241b 	.word	0x0800241b
 80023f0:	080024ed 	.word	0x080024ed
 80023f4:	080022e9 	.word	0x080022e9
 80023f8:	080024ed 	.word	0x080024ed
 80023fc:	080024ed 	.word	0x080024ed
 8002400:	0800222b 	.word	0x0800222b
      c = *fmt++;
 8002404:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8002406:	2b00      	cmp	r3, #0
 8002408:	f43f af68 	beq.w	80022dc <chprintf+0x1bc>
      if (c == '*') {
 800240c:	2b2a      	cmp	r3, #42	; 0x2a
 800240e:	d174      	bne.n	80024fa <chprintf+0x3da>
        c = *fmt++;
 8002410:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8002412:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 8002416:	3402      	adds	r4, #2
 8002418:	e6c5      	b.n	80021a6 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 800241a:	f859 ab04 	ldr.w	sl, [r9], #4
 800241e:	f1ba 0f00 	cmp.w	sl, #0
 8002422:	f000 80bc 	beq.w	800259e <chprintf+0x47e>
 8002426:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 800242a:	2a00      	cmp	r2, #0
 800242c:	f040 80aa 	bne.w	8002584 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ab 	beq.w	800258c <chprintf+0x46c>
 8002436:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800243a:	4655      	mov	r5, sl
 800243c:	e001      	b.n	8002442 <chprintf+0x322>
 800243e:	42d3      	cmn	r3, r2
 8002440:	d405      	bmi.n	800244e <chprintf+0x32e>
 8002442:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002446:	ebaa 0305 	sub.w	r3, sl, r5
 800244a:	2e00      	cmp	r6, #0
 800244c:	d1f7      	bne.n	800243e <chprintf+0x31e>
 800244e:	eba5 050a 	sub.w	r5, r5, sl
 8002452:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8002454:	2620      	movs	r6, #32
 8002456:	3d01      	subs	r5, #1
 8002458:	e713      	b.n	8002282 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 800245a:	f859 3b04 	ldr.w	r3, [r9], #4
 800245e:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002462:	3901      	subs	r1, #1
      filler = ' ';
 8002464:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8002466:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 800246a:	b918      	cbnz	r0, 8002474 <chprintf+0x354>
    if (width < 0) {
 800246c:	2900      	cmp	r1, #0
      width = -width;
 800246e:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002472:	dc72      	bgt.n	800255a <chprintf+0x43a>
    if (left_align == false) {
 8002474:	2500      	movs	r5, #0
 8002476:	f10d 0a0c 	add.w	sl, sp, #12
 800247a:	e70c      	b.n	8002296 <chprintf+0x176>
        l = va_arg(ap, int);
 800247c:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8002480:	f1bc 0f00 	cmp.w	ip, #0
 8002484:	db5f      	blt.n	8002546 <chprintf+0x426>
        if (do_sign) {
 8002486:	f1be 0f00 	cmp.w	lr, #0
 800248a:	f000 808e 	beq.w	80025aa <chprintf+0x48a>
          *p++ = '+';
 800248e:	232b      	movs	r3, #43	; 0x2b
 8002490:	f88d 300c 	strb.w	r3, [sp, #12]
 8002494:	f10d 050d 	add.w	r5, sp, #13
 8002498:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 800249c:	f105 030b 	add.w	r3, r5, #11
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	461a      	mov	r2, r3
    i = (int)(l % radix);
 80024a4:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <chprintf+0x4a4>)
 80024a6:	fba3 e30c 	umull	lr, r3, r3, ip
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80024b0:	469e      	mov	lr, r3
 80024b2:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 80024b6:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 80024b8:	46e3      	mov	fp, ip
    *--q = i;
 80024ba:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80024bc:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 80024c0:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80024c4:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 80024c6:	dced      	bgt.n	80024a4 <chprintf+0x384>
 80024c8:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 80024ca:	9b01      	ldr	r3, [sp, #4]
 80024cc:	eba3 0c02 	sub.w	ip, r3, r2
 80024d0:	44ac      	add	ip, r5
 80024d2:	4673      	mov	r3, lr
 80024d4:	e001      	b.n	80024da <chprintf+0x3ba>
 80024d6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 80024da:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 80024de:	4565      	cmp	r5, ip
 80024e0:	d1f9      	bne.n	80024d6 <chprintf+0x3b6>
 80024e2:	eba5 050a 	sub.w	r5, r5, sl
 80024e6:	1b49      	subs	r1, r1, r5
 80024e8:	3d01      	subs	r5, #1
 80024ea:	e6ca      	b.n	8002282 <chprintf+0x162>
      *p++ = c;
 80024ec:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 80024f0:	3901      	subs	r1, #1
 80024f2:	e7b8      	b.n	8002466 <chprintf+0x346>
      if (c == 0) {
 80024f4:	f04f 0e08 	mov.w	lr, #8
 80024f8:	e699      	b.n	800222e <chprintf+0x10e>
      c = *fmt++;
 80024fa:	3401      	adds	r4, #1
    precision = 0;
 80024fc:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 80024fe:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002502:	b2ed      	uxtb	r5, r5
 8002504:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8002506:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 800250a:	f63f ae4c 	bhi.w	80021a6 <chprintf+0x86>
          c = *fmt++;
 800250e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002512:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f1      	bne.n	80024fe <chprintf+0x3de>
 800251a:	e6df      	b.n	80022dc <chprintf+0x1bc>
      width = -width;
 800251c:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002520:	f89a 1000 	ldrb.w	r1, [sl]
 8002524:	292d      	cmp	r1, #45	; 0x2d
 8002526:	d021      	beq.n	800256c <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4631      	mov	r1, r6
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4638      	mov	r0, r7
 8002530:	4798      	blx	r3
      } while (++width != 0);
 8002532:	f11b 0b01 	adds.w	fp, fp, #1
 8002536:	d1f7      	bne.n	8002528 <chprintf+0x408>
 8002538:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 800253a:	2d00      	cmp	r5, #0
 800253c:	eba8 0803 	sub.w	r8, r8, r3
 8002540:	f6bf aea9 	bge.w	8002296 <chprintf+0x176>
 8002544:	e606      	b.n	8002154 <chprintf+0x34>
        *p++ = '-';
 8002546:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002548:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 800254c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002550:	f10d 050d 	add.w	r5, sp, #13
 8002554:	f10d 0a0c 	add.w	sl, sp, #12
 8002558:	e7a0      	b.n	800249c <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 800255a:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 800255e:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002562:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8002564:	f10d 0a0c 	add.w	sl, sp, #12
 8002568:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 800256a:	d1dd      	bne.n	8002528 <chprintf+0x408>
 800256c:	2e30      	cmp	r6, #48	; 0x30
 800256e:	d1db      	bne.n	8002528 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4638      	mov	r0, r7
 8002574:	68d2      	ldr	r2, [r2, #12]
 8002576:	4790      	blx	r2
 8002578:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 800257c:	f108 0801 	add.w	r8, r8, #1
        i--;
 8002580:	3d01      	subs	r5, #1
 8002582:	e7d1      	b.n	8002528 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8002584:	b113      	cbz	r3, 800258c <chprintf+0x46c>
 8002586:	3a01      	subs	r2, #1
 8002588:	f57f af57 	bpl.w	800243a <chprintf+0x31a>
    if ((width -= i) < 0) {
 800258c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002590:	b918      	cbnz	r0, 800259a <chprintf+0x47a>
    if (width < 0) {
 8002592:	2900      	cmp	r1, #0
      width = -width;
 8002594:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002598:	dc0d      	bgt.n	80025b6 <chprintf+0x496>
    if (left_align == false) {
 800259a:	2620      	movs	r6, #32
 800259c:	e68b      	b.n	80022b6 <chprintf+0x196>
        s = "(null)";
 800259e:	f8df a028 	ldr.w	sl, [pc, #40]	; 80025c8 <chprintf+0x4a8>
      if (precision == 0) {
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	f43f af47 	beq.w	8002436 <chprintf+0x316>
 80025a8:	e7ed      	b.n	8002586 <chprintf+0x466>
    p = tmpbuf;
 80025aa:	f10d 0a0c 	add.w	sl, sp, #12
 80025ae:	4655      	mov	r5, sl
 80025b0:	e774      	b.n	800249c <chprintf+0x37c>
  int n = 0;
 80025b2:	4688      	mov	r8, r1
  return formatted_bytes;
 80025b4:	e692      	b.n	80022dc <chprintf+0x1bc>
      width = -width;
 80025b6:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 80025ba:	2620      	movs	r6, #32
 80025bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80025c0:	e7ae      	b.n	8002520 <chprintf+0x400>
 80025c2:	bf00      	nop
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	0800ad84 	.word	0x0800ad84
 80025cc:	00000000 	.word	0x00000000

080025d0 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80025d0:	2900      	cmp	r1, #0
 80025d2:	dc0b      	bgt.n	80025ec <cmd_systime+0x1c>
 80025d4:	2320      	movs	r3, #32
 80025d6:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 80025da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025de:	2300      	movs	r3, #0
 80025e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e2:	f383 8811 	msr	BASEPRI, r3
    shellUsage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 80025e6:	4903      	ldr	r1, [pc, #12]	; (80025f4 <cmd_systime+0x24>)
 80025e8:	f7ff bd9a 	b.w	8002120 <chprintf>
    shellUsage(chp, "systime");
 80025ec:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <cmd_systime+0x28>)
 80025ee:	4903      	ldr	r1, [pc, #12]	; (80025fc <cmd_systime+0x2c>)
 80025f0:	f7ff bd96 	b.w	8002120 <chprintf>
 80025f4:	0800ada0 	.word	0x0800ada0
 80025f8:	0800ad8c 	.word	0x0800ad8c
 80025fc:	0800ad94 	.word	0x0800ad94

08002600 <cmd_echo>:
  if (argc != 1) {
 8002600:	2901      	cmp	r1, #1
 8002602:	d003      	beq.n	800260c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8002604:	4a03      	ldr	r2, [pc, #12]	; (8002614 <cmd_echo+0x14>)
 8002606:	4904      	ldr	r1, [pc, #16]	; (8002618 <cmd_echo+0x18>)
 8002608:	f7ff bd8a 	b.w	8002120 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4903      	ldr	r1, [pc, #12]	; (800261c <cmd_echo+0x1c>)
 8002610:	f7ff bd86 	b.w	8002120 <chprintf>
 8002614:	0800ada8 	.word	0x0800ada8
 8002618:	0800ad94 	.word	0x0800ad94
 800261c:	0800adb8 	.word	0x0800adb8

08002620 <cmd_info>:
  if (argc > 0) {
 8002620:	2900      	cmp	r1, #0
 8002622:	dc2e      	bgt.n	8002682 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002624:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8002626:	4a19      	ldr	r2, [pc, #100]	; (800268c <cmd_info+0x6c>)
 8002628:	4919      	ldr	r1, [pc, #100]	; (8002690 <cmd_info+0x70>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800262a:	b082      	sub	sp, #8
 800262c:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800262e:	f7ff fd77 	bl	8002120 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <cmd_info+0x74>)
 8002634:	4918      	ldr	r1, [pc, #96]	; (8002698 <cmd_info+0x78>)
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff fd72 	bl	8002120 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <cmd_info+0x7c>)
 800263e:	4918      	ldr	r1, [pc, #96]	; (80026a0 <cmd_info+0x80>)
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff fd6d 	bl	8002120 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <cmd_info+0x84>)
 8002648:	4917      	ldr	r1, [pc, #92]	; (80026a8 <cmd_info+0x88>)
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff fd68 	bl	8002120 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <cmd_info+0x8c>)
 8002652:	4917      	ldr	r1, [pc, #92]	; (80026b0 <cmd_info+0x90>)
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff fd63 	bl	8002120 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800265a:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <cmd_info+0x94>)
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <cmd_info+0x98>)
 800265e:	4620      	mov	r0, r4
 8002660:	f7ff fd5e 	bl	8002120 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8002664:	4a15      	ldr	r2, [pc, #84]	; (80026bc <cmd_info+0x9c>)
 8002666:	4916      	ldr	r1, [pc, #88]	; (80026c0 <cmd_info+0xa0>)
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fd59 	bl	8002120 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <cmd_info+0xa4>)
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <cmd_info+0xa8>)
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <cmd_info+0xac>)
 8002676:	4916      	ldr	r1, [pc, #88]	; (80026d0 <cmd_info+0xb0>)
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fd51 	bl	8002120 <chprintf>
}
 800267e:	b002      	add	sp, #8
 8002680:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <cmd_info+0xb4>)
 8002684:	4914      	ldr	r1, [pc, #80]	; (80026d8 <cmd_info+0xb8>)
 8002686:	f7ff bd4b 	b.w	8002120 <chprintf>
 800268a:	bf00      	nop
 800268c:	0800abd4 	.word	0x0800abd4
 8002690:	0800adc8 	.word	0x0800adc8
 8002694:	0800ac78 	.word	0x0800ac78
 8002698:	0800addc 	.word	0x0800addc
 800269c:	0800ac08 	.word	0x0800ac08
 80026a0:	0800adf0 	.word	0x0800adf0
 80026a4:	0800ac40 	.word	0x0800ac40
 80026a8:	0800ae04 	.word	0x0800ae04
 80026ac:	0800ace4 	.word	0x0800ace4
 80026b0:	0800ae18 	.word	0x0800ae18
 80026b4:	0800ae2c 	.word	0x0800ae2c
 80026b8:	0800ae58 	.word	0x0800ae58
 80026bc:	0800ae6c 	.word	0x0800ae6c
 80026c0:	0800ae94 	.word	0x0800ae94
 80026c4:	0800aed0 	.word	0x0800aed0
 80026c8:	0800aeac 	.word	0x0800aeac
 80026cc:	0800aea8 	.word	0x0800aea8
 80026d0:	0800aeb8 	.word	0x0800aeb8
 80026d4:	0800adc0 	.word	0x0800adc0
 80026d8:	0800ad94 	.word	0x0800ad94
 80026dc:	00000000 	.word	0x00000000

080026e0 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 80026e0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 80026e2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80026e4:	42a1      	cmp	r1, r4
 80026e6:	d012      	beq.n	800270e <dyn_find_object+0x2e>
 80026e8:	460d      	mov	r5, r1
 80026ea:	4606      	mov	r6, r0
 80026ec:	e002      	b.n	80026f4 <dyn_find_object+0x14>
    p = p->next;
 80026ee:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80026f0:	42a5      	cmp	r5, r4
 80026f2:	d00c      	beq.n	800270e <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80026f4:	2208      	movs	r2, #8
 80026f6:	4631      	mov	r1, r6
 80026f8:	18a0      	adds	r0, r4, r2
 80026fa:	f007 fc3b 	bl	8009f74 <strncmp>
 80026fe:	2800      	cmp	r0, #0
 8002700:	d1f5      	bne.n	80026ee <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8002702:	b114      	cbz	r4, 800270a <dyn_find_object+0x2a>
    /* Increasing references counter.*/
    dep->refs++;
 8002704:	6863      	ldr	r3, [r4, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 800270a:	4620      	mov	r0, r4
 800270c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800270e:	2400      	movs	r4, #0
}
 8002710:	4620      	mov	r0, r4
 8002712:	bd70      	pop	{r4, r5, r6, pc}
	...

08002720 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8002722:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8002724:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8002726:	460d      	mov	r5, r1
 8002728:	4606      	mov	r6, r0
 800272a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800272c:	d103      	bne.n	8002736 <dyn_create_object_pool+0x16>
 800272e:	e00d      	b.n	800274c <dyn_create_object_pool+0x2c>
    p = p->next;
 8002730:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8002732:	42a5      	cmp	r5, r4
 8002734:	d00a      	beq.n	800274c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002736:	2208      	movs	r2, #8
 8002738:	4631      	mov	r1, r6
 800273a:	18a0      	adds	r0, r4, r2
 800273c:	f007 fc1a 	bl	8009f74 <strncmp>
 8002740:	2800      	cmp	r0, #0
 8002742:	d1f5      	bne.n	8002730 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8002744:	b114      	cbz	r4, 800274c <dyn_create_object_pool+0x2c>
    return NULL;
 8002746:	4604      	mov	r4, r0
}
 8002748:	4620      	mov	r0, r4
 800274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800274c:	4638      	mov	r0, r7
 800274e:	f7fe fc67 	bl	8001020 <chPoolAlloc>
  if (dep == NULL) {
 8002752:	4604      	mov	r4, r0
 8002754:	2800      	cmp	r0, #0
 8002756:	d0f7      	beq.n	8002748 <dyn_create_object_pool+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8002758:	2208      	movs	r2, #8
 800275a:	4631      	mov	r1, r6
 800275c:	4410      	add	r0, r2
 800275e:	f007 fc47 	bl	8009ff0 <strncpy>
  dep->next = dlp->next;
 8002762:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8002764:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8002766:	e9c4 3200 	strd	r3, r2, [r4]
}
 800276a:	4620      	mov	r0, r4
  dlp->next = (dyn_element_t *)dep;
 800276c:	602c      	str	r4, [r5, #0]
}
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002770 <_port_irq_epilogue>:
 8002770:	2320      	movs	r3, #32
 8002772:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <_port_irq_epilogue+0x3c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800277e:	d102      	bne.n	8002786 <_port_irq_epilogue+0x16>
 8002780:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8002784:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002786:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800278a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800278c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002790:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002792:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002796:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <_port_irq_epilogue+0x40>)
 8002798:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800279a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800279c:	6889      	ldr	r1, [r1, #8]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80027a2:	bf8c      	ite	hi
 80027a4:	4a03      	ldrhi	r2, [pc, #12]	; (80027b4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80027a6:	4a04      	ldrls	r2, [pc, #16]	; (80027b8 <_port_irq_epilogue+0x48>)
 80027a8:	619a      	str	r2, [r3, #24]
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	200009b0 	.word	0x200009b0
 80027b4:	080002e3 	.word	0x080002e3
 80027b8:	080002e6 	.word	0x080002e6
 80027bc:	00000000 	.word	0x00000000

080027c0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80027c0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80027c4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80027c6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80027ca:	2300      	movs	r3, #0
 80027cc:	f383 8811 	msr	BASEPRI, r3
}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
	...

080027e0 <trace_next.lto_priv.0>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {
 80027e0:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <trace_next.lto_priv.0+0x30>)
  return DWT->CYCCNT;
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <trace_next.lto_priv.0+0x34>)
 80027e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80027e8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	6a64      	ldr	r4, [r4, #36]	; 0x24
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 80027f0:	605c      	str	r4, [r3, #4]
 80027f2:	6840      	ldr	r0, [r0, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 80027f4:	f360 211f 	bfi	r1, r0, #8, #24
 80027f8:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 80027fc:	f602 0138 	addw	r1, r2, #2104	; 0x838
 8002800:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8002802:	bf28      	it	cs
 8002804:	f102 0338 	addcs.w	r3, r2, #56	; 0x38
  }
}
 8002808:	bc10      	pop	{r4}
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 800280a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	200009b0 	.word	0x200009b0
 8002814:	e0001000 	.word	0xe0001000
	...

08002820 <_trace_switch.constprop.0>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_trace_switch.constprop.0+0x24>)
 8002822:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8002824:	07d2      	lsls	r2, r2, #31
 8002826:	d500      	bpl.n	800282a <_trace_switch.constprop.0+0xa>
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
    trace_next();
  }
}
 8002828:	4770      	bx	lr
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 800282a:	f890 2020 	ldrb.w	r2, [r0, #32]
 800282e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8002830:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002832:	00d2      	lsls	r2, r2, #3
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	700a      	strb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 800283a:	699b      	ldr	r3, [r3, #24]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 800283c:	e9c1 3002 	strd	r3, r0, [r1, #8]
    trace_next();
 8002840:	f7ff bfce 	b.w	80027e0 <trace_next.lto_priv.0>
 8002844:	200009b0 	.word	0x200009b0
	...

08002850 <chThdYield>:
void chThdYield(void) {
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	2320      	movs	r3, #32
 8002854:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002858:	4c14      	ldr	r4, [pc, #80]	; (80028ac <chThdYield+0x5c>)
 800285a:	6821      	ldr	r1, [r4, #0]
 800285c:	69a5      	ldr	r5, [r4, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800285e:	688b      	ldr	r3, [r1, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002860:	68aa      	ldr	r2, [r5, #8]
  if (chSchCanYieldS()) {
 8002862:	4293      	cmp	r3, r2
 8002864:	d203      	bcs.n	800286e <chThdYield+0x1e>
 8002866:	2300      	movs	r3, #0
 8002868:	f383 8811 	msr	BASEPRI, r3
}
 800286c:	bd70      	pop	{r4, r5, r6, pc}
  tqp->next             = tp->queue.next;
 800286e:	680b      	ldr	r3, [r1, #0]
 8002870:	6023      	str	r3, [r4, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002872:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8002874:	2000      	movs	r0, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002876:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002878:	f881 6020 	strb.w	r6, [r1, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800287c:	61a1      	str	r1, [r4, #24]
  tp->state = CH_STATE_READY;
 800287e:	f885 0020 	strb.w	r0, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002882:	e000      	b.n	8002886 <chThdYield+0x36>
 8002884:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	428a      	cmp	r2, r1
 800288a:	d9fb      	bls.n	8002884 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 800288c:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800288e:	4628      	mov	r0, r5
  tp->queue.prev             = cp->queue.prev;
 8002890:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8002894:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8002896:	605d      	str	r5, [r3, #4]
  chSysSwitch(currp, otp);
 8002898:	f7ff ffc2 	bl	8002820 <_trace_switch.constprop.0>
 800289c:	69a0      	ldr	r0, [r4, #24]
 800289e:	4629      	mov	r1, r5
 80028a0:	f7fd fd0e 	bl	80002c0 <_port_switch>
 80028a4:	2300      	movs	r3, #0
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	200009b0 	.word	0x200009b0

080028b0 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	4d09      	ldr	r5, [pc, #36]	; (80028d8 <bmk_thread8+0x28>)
 80028b4:	4604      	mov	r4, r0
    chThdYield();
 80028b6:	f7ff ffcb 	bl	8002850 <chThdYield>
    chThdYield();
 80028ba:	f7ff ffc9 	bl	8002850 <chThdYield>
    chThdYield();
 80028be:	f7ff ffc7 	bl	8002850 <chThdYield>
    chThdYield();
 80028c2:	f7ff ffc5 	bl	8002850 <chThdYield>
    (*(uint32_t *)p) += 4;
 80028c6:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80028c8:	69aa      	ldr	r2, [r5, #24]
 80028ca:	3304      	adds	r3, #4
 80028cc:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 80028ce:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80028d2:	075b      	lsls	r3, r3, #29
 80028d4:	d5ef      	bpl.n	80028b6 <bmk_thread8+0x6>
}
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	200009b0 	.word	0x200009b0
 80028dc:	00000000 	.word	0x00000000

080028e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80028e0:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 80028e2:	4e10      	ldr	r6, [pc, #64]	; (8002924 <chSchDoReschedule+0x44>)
  thread_t *tp = tqp->next;
 80028e4:	6832      	ldr	r2, [r6, #0]
 80028e6:	69b5      	ldr	r5, [r6, #24]
  tqp->next             = tp->queue.next;
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	6033      	str	r3, [r6, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80028ec:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80028ee:	605e      	str	r6, [r3, #4]
 80028f0:	f882 1020 	strb.w	r1, [r2, #32]
  tp->state = CH_STATE_READY;
 80028f4:	2100      	movs	r1, #0

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80028f6:	68ac      	ldr	r4, [r5, #8]
  tp->state = CH_STATE_READY;
 80028f8:	f885 1020 	strb.w	r1, [r5, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80028fc:	61b2      	str	r2, [r6, #24]
  cp = (thread_t *)&ch.rlist.queue;
 80028fe:	e000      	b.n	8002902 <chSchDoReschedule+0x22>
 8002900:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4294      	cmp	r4, r2
 8002906:	d3fb      	bcc.n	8002900 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8002908:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800290a:	4628      	mov	r0, r5
  tp->queue.prev             = cp->queue.prev;
 800290c:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8002910:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8002912:	605d      	str	r5, [r3, #4]
  chSysSwitch(currp, otp);
 8002914:	f7ff ff84 	bl	8002820 <_trace_switch.constprop.0>
 8002918:	69b0      	ldr	r0, [r6, #24]
 800291a:	4629      	mov	r1, r5
}
 800291c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8002920:	f7fd bcce 	b.w	80002c0 <_port_switch>
 8002924:	200009b0 	.word	0x200009b0
	...

08002930 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <chSchRescheduleS+0x14>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d800      	bhi.n	8002940 <chSchRescheduleS+0x10>
}
 800293e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8002940:	f7ff bfce 	b.w	80028e0 <chSchDoReschedule>
 8002944:	200009b0 	.word	0x200009b0
	...

08002950 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	2320      	movs	r3, #32
 8002954:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8002958:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 800295a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800295c:	3501      	adds	r5, #1
 800295e:	2d00      	cmp	r5, #0
 8002960:	dc0c      	bgt.n	800297c <chSemResetWithMessage.constprop.0+0x2c>
 8002962:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8002964:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8002968:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 800296a:	6843      	ldr	r3, [r0, #4]
 800296c:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800296e:	601c      	str	r4, [r3, #0]
 8002970:	f7fe fd46 	bl	8001400 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8002974:	3501      	adds	r5, #1
 8002976:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8002978:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800297a:	d1f5      	bne.n	8002968 <chSemResetWithMessage.constprop.0+0x18>
  chSchRescheduleS();
 800297c:	f7ff ffd8 	bl	8002930 <chSchRescheduleS>
 8002980:	2300      	movs	r3, #0
 8002982:	f383 8811 	msr	BASEPRI, r3
}
 8002986:	bd70      	pop	{r4, r5, r6, pc}
	...

08002990 <rt_test_006_001_teardown>:
  chSemResetWithMessage(sp, n, MSG_RESET);
 8002990:	4801      	ldr	r0, [pc, #4]	; (8002998 <rt_test_006_001_teardown+0x8>)
 8002992:	2100      	movs	r1, #0
 8002994:	f7ff bfdc 	b.w	8002950 <chSemResetWithMessage.constprop.0>
 8002998:	20001578 	.word	0x20001578
 800299c:	00000000 	.word	0x00000000

080029a0 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	2320      	movs	r3, #32
 80029a4:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 80029a8:	4c0a      	ldr	r4, [pc, #40]	; (80029d4 <chMBReset.constprop.0+0x34>)
 80029aa:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 80029ac:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80029ae:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 80029b2:	2500      	movs	r5, #0
  mbp->rdptr = mbp->buffer;
 80029b4:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 80029b8:	7522      	strb	r2, [r4, #20]
  mbp->cnt   = (size_t)0;
 80029ba:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80029bc:	f7fe fdc0 	bl	8001540 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80029c0:	f104 0020 	add.w	r0, r4, #32
 80029c4:	f7fe fdbc 	bl	8001540 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 80029c8:	f7ff ffb2 	bl	8002930 <chSchRescheduleS>
 80029cc:	f385 8811 	msr	BASEPRI, r5
}
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
 80029d2:	bf00      	nop
 80029d4:	2000084c 	.word	0x2000084c
	...

080029e0 <oslib_test_002_003_teardown>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 80029e0:	f7ff bfde 	b.w	80029a0 <chMBReset.constprop.0>
	...

080029f0 <oslib_test_002_002_teardown>:
 80029f0:	f7ff bff6 	b.w	80029e0 <oslib_test_002_003_teardown>
	...

08002a00 <oslib_test_002_001_teardown>:
 8002a00:	f7ff bfee 	b.w	80029e0 <oslib_test_002_003_teardown>
	...

08002a10 <obj_read>:
  test_emit_token('a' + objp->obj_key);
 8002a10:	694b      	ldr	r3, [r1, #20]
                     bool async) {
 8002a12:	b570      	push	{r4, r5, r6, lr}
  test_emit_token('a' + objp->obj_key);
 8002a14:	3361      	adds	r3, #97	; 0x61
                     bool async) {
 8002a16:	460c      	mov	r4, r1
 8002a18:	4606      	mov	r6, r0
  test_emit_token('a' + objp->obj_key);
 8002a1a:	b2d8      	uxtb	r0, r3
                     bool async) {
 8002a1c:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 8002a1e:	f7fe f9a7 	bl	8000d70 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 8002a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a24:	f023 0308 	bic.w	r3, r3, #8
 8002a28:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 8002a2a:	b90d      	cbnz	r5, 8002a30 <obj_read+0x20>
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	2320      	movs	r3, #32
 8002a32:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 8002a36:	4621      	mov	r1, r4
 8002a38:	4630      	mov	r0, r6
 8002a3a:	f7fe fe11 	bl	8001660 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8002a3e:	f7ff ff77 	bl	8002930 <chSchRescheduleS>
 8002a42:	2300      	movs	r3, #0
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	2000      	movs	r0, #0
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	0000      	movs	r0, r0
	...

08002a50 <thread4>:
static THD_FUNCTION(thread4, p) {
 8002a50:	b508      	push	{r3, lr}
 8002a52:	2220      	movs	r2, #32
 8002a54:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8002a58:	6883      	ldr	r3, [r0, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	dd05      	ble.n	8002a6a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002a5e:	f7ff ff67 	bl	8002930 <chSchRescheduleS>
 8002a62:	2300      	movs	r3, #0
 8002a64:	f383 8811 	msr	BASEPRI, r3
}
 8002a68:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 8002a6a:	f7fe fde9 	bl	8001640 <chSemSignalI>
  chSchRescheduleS();
 8002a6e:	f7ff ff5f 	bl	8002930 <chSchRescheduleS>
 8002a72:	2300      	movs	r3, #0
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	bd08      	pop	{r3, pc}
 8002a7a:	bf00      	nop
 8002a7c:	0000      	movs	r0, r0
	...

08002a80 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8002a80:	b510      	push	{r4, lr}
 8002a82:	2320      	movs	r3, #32
 8002a84:	4604      	mov	r4, r0
 8002a86:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <thread1.lto_priv.0+0x30>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	b120      	cbz	r0, 8002a9a <thread1.lto_priv.0+0x1a>
    *trp = NULL;
 8002a90:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 8002a92:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 8002a94:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8002a96:	f7fe fcb3 	bl	8001400 <chSchReadyI>
  chSchRescheduleS();
 8002a9a:	f7ff ff49 	bl	8002930 <chSchRescheduleS>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8002aa4:	7820      	ldrb	r0, [r4, #0]
}
 8002aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8002aaa:	f7fe b961 	b.w	8000d70 <test_emit_token>
 8002aae:	bf00      	nop
 8002ab0:	20001cd8 	.word	0x20001cd8
	...

08002ac0 <chGuardedPoolLoadArray>:
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 8002ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4616      	mov	r6, r2
 8002aca:	f04f 0820 	mov.w	r8, #32
 8002ace:	2700      	movs	r7, #0
 8002ad0:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8002ad4:	68eb      	ldr	r3, [r5, #12]
 8002ad6:	6023      	str	r3, [r4, #0]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002ad8:	4628      	mov	r0, r5
  mp->next = php;
 8002ada:	60ec      	str	r4, [r5, #12]
 8002adc:	f7fe fdb0 	bl	8001640 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002ae0:	f7ff ff26 	bl	8002930 <chSchRescheduleS>
 8002ae4:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8002ae8:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 8002aea:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8002aec:	441c      	add	r4, r3
  while (n != 0U) {
 8002aee:	d1ef      	bne.n	8002ad0 <chGuardedPoolLoadArray+0x10>
}
 8002af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002b00 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8002b00:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <chMtxUnlock+0x5c>)
void chMtxUnlock(mutex_t *mp) {
 8002b04:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8002b06:	699d      	ldr	r5, [r3, #24]
 8002b08:	2320      	movs	r3, #32
 8002b0a:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002b0e:	6800      	ldr	r0, [r0, #0]
    ctp->mtxlist = mp->next;
 8002b10:	68cb      	ldr	r3, [r1, #12]
 8002b12:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8002b14:	4288      	cmp	r0, r1
 8002b16:	d01b      	beq.n	8002b50 <chMtxUnlock+0x50>
      tprio_t newprio = ctp->realprio;
 8002b18:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8002b1a:	b14b      	cbz	r3, 8002b30 <chMtxUnlock+0x30>
 8002b1c:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <chMtxUnlock+0x2a>
 8002b22:	6892      	ldr	r2, [r2, #8]
 8002b24:	4294      	cmp	r4, r2
 8002b26:	bf38      	it	cc
 8002b28:	4614      	movcc	r4, r2
        lmp = lmp->next;
 8002b2a:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f5      	bne.n	8002b1c <chMtxUnlock+0x1c>
      mp->next = tp->mtxlist;
 8002b30:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8002b32:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 8002b34:	60ac      	str	r4, [r5, #8]
 8002b36:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002b38:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8002b3a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 8002b3e:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8002b40:	f7fe fc5e 	bl	8001400 <chSchReadyI>
      chSchRescheduleS();
 8002b44:	f7ff fef4 	bl	8002930 <chSchRescheduleS>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f383 8811 	msr	BASEPRI, r3
}
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	6083      	str	r3, [r0, #8]
 8002b54:	2300      	movs	r3, #0
 8002b56:	f383 8811 	msr	BASEPRI, r3
}
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	200009b0 	.word	0x200009b0

08002b60 <rt_test_007_005_execute>:
static void rt_test_007_005_execute(void) {
 8002b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8002b64:	4d4f      	ldr	r5, [pc, #316]	; (8002ca4 <rt_test_007_005_execute+0x144>)
  test_set_step(2);
 8002b66:	4c50      	ldr	r4, [pc, #320]	; (8002ca8 <rt_test_007_005_execute+0x148>)
  return chThdGetSelfX()->prio;
 8002b68:	69aa      	ldr	r2, [r5, #24]
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	6896      	ldr	r6, [r2, #8]
 8002b6e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8002b70:	f7fd fdc6 	bl	8000700 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8002b74:	494d      	ldr	r1, [pc, #308]	; (8002cac <rt_test_007_005_execute+0x14c>)
 8002b76:	f7fe f853 	bl	8000c20 <_test_assert>
 8002b7a:	b108      	cbz	r0, 8002b80 <rt_test_007_005_execute+0x20>
}
 8002b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8002b80:	2303      	movs	r3, #3
 8002b82:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8002b84:	f7fd fdbc 	bl	8000700 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8002b88:	f080 0001 	eor.w	r0, r0, #1
 8002b8c:	4948      	ldr	r1, [pc, #288]	; (8002cb0 <rt_test_007_005_execute+0x150>)
 8002b8e:	b2c0      	uxtb	r0, r0
 8002b90:	f7fe f846 	bl	8000c20 <_test_assert>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d1f1      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
    chMtxUnlock(&m1);
 8002b98:	4f46      	ldr	r7, [pc, #280]	; (8002cb4 <rt_test_007_005_execute+0x154>)
  test_set_step(4);
 8002b9a:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8002b9c:	4638      	mov	r0, r7
  test_set_step(4);
 8002b9e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8002ba0:	f7ff ffae 	bl	8002b00 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8002ba4:	68b8      	ldr	r0, [r7, #8]
 8002ba6:	4944      	ldr	r1, [pc, #272]	; (8002cb8 <rt_test_007_005_execute+0x158>)
 8002ba8:	fab0 f080 	clz	r0, r0
 8002bac:	0940      	lsrs	r0, r0, #5
 8002bae:	f7fe f837 	bl	8000c20 <_test_assert>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d1e2      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8002bb6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8002bb8:	4940      	ldr	r1, [pc, #256]	; (8002cbc <rt_test_007_005_execute+0x15c>)
 8002bba:	1bc0      	subs	r0, r0, r7
 8002bbc:	fab0 f080 	clz	r0, r0
 8002bc0:	0940      	lsrs	r0, r0, #5
 8002bc2:	f7fe f82d 	bl	8000c20 <_test_assert>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d1d8      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
 8002bca:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002bcc:	493c      	ldr	r1, [pc, #240]	; (8002cc0 <rt_test_007_005_execute+0x160>)
 8002bce:	6898      	ldr	r0, [r3, #8]
 8002bd0:	1b80      	subs	r0, r0, r6
 8002bd2:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8002bd6:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002bd8:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 8002bda:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002bdc:	f7fe f820 	bl	8000c20 <_test_assert>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1cb      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
  test_set_step(6);
 8002be4:	2306      	movs	r3, #6
 8002be6:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8002be8:	f7fd fd8a 	bl	8000700 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8002bec:	492f      	ldr	r1, [pc, #188]	; (8002cac <rt_test_007_005_execute+0x14c>)
 8002bee:	f7fe f817 	bl	8000c20 <_test_assert>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d1c2      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8002bf6:	f7fd fd83 	bl	8000700 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8002bfa:	f080 0001 	eor.w	r0, r0, #1
 8002bfe:	492c      	ldr	r1, [pc, #176]	; (8002cb0 <rt_test_007_005_execute+0x150>)
 8002c00:	b2c0      	uxtb	r0, r0
 8002c02:	f7fe f80d 	bl	8000c20 <_test_assert>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d1b8      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *ctp = currp;
 8002c10:	f8d5 9018 	ldr.w	r9, [r5, #24]

  if (ctp->mtxlist != NULL) {
 8002c14:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8002c18:	b1db      	cbz	r3, 8002c52 <rt_test_007_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8002c1a:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002c1c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 8002c1e:	68d9      	ldr	r1, [r3, #12]
 8002c20:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8002c24:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8002c26:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8002c28:	d037      	beq.n	8002c9a <rt_test_007_005_execute+0x13a>
        mp->next    = tp->mtxlist;
 8002c2a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8002c2e:	6811      	ldr	r1, [r2, #0]
 8002c30:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8002c38:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8002c3a:	f7fe fbe1 	bl	8001400 <chSchReadyI>
 8002c3e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ea      	bne.n	8002c1c <rt_test_007_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8002c46:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8002c4a:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8002c4e:	f7ff fe6f 	bl	8002930 <chSchRescheduleS>
 8002c52:	2300      	movs	r3, #0
 8002c54:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8002c58:	68b8      	ldr	r0, [r7, #8]
 8002c5a:	4917      	ldr	r1, [pc, #92]	; (8002cb8 <rt_test_007_005_execute+0x158>)
 8002c5c:	fab0 f080 	clz	r0, r0
 8002c60:	0940      	lsrs	r0, r0, #5
 8002c62:	f7fd ffdd 	bl	8000c20 <_test_assert>
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d188      	bne.n	8002b7c <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8002c6a:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8002c6c:	4913      	ldr	r1, [pc, #76]	; (8002cbc <rt_test_007_005_execute+0x15c>)
 8002c6e:	1bc0      	subs	r0, r0, r7
 8002c70:	fab0 f080 	clz	r0, r0
 8002c74:	0940      	lsrs	r0, r0, #5
 8002c76:	f7fd ffd3 	bl	8000c20 <_test_assert>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	f47f af7e 	bne.w	8002b7c <rt_test_007_005_execute+0x1c>
 8002c80:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002c82:	490f      	ldr	r1, [pc, #60]	; (8002cc0 <rt_test_007_005_execute+0x160>)
 8002c84:	6898      	ldr	r0, [r3, #8]
 8002c86:	1b80      	subs	r0, r0, r6
  test_set_step(7);
 8002c88:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002c8a:	fab0 f080 	clz	r0, r0
  test_set_step(7);
 8002c8e:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002c90:	0940      	lsrs	r0, r0, #5
}
 8002c92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002c96:	f7fd bfc3 	b.w	8000c20 <_test_assert>
        mp->owner = NULL;
 8002c9a:	f8c3 8008 	str.w	r8, [r3, #8]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	e7cf      	b.n	8002c42 <rt_test_007_005_execute+0xe2>
 8002ca2:	bf00      	nop
 8002ca4:	200009b0 	.word	0x200009b0
 8002ca8:	20001cac 	.word	0x20001cac
 8002cac:	0800aedc 	.word	0x0800aedc
 8002cb0:	0800aeec 	.word	0x0800aeec
 8002cb4:	2000082c 	.word	0x2000082c
 8002cb8:	0800aef8 	.word	0x0800aef8
 8002cbc:	0800af04 	.word	0x0800af04
 8002cc0:	0800af14 	.word	0x0800af14
	...

08002cd0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f382 8811 	msr	BASEPRI, r2
  oldprio = currp->realprio;
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <chThdSetPriority+0x2c>)
 8002cda:	6992      	ldr	r2, [r2, #24]
 8002cdc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8002cde:	6891      	ldr	r1, [r2, #8]
 8002ce0:	42a1      	cmp	r1, r4
 8002ce2:	d001      	beq.n	8002ce8 <chThdSetPriority+0x18>
 8002ce4:	4281      	cmp	r1, r0
 8002ce6:	d200      	bcs.n	8002cea <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8002ce8:	6090      	str	r0, [r2, #8]
  currp->realprio = newprio;
 8002cea:	63d0      	str	r0, [r2, #60]	; 0x3c
  chSchRescheduleS();
 8002cec:	f7ff fe20 	bl	8002930 <chSchRescheduleS>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f383 8811 	msr	BASEPRI, r3
}
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200009b0 	.word	0x200009b0

08002d00 <rt_test_004_004_execute>:
 * - [4.4.3] Raising thread priority above the boosted level.
 * - [4.4.4] Restoring original conditions.
 * .
 */

static void rt_test_004_004_execute(void) {
 8002d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8002d04:	4d2f      	ldr	r5, [pc, #188]	; (8002dc4 <rt_test_004_004_execute+0xc4>)
  }
  test_end_step(1);

  /* [4.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8002d06:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002dd8 <rt_test_004_004_execute+0xd8>
 8002d0a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8002d0c:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8002d0e:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8002d10:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8002d12:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8002d14:	4638      	mov	r0, r7
  test_set_step(2);
 8002d16:	2302      	movs	r3, #2
 8002d18:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8002d1c:	f7ff ffd8 	bl	8002cd0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8002d20:	1b00      	subs	r0, r0, r4
 8002d22:	fab0 f080 	clz	r0, r0
 8002d26:	4928      	ldr	r1, [pc, #160]	; (8002dc8 <rt_test_004_004_execute+0xc8>)
 8002d28:	0940      	lsrs	r0, r0, #5
 8002d2a:	f7fd ff79 	bl	8000c20 <_test_assert>
 8002d2e:	b108      	cbz	r0, 8002d34 <rt_test_004_004_execute+0x34>
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
  test_end_step(4);
}
 8002d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8002d34:	69ab      	ldr	r3, [r5, #24]
 8002d36:	4925      	ldr	r1, [pc, #148]	; (8002dcc <rt_test_004_004_execute+0xcc>)
 8002d38:	6898      	ldr	r0, [r3, #8]
 8002d3a:	1b80      	subs	r0, r0, r6
 8002d3c:	fab0 f080 	clz	r0, r0
 8002d40:	0940      	lsrs	r0, r0, #5
 8002d42:	f7fd ff6d 	bl	8000c20 <_test_assert>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d1f2      	bne.n	8002d30 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8002d4a:	69ab      	ldr	r3, [r5, #24]
 8002d4c:	4920      	ldr	r1, [pc, #128]	; (8002dd0 <rt_test_004_004_execute+0xd0>)
 8002d4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d50:	1bc0      	subs	r0, r0, r7
 8002d52:	fab0 f080 	clz	r0, r0
 8002d56:	0940      	lsrs	r0, r0, #5
 8002d58:	f7fd ff62 	bl	8000c20 <_test_assert>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d1e7      	bne.n	8002d30 <rt_test_004_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8002d60:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8002d62:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8002d64:	4630      	mov	r0, r6
  test_set_step(3);
 8002d66:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8002d6a:	f7ff ffb1 	bl	8002cd0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8002d6e:	1a38      	subs	r0, r7, r0
 8002d70:	fab0 f080 	clz	r0, r0
 8002d74:	4914      	ldr	r1, [pc, #80]	; (8002dc8 <rt_test_004_004_execute+0xc8>)
 8002d76:	0940      	lsrs	r0, r0, #5
 8002d78:	f7fd ff52 	bl	8000c20 <_test_assert>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d1d7      	bne.n	8002d30 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8002d80:	69ab      	ldr	r3, [r5, #24]
 8002d82:	4912      	ldr	r1, [pc, #72]	; (8002dcc <rt_test_004_004_execute+0xcc>)
 8002d84:	6898      	ldr	r0, [r3, #8]
 8002d86:	1b80      	subs	r0, r0, r6
 8002d88:	fab0 f080 	clz	r0, r0
 8002d8c:	0940      	lsrs	r0, r0, #5
 8002d8e:	f7fd ff47 	bl	8000c20 <_test_assert>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d1cc      	bne.n	8002d30 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8002d96:	69ab      	ldr	r3, [r5, #24]
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <rt_test_004_004_execute+0xd4>)
 8002d9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d9c:	1b80      	subs	r0, r0, r6
 8002d9e:	fab0 f080 	clz	r0, r0
 8002da2:	0940      	lsrs	r0, r0, #5
 8002da4:	f7fd ff3c 	bl	8000c20 <_test_assert>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d1c1      	bne.n	8002d30 <rt_test_004_004_execute+0x30>
  test_set_step(4);
 8002dac:	2304      	movs	r3, #4
 8002dae:	f8c8 3000 	str.w	r3, [r8]
 8002db2:	2320      	movs	r3, #32
 8002db4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8002db8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8002dba:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8002dbc:	63dc      	str	r4, [r3, #60]	; 0x3c
 8002dbe:	f380 8811 	msr	BASEPRI, r0
  test_end_step(4);
 8002dc2:	e7b5      	b.n	8002d30 <rt_test_004_004_execute+0x30>
 8002dc4:	200009b0 	.word	0x200009b0
 8002dc8:	0800af2c 	.word	0x0800af2c
 8002dcc:	0800af50 	.word	0x0800af50
 8002dd0:	0800af6c 	.word	0x0800af6c
 8002dd4:	0800af94 	.word	0x0800af94
 8002dd8:	20001cac 	.word	0x20001cac
 8002ddc:	00000000 	.word	0x00000000

08002de0 <rt_test_004_003_execute>:
static void rt_test_004_003_execute(void) {
 8002de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de4:	4f1d      	ldr	r7, [pc, #116]	; (8002e5c <rt_test_004_003_execute+0x7c>)
  test_set_step(1);
 8002de6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002e68 <rt_test_004_003_execute+0x88>
  return chThdGetSelfX()->prio;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	689e      	ldr	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8002dee:	1c75      	adds	r5, r6, #1
  test_set_step(1);
 8002df0:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8002df2:	4628      	mov	r0, r5
  test_set_step(1);
 8002df4:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8002df8:	f7ff ff6a 	bl	8002cd0 <chThdSetPriority>
 8002dfc:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8002dfe:	1b80      	subs	r0, r0, r6
 8002e00:	fab0 f080 	clz	r0, r0
 8002e04:	4916      	ldr	r1, [pc, #88]	; (8002e60 <rt_test_004_003_execute+0x80>)
 8002e06:	0940      	lsrs	r0, r0, #5
 8002e08:	f7fd ff0a 	bl	8000c20 <_test_assert>
 8002e0c:	b108      	cbz	r0, 8002e12 <rt_test_004_003_execute+0x32>
}
 8002e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e12:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8002e14:	4913      	ldr	r1, [pc, #76]	; (8002e64 <rt_test_004_003_execute+0x84>)
 8002e16:	6898      	ldr	r0, [r3, #8]
 8002e18:	1b40      	subs	r0, r0, r5
 8002e1a:	fab0 f080 	clz	r0, r0
 8002e1e:	0940      	lsrs	r0, r0, #5
 8002e20:	f7fd fefe 	bl	8000c20 <_test_assert>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d1f2      	bne.n	8002e0e <rt_test_004_003_execute+0x2e>
  test_set_step(2);
 8002e28:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8002e2a:	4620      	mov	r0, r4
  test_set_step(2);
 8002e2c:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(p1);
 8002e30:	f7ff ff4e 	bl	8002cd0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8002e34:	1a28      	subs	r0, r5, r0
 8002e36:	fab0 f080 	clz	r0, r0
 8002e3a:	4909      	ldr	r1, [pc, #36]	; (8002e60 <rt_test_004_003_execute+0x80>)
 8002e3c:	0940      	lsrs	r0, r0, #5
 8002e3e:	f7fd feef 	bl	8000c20 <_test_assert>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d1e3      	bne.n	8002e0e <rt_test_004_003_execute+0x2e>
 8002e46:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <rt_test_004_003_execute+0x84>)
 8002e4a:	6898      	ldr	r0, [r3, #8]
 8002e4c:	1b80      	subs	r0, r0, r6
 8002e4e:	fab0 f080 	clz	r0, r0
}
 8002e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8002e56:	0940      	lsrs	r0, r0, #5
 8002e58:	f7fd bee2 	b.w	8000c20 <_test_assert>
 8002e5c:	200009b0 	.word	0x200009b0
 8002e60:	0800af2c 	.word	0x0800af2c
 8002e64:	0800af50 	.word	0x0800af50
 8002e68:	20001cac 	.word	0x20001cac
 8002e6c:	00000000 	.word	0x00000000

08002e70 <chSysRestoreStatusX.part.0>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8002e70:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e72:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8002e76:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8002e7a:	b11c      	cbz	r4, 8002e84 <chSysRestoreStatusX.part.0+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8002e82:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 8002e84:	f7ff fd54 	bl	8002930 <chSchRescheduleS>
 8002e88:	f384 8811 	msr	BASEPRI, r4
}
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop

08002e90 <vtcb>:
static void vtcb(void *p) {
 8002e90:	b508      	push	{r3, lr}
 8002e92:	2320      	movs	r3, #32
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f382 8811 	msr	BASEPRI, r2
 8002e9e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ea2:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8002ea6:	b91b      	cbnz	r3, 8002eb0 <vtcb+0x20>
 8002ea8:	f7fe fca2 	bl	80017f0 <chSysGetStatusAndLockX.part.0>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8002eac:	f7ff ffe0 	bl	8002e70 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f383 8811 	msr	BASEPRI, r3
}
 8002eb6:	bd08      	pop	{r3, pc}
	...

08002ec0 <chSchWakeupS>:
  thread_t *otp = currp;
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <chSchWakeupS+0x64>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *otp = currp;
 8002ec4:	6997      	ldr	r7, [r2, #24]
  if (ntp->prio <= otp->prio) {
 8002ec6:	6886      	ldr	r6, [r0, #8]
 8002ec8:	68bd      	ldr	r5, [r7, #8]
  ntp->u.rdymsg = msg;
 8002eca:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8002ecc:	42ae      	cmp	r6, r5
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002ece:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 8002ed0:	d80d      	bhi.n	8002eee <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 8002ed2:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002ed4:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 8002ed6:	f880 1020 	strb.w	r1, [r0, #32]
    cp = cp->queue.next;
 8002eda:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4296      	cmp	r6, r2
 8002ee0:	d9fb      	bls.n	8002eda <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002ee8:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002eea:	605c      	str	r4, [r3, #4]
}
 8002eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->state = CH_STATE_READY;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3020 	strb.w	r3, [r7, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002ef4:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8002ef6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002ef8:	6899      	ldr	r1, [r3, #8]
 8002efa:	428d      	cmp	r5, r1
 8002efc:	d3fb      	bcc.n	8002ef6 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	6079      	str	r1, [r7, #4]
    ntp->state = CH_STATE_CURRENT;
 8002f02:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8002f04:	603b      	str	r3, [r7, #0]
    chSysSwitch(ntp, otp);
 8002f06:	4638      	mov	r0, r7
  tp->queue.prev->queue.next = tp;
 8002f08:	600f      	str	r7, [r1, #0]
  cp->queue.prev             = tp;
 8002f0a:	605f      	str	r7, [r3, #4]
    ntp->state = CH_STATE_CURRENT;
 8002f0c:	f884 5020 	strb.w	r5, [r4, #32]
    currp = ntp;
 8002f10:	6194      	str	r4, [r2, #24]
    chSysSwitch(ntp, otp);
 8002f12:	f7ff fc85 	bl	8002820 <_trace_switch.constprop.0>
 8002f16:	4639      	mov	r1, r7
 8002f18:	4620      	mov	r0, r4
}
 8002f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chSysSwitch(ntp, otp);
 8002f1e:	f7fd b9cf 	b.w	80002c0 <_port_switch>
 8002f22:	bf00      	nop
 8002f24:	200009b0 	.word	0x200009b0
	...

08002f30 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	4604      	mov	r4, r0
 8002f34:	2020      	movs	r0, #32
 8002f36:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 8002f3a:	4f1a      	ldr	r7, [pc, #104]	; (8002fa4 <chThdCreateStatic.constprop.0+0x74>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f3c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002f40:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
 8002f44:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  tp->prio      = prio;
 8002f48:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  REG_INSERT(tp);
 8002f4c:	697a      	ldr	r2, [r7, #20]
  tp->realprio  = prio;
 8002f4e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f52:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8002f56:	4d14      	ldr	r5, [pc, #80]	; (8002fa8 <chThdCreateStatic.constprop.0+0x78>)
  tp->name      = name;
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <chThdCreateStatic.constprop.0+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f5a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
  tp->refs      = (trefs_t)1;
 8002f5e:	2101      	movs	r1, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002f60:	f504 7580 	add.w	r5, r4, #256	; 0x100
  tp->refs      = (trefs_t)1;
 8002f64:	f884 1122 	strb.w	r1, [r4, #290]	; 0x122
  tp->name      = name;
 8002f68:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  tp->mtxlist   = NULL;
 8002f6c:	2600      	movs	r6, #0
  queue_init(&tp->msgqueue);
 8002f6e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  list_init(&tp->waiting);
 8002f72:	f504 7194 	add.w	r1, r4, #296	; 0x128
  tp->state     = CH_STATE_WTSTART;
 8002f76:	2002      	movs	r0, #2
 8002f78:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
  tp->epending  = (eventmask_t)0;
 8002f7c:	e9c4 664d 	strd	r6, r6, [r4, #308]	; 0x134
  REG_INSERT(tp);
 8002f80:	e9c4 7244 	strd	r7, r2, [r4, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 8002f84:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  chSchWakeupS(tp, MSG_OK);
 8002f88:	4628      	mov	r0, r5
  REG_INSERT(tp);
 8002f8a:	6115      	str	r5, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8002f8c:	e9c4 134a 	strd	r1, r3, [r4, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 8002f90:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8002f94:	4631      	mov	r1, r6
  REG_INSERT(tp);
 8002f96:	617d      	str	r5, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8002f98:	f7ff ff92 	bl	8002ec0 <chSchWakeupS>
 8002f9c:	f386 8811 	msr	BASEPRI, r6
}
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa4:	200009b0 	.word	0x200009b0
 8002fa8:	080002d1 	.word	0x080002d1
 8002fac:	0800afb4 	.word	0x0800afb4

08002fb0 <chCondSignal.constprop.0>:
void chCondSignal(condition_variable_t *cp) {
 8002fb0:	b508      	push	{r3, lr}
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <chCondSignal.constprop.0+0x24>)
 8002fba:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 8002fbc:	4298      	cmp	r0, r3
 8002fbe:	d005      	beq.n	8002fcc <chCondSignal.constprop.0+0x1c>
  tqp->next             = tp->queue.next;
 8002fc0:	6802      	ldr	r2, [r0, #0]
 8002fc2:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002fc4:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f7ff ff7a 	bl	8002ec0 <chSchWakeupS>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f383 8811 	msr	BASEPRI, r3
}
 8002fd2:	bd08      	pop	{r3, pc}
 8002fd4:	20000800 	.word	0x20000800
	...

08002fe0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8002fe4:	4f14      	ldr	r7, [pc, #80]	; (8003038 <chThdCreateFromMemoryPool.constprop.0+0x58>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	4680      	mov	r8, r0
  wsp = chPoolAlloc(mp);
 8002fea:	4638      	mov	r0, r7
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8002fec:	460e      	mov	r6, r1
 8002fee:	4615      	mov	r5, r2
  wsp = chPoolAlloc(mp);
 8002ff0:	f7fe f816 	bl	8001020 <chPoolAlloc>
  if (wsp == NULL) {
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	b1d0      	cbz	r0, 800302e <chThdCreateFromMemoryPool.constprop.0+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8002ff8:	687b      	ldr	r3, [r7, #4]
  thread_descriptor_t td = {
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <chThdCreateFromMemoryPool.constprop.0+0x5c>)
 8002ffc:	f8cd 8000 	str.w	r8, [sp]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8003000:	4403      	add	r3, r0
  thread_descriptor_t td = {
 8003002:	9302      	str	r3, [sp, #8]
 8003004:	9001      	str	r0, [sp, #4]
 8003006:	9603      	str	r6, [sp, #12]
 8003008:	9505      	str	r5, [sp, #20]
 800300a:	9204      	str	r2, [sp, #16]
 800300c:	2320      	movs	r3, #32
 800300e:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8003012:	4668      	mov	r0, sp
 8003014:	f7fe f97c 	bl	8001310 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8003018:	2302      	movs	r3, #2
 800301a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 800301e:	6407      	str	r7, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8003020:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8003022:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8003024:	f7ff ff4c 	bl	8002ec0 <chSchWakeupS>
 8003028:	2300      	movs	r3, #0
 800302a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800302e:	4620      	mov	r0, r4
 8003030:	b006      	add	sp, #24
 8003032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003036:	bf00      	nop
 8003038:	20001448 	.word	0x20001448
 800303c:	08000ea1 	.word	0x08000ea1

08003040 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8003040:	b508      	push	{r3, lr}
 8003042:	2220      	movs	r2, #32
 8003044:	f382 8811 	msr	BASEPRI, r2
  if (++sp->cnt <= (cnt_t)0) {
 8003048:	6882      	ldr	r2, [r0, #8]
 800304a:	3201      	adds	r2, #1
 800304c:	2a00      	cmp	r2, #0
 800304e:	6082      	str	r2, [r0, #8]
 8003050:	dd03      	ble.n	800305a <chSemSignal+0x1a>
 8003052:	2300      	movs	r3, #0
 8003054:	f383 8811 	msr	BASEPRI, r3
}
 8003058:	bd08      	pop	{r3, pc}
 800305a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 800305c:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 800305e:	6802      	ldr	r2, [r0, #0]
 8003060:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8003062:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8003064:	6053      	str	r3, [r2, #4]
 8003066:	f7ff ff2b 	bl	8002ec0 <chSchWakeupS>
 800306a:	2300      	movs	r3, #0
 800306c:	f383 8811 	msr	BASEPRI, r3
}
 8003070:	bd08      	pop	{r3, pc}
 8003072:	bf00      	nop
	...

08003080 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8003080:	b510      	push	{r4, lr}
 8003082:	2320      	movs	r3, #32
 8003084:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8003088:	f7fe f942 	bl	8001310 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800308c:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800308e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8003090:	f7ff ff16 	bl	8002ec0 <chSchWakeupS>
 8003094:	2300      	movs	r3, #0
 8003096:	f383 8811 	msr	BASEPRI, r3
}
 800309a:	4620      	mov	r0, r4
 800309c:	bd10      	pop	{r4, pc}
 800309e:	bf00      	nop

080030a0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80030a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80030a2:	4c0a      	ldr	r4, [pc, #40]	; (80030cc <chSchGoSleepS+0x2c>)
 80030a4:	69a5      	ldr	r5, [r4, #24]
  thread_t *tp = tqp->next;
 80030a6:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 80030a8:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->next             = tp->queue.next;
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80030b0:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80030b2:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 80030b4:	4628      	mov	r0, r5
  currp->state = CH_STATE_CURRENT;
 80030b6:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80030ba:	61a3      	str	r3, [r4, #24]
  chSysSwitch(currp, otp);
 80030bc:	f7ff fbb0 	bl	8002820 <_trace_switch.constprop.0>
 80030c0:	69a0      	ldr	r0, [r4, #24]
 80030c2:	4629      	mov	r1, r5
}
 80030c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 80030c8:	f7fd b8fa 	b.w	80002c0 <_port_switch>
 80030cc:	200009b0 	.word	0x200009b0

080030d0 <chSemSignalWait.constprop.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	2320      	movs	r3, #32
 80030d4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 80030d8:	4c15      	ldr	r4, [pc, #84]	; (8003130 <chSemSignalWait.constprop.0+0x60>)
 80030da:	68a3      	ldr	r3, [r4, #8]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	2a00      	cmp	r2, #0
 80030e0:	60a2      	str	r2, [r4, #8]
 80030e2:	dd19      	ble.n	8003118 <chSemSignalWait.constprop.0+0x48>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	60a3      	str	r3, [r4, #8]
 80030e8:	db06      	blt.n	80030f8 <chSemSignalWait.constprop.0+0x28>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80030ea:	f7ff fc21 	bl	8002930 <chSchRescheduleS>
    msg = MSG_OK;
 80030ee:	2000      	movs	r0, #0
 80030f0:	2300      	movs	r3, #0
 80030f2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 80030f8:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <chSemSignalWait.constprop.0+0x64>)
  tp->queue.prev             = tqp->prev;
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 80030fe:	2005      	movs	r0, #5
 8003100:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003104:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8003106:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8003108:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800310a:	f7ff ffc9 	bl	80030a0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 800310e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003110:	2300      	movs	r3, #0
 8003112:	f383 8811 	msr	BASEPRI, r3
}
 8003116:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8003118:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800311e:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8003120:	f7fe f96e 	bl	8001400 <chSchReadyI>
 8003124:	68a3      	ldr	r3, [r4, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	6242      	str	r2, [r0, #36]	; 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	e7da      	b.n	80030e4 <chSemSignalWait.constprop.0+0x14>
 800312e:	bf00      	nop
 8003130:	20001578 	.word	0x20001578
 8003134:	200009b0 	.word	0x200009b0
	...

08003140 <rt_test_006_005_execute>:

static void rt_test_006_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_005_execute(void) {
 8003140:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <rt_test_006_005_execute+0x7c>)

  /* [6.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003144:	4d1e      	ldr	r5, [pc, #120]	; (80031c0 <rt_test_006_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8003146:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003148:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <rt_test_006_005_execute+0x84>)
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	481e      	ldr	r0, [pc, #120]	; (80031c8 <rt_test_006_005_execute+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800314e:	4c1f      	ldr	r4, [pc, #124]	; (80031cc <rt_test_006_005_execute+0x8c>)
  test_set_step(1);
 8003150:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003152:	3101      	adds	r1, #1
  test_set_step(1);
 8003154:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003156:	2300      	movs	r3, #0
 8003158:	f7ff feea 	bl	8002f30 <chThdCreateStatic.constprop.0>
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <rt_test_006_005_execute+0x90>)
  test_end_step(1);

  /* [6.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800315e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003160:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003162:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003164:	f7ff ffb4 	bl	80030d0 <chSemSignalWait.constprop.0>
 8003168:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800316a:	491a      	ldr	r1, [pc, #104]	; (80031d4 <rt_test_006_005_execute+0x94>)
 800316c:	1b00      	subs	r0, r0, r4
 800316e:	fab0 f080 	clz	r0, r0
 8003172:	0940      	lsrs	r0, r0, #5
 8003174:	f7fd fd54 	bl	8000c20 <_test_assert>
 8003178:	b100      	cbz	r0, 800317c <rt_test_006_005_execute+0x3c>
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 800317a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800317c:	68a0      	ldr	r0, [r4, #8]
 800317e:	4916      	ldr	r1, [pc, #88]	; (80031d8 <rt_test_006_005_execute+0x98>)
 8003180:	fab0 f080 	clz	r0, r0
 8003184:	0940      	lsrs	r0, r0, #5
 8003186:	f7fd fd4b 	bl	8000c20 <_test_assert>
 800318a:	2800      	cmp	r0, #0
 800318c:	d1f5      	bne.n	800317a <rt_test_006_005_execute+0x3a>
  test_set_step(3);
 800318e:	2303      	movs	r3, #3
 8003190:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003192:	f7ff ff9d 	bl	80030d0 <chSemSignalWait.constprop.0>
 8003196:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <rt_test_006_005_execute+0x94>)
 800319a:	1b00      	subs	r0, r0, r4
 800319c:	fab0 f080 	clz	r0, r0
 80031a0:	0940      	lsrs	r0, r0, #5
 80031a2:	f7fd fd3d 	bl	8000c20 <_test_assert>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d1e7      	bne.n	800317a <rt_test_006_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80031aa:	68a0      	ldr	r0, [r4, #8]
 80031ac:	490a      	ldr	r1, [pc, #40]	; (80031d8 <rt_test_006_005_execute+0x98>)
 80031ae:	fab0 f080 	clz	r0, r0
}
 80031b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 80031b6:	0940      	lsrs	r0, r0, #5
 80031b8:	f7fd bd32 	b.w	8000c20 <_test_assert>
 80031bc:	200009b0 	.word	0x200009b0
 80031c0:	20001cac 	.word	0x20001cac
 80031c4:	08007181 	.word	0x08007181
 80031c8:	20001598 	.word	0x20001598
 80031cc:	20001578 	.word	0x20001578
 80031d0:	20001cc4 	.word	0x20001cc4
 80031d4:	0800af04 	.word	0x0800af04
 80031d8:	0800afbc 	.word	0x0800afbc
 80031dc:	00000000 	.word	0x00000000

080031e0 <chEvtWaitOne.constprop.0>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 80031e0:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <chEvtWaitOne.constprop.0+0x34>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 80031e2:	b510      	push	{r4, lr}
 80031e4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80031e6:	6994      	ldr	r4, [r2, #24]
 80031e8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80031ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80031ee:	b140      	cbz	r0, 8003202 <chEvtWaitOne.constprop.0+0x22>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 80031f0:	4243      	negs	r3, r0
  ctp->epending &= ~m;
 80031f2:	ea20 0203 	bic.w	r2, r0, r3
 80031f6:	6362      	str	r2, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80031f8:	4018      	ands	r0, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003200:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003206:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8003208:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800320a:	f7ff ff49 	bl	80030a0 <chSchGoSleepS>
    m = ctp->epending & events;
 800320e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003210:	e7ee      	b.n	80031f0 <chEvtWaitOne.constprop.0+0x10>
 8003212:	bf00      	nop
 8003214:	200009b0 	.word	0x200009b0
	...

08003220 <chEvtWaitAny.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <chEvtWaitAny.constprop.0+0x34>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8003222:	b510      	push	{r4, lr}
 8003224:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003226:	6994      	ldr	r4, [r2, #24]
 8003228:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800322c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800322e:	b120      	cbz	r0, 800323a <chEvtWaitAny.constprop.0+0x1a>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8003230:	2300      	movs	r3, #0
 8003232:	6363      	str	r3, [r4, #52]	; 0x34
 8003234:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003238:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800323e:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003240:	200a      	movs	r0, #10
 8003242:	f7ff ff2d 	bl	80030a0 <chSchGoSleepS>
  ctp->epending &= ~m;
 8003246:	2300      	movs	r3, #0
    m = ctp->epending & events;
 8003248:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 800324a:	6363      	str	r3, [r4, #52]	; 0x34
 800324c:	f383 8811 	msr	BASEPRI, r3
}
 8003250:	bd10      	pop	{r4, pc}
 8003252:	bf00      	nop
 8003254:	200009b0 	.word	0x200009b0
	...

08003260 <chEvtWaitAll.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <chEvtWaitAll.constprop.0+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8003262:	b510      	push	{r4, lr}
 8003264:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003266:	6994      	ldr	r4, [r2, #24]
 8003268:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800326c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800326e:	f003 0205 	and.w	r2, r3, #5
 8003272:	2a05      	cmp	r2, #5
 8003274:	d005      	beq.n	8003282 <chEvtWaitAll.constprop.0+0x22>
    ctp->u.ewmask = events;
 8003276:	2305      	movs	r3, #5
 8003278:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800327a:	200b      	movs	r0, #11
 800327c:	f7ff ff10 	bl	80030a0 <chSchGoSleepS>
 8003280:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8003282:	f023 0305 	bic.w	r3, r3, #5
 8003286:	6363      	str	r3, [r4, #52]	; 0x34
 8003288:	2300      	movs	r3, #0
 800328a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800328e:	2005      	movs	r0, #5
 8003290:	bd10      	pop	{r4, pc}
 8003292:	bf00      	nop
 8003294:	200009b0 	.word	0x200009b0
	...

080032a0 <bmk_thread4>:
  return ch.rlist.current;
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 80032a2:	b510      	push	{r4, lr}
 80032a4:	2320      	movs	r3, #32
 80032a6:	6994      	ldr	r4, [r2, #24]
 80032a8:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 80032ac:	2003      	movs	r0, #3
 80032ae:	f7ff fef7 	bl	80030a0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 80032b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f9      	beq.n	80032ac <bmk_thread4+0xc>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f383 8811 	msr	BASEPRI, r3
}
 80032be:	bd10      	pop	{r4, pc}
 80032c0:	200009b0 	.word	0x200009b0
	...

080032d0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80032d0:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 80032d2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80032d4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80032d6:	d012      	beq.n	80032fe <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80032d8:	4d0c      	ldr	r5, [pc, #48]	; (800330c <chSchGoSleepTimeoutS+0x3c>)
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <chSchGoSleepTimeoutS+0x40>)
 80032dc:	69ab      	ldr	r3, [r5, #24]
 80032de:	4604      	mov	r4, r0
 80032e0:	a801      	add	r0, sp, #4
 80032e2:	f7fe fa3d 	bl	8001760 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff feda 	bl	80030a0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80032ec:	9b04      	ldr	r3, [sp, #16]
 80032ee:	b113      	cbz	r3, 80032f6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80032f0:	a801      	add	r0, sp, #4
 80032f2:	f7fe f9f5 	bl	80016e0 <chVTDoResetI>
  return currp->u.rdymsg;
 80032f6:	69ab      	ldr	r3, [r5, #24]
}
 80032f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80032fa:	b007      	add	sp, #28
 80032fc:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 80032fe:	4d03      	ldr	r5, [pc, #12]	; (800330c <chSchGoSleepTimeoutS+0x3c>)
 8003300:	f7ff fece 	bl	80030a0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8003304:	69ab      	ldr	r3, [r5, #24]
}
 8003306:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003308:	b007      	add	sp, #28
 800330a:	bd30      	pop	{r4, r5, pc}
 800330c:	200009b0 	.word	0x200009b0
 8003310:	08001391 	.word	0x08001391
	...

08003320 <chSemWaitTimeout.constprop.0>:
 8003320:	2320      	movs	r3, #32
 8003322:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <chSemWaitTimeout.constprop.0+0x48>)
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	1e4a      	subs	r2, r1, #1
 800332c:	2a00      	cmp	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	db04      	blt.n	800333c <chSemWaitTimeout.constprop.0+0x1c>
  return MSG_OK;
 8003332:	2000      	movs	r0, #0
 8003334:	2300      	movs	r3, #0
 8003336:	f383 8811 	msr	BASEPRI, r3
}
 800333a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 800333c:	b180      	cbz	r0, 8003360 <chSemWaitTimeout.constprop.0+0x40>
    currp->u.wtsemp = sp;
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <chSemWaitTimeout.constprop.0+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8003340:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8003342:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8003344:	685c      	ldr	r4, [r3, #4]
 8003346:	6253      	str	r3, [r2, #36]	; 0x24
 8003348:	e9c2 3400 	strd	r3, r4, [r2]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800334c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 800334e:	6022      	str	r2, [r4, #0]
 8003350:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	f7ff ffbc 	bl	80032d0 <chSchGoSleepTimeoutS>
 8003358:	2300      	movs	r3, #0
 800335a:	f383 8811 	msr	BASEPRI, r3
}
 800335e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8003360:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8003362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003366:	e7e5      	b.n	8003334 <chSemWaitTimeout.constprop.0+0x14>
 8003368:	20001578 	.word	0x20001578
 800336c:	200009b0 	.word	0x200009b0

08003370 <rt_test_009_006_execute>:
static void rt_test_009_006_execute(void) {
 8003370:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003372:	4d58      	ldr	r5, [pc, #352]	; (80034d4 <rt_test_009_006_execute+0x164>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003374:	4c58      	ldr	r4, [pc, #352]	; (80034d8 <rt_test_009_006_execute+0x168>)
 8003376:	2001      	movs	r0, #1
 8003378:	69a2      	ldr	r2, [r4, #24]
 800337a:	6028      	str	r0, [r5, #0]
 800337c:	2320      	movs	r3, #32
 800337e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003382:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003384:	b933      	cbnz	r3, 8003394 <rt_test_009_006_execute+0x24>
 8003386:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800338a:	4954      	ldr	r1, [pc, #336]	; (80034dc <rt_test_009_006_execute+0x16c>)
 800338c:	f7fd fc48 	bl	8000c20 <_test_assert>
 8003390:	b180      	cbz	r0, 80033b4 <rt_test_009_006_execute+0x44>
}
 8003392:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8003394:	4258      	negs	r0, r3
  ctp->epending &= ~m;
 8003396:	ea23 0100 	bic.w	r1, r3, r0
 800339a:	6351      	str	r1, [r2, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800339c:	4018      	ands	r0, r3
 800339e:	2300      	movs	r3, #0
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	fab0 f080 	clz	r0, r0
    test_assert(m == 0, "spurious event");
 80033a8:	494c      	ldr	r1, [pc, #304]	; (80034dc <rt_test_009_006_execute+0x16c>)
 80033aa:	0940      	lsrs	r0, r0, #5
 80033ac:	f7fd fc38 	bl	8000c20 <_test_assert>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d1ee      	bne.n	8003392 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80033b4:	69a3      	ldr	r3, [r4, #24]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 80033bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033be:	2a00      	cmp	r2, #0
 80033c0:	d167      	bne.n	8003492 <rt_test_009_006_execute+0x122>
 80033c2:	f380 8811 	msr	BASEPRI, r0
 80033c6:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 80033c8:	4944      	ldr	r1, [pc, #272]	; (80034dc <rt_test_009_006_execute+0x16c>)
 80033ca:	f7fd fc29 	bl	8000c20 <_test_assert>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d1df      	bne.n	8003392 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80033d2:	69a3      	ldr	r3, [r4, #24]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	3201      	adds	r2, #1
 80033de:	d05c      	beq.n	800349a <rt_test_009_006_execute+0x12a>
 80033e0:	f380 8811 	msr	BASEPRI, r0
 80033e4:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 80033e6:	493d      	ldr	r1, [pc, #244]	; (80034dc <rt_test_009_006_execute+0x16c>)
 80033e8:	f7fd fc1a 	bl	8000c20 <_test_assert>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d1d0      	bne.n	8003392 <rt_test_009_006_execute+0x22>
  test_set_step(2);
 80033f0:	2302      	movs	r3, #2
 80033f2:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 80033f4:	69a6      	ldr	r6, [r4, #24]
 80033f6:	2320      	movs	r3, #32
 80033f8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80033fc:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80033fe:	b955      	cbnz	r5, 8003416 <rt_test_009_006_execute+0xa6>
    ctp->u.ewmask = events;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003404:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003406:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800340a:	200a      	movs	r0, #10
 800340c:	f7ff ff60 	bl	80032d0 <chSchGoSleepTimeoutS>
 8003410:	2800      	cmp	r0, #0
 8003412:	db52      	blt.n	80034ba <rt_test_009_006_execute+0x14a>
    m = ctp->epending & events;
 8003414:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8003416:	4268      	negs	r0, r5
  ctp->epending &= ~m;
 8003418:	ea25 0300 	bic.w	r3, r5, r0
 800341c:	6373      	str	r3, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800341e:	4028      	ands	r0, r5
 8003420:	2300      	movs	r3, #0
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	fab0 f080 	clz	r0, r0
 800342a:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 800342c:	492b      	ldr	r1, [pc, #172]	; (80034dc <rt_test_009_006_execute+0x16c>)
 800342e:	f7fd fbf7 	bl	8000c20 <_test_assert>
 8003432:	2800      	cmp	r0, #0
 8003434:	d1ad      	bne.n	8003392 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 8003436:	69a6      	ldr	r6, [r4, #24]
 8003438:	2320      	movs	r3, #32
 800343a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800343e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003440:	b37d      	cbz	r5, 80034a2 <rt_test_009_006_execute+0x132>
  ctp->epending &= ~m;
 8003442:	2300      	movs	r3, #0
 8003444:	6373      	str	r3, [r6, #52]	; 0x34
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	fab5 f085 	clz	r0, r5
 800344e:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8003450:	4922      	ldr	r1, [pc, #136]	; (80034dc <rt_test_009_006_execute+0x16c>)
 8003452:	f7fd fbe5 	bl	8000c20 <_test_assert>
 8003456:	4605      	mov	r5, r0
 8003458:	2800      	cmp	r0, #0
 800345a:	d19a      	bne.n	8003392 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 800345c:	69a4      	ldr	r4, [r4, #24]
 800345e:	2320      	movs	r3, #32
 8003460:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8003464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003466:	3301      	adds	r3, #1
 8003468:	d009      	beq.n	800347e <rt_test_009_006_execute+0x10e>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800346e:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003470:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003474:	200b      	movs	r0, #11
 8003476:	f7ff ff2b 	bl	80032d0 <chSchGoSleepTimeoutS>
 800347a:	2800      	cmp	r0, #0
 800347c:	db25      	blt.n	80034ca <rt_test_009_006_execute+0x15a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 800347e:	2300      	movs	r3, #0
 8003480:	6363      	str	r3, [r4, #52]	; 0x34
 8003482:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8003486:	4628      	mov	r0, r5
 8003488:	4914      	ldr	r1, [pc, #80]	; (80034dc <rt_test_009_006_execute+0x16c>)
}
 800348a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 800348e:	f7fd bbc7 	b.w	8000c20 <_test_assert>
  ctp->epending &= ~m;
 8003492:	6358      	str	r0, [r3, #52]	; 0x34
 8003494:	f380 8811 	msr	BASEPRI, r0
 8003498:	e796      	b.n	80033c8 <rt_test_009_006_execute+0x58>
  ctp->epending &= ~events;
 800349a:	6358      	str	r0, [r3, #52]	; 0x34
 800349c:	f380 8811 	msr	BASEPRI, r0
 80034a0:	e7a1      	b.n	80033e6 <rt_test_009_006_execute+0x76>
    ctp->u.ewmask = events;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a6:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80034a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034ac:	200a      	movs	r0, #10
 80034ae:	f7ff ff0f 	bl	80032d0 <chSchGoSleepTimeoutS>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	db05      	blt.n	80034c2 <rt_test_009_006_execute+0x152>
    m = ctp->epending & events;
 80034b6:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80034b8:	e7c3      	b.n	8003442 <rt_test_009_006_execute+0xd2>
 80034ba:	f385 8811 	msr	BASEPRI, r5
 80034be:	2001      	movs	r0, #1
 80034c0:	e7b4      	b.n	800342c <rt_test_009_006_execute+0xbc>
 80034c2:	f385 8811 	msr	BASEPRI, r5
 80034c6:	2001      	movs	r0, #1
 80034c8:	e7c2      	b.n	8003450 <rt_test_009_006_execute+0xe0>
 80034ca:	f385 8811 	msr	BASEPRI, r5
 80034ce:	2501      	movs	r5, #1
 80034d0:	e7d9      	b.n	8003486 <rt_test_009_006_execute+0x116>
 80034d2:	bf00      	nop
 80034d4:	20001cac 	.word	0x20001cac
 80034d8:	200009b0 	.word	0x200009b0
 80034dc:	0800afd0 	.word	0x0800afd0

080034e0 <chGuardedPoolAllocTimeout>:
                                sysinterval_t timeout) {
 80034e0:	b510      	push	{r4, lr}
 80034e2:	2320      	movs	r3, #32
 80034e4:	4604      	mov	r4, r0
 80034e6:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80034ea:	6882      	ldr	r2, [r0, #8]
 80034ec:	1e53      	subs	r3, r2, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	6083      	str	r3, [r0, #8]
 80034f2:	db07      	blt.n	8003504 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 80034f4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 80034f6:	b1c8      	cbz	r0, 800352c <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 80034f8:	6803      	ldr	r3, [r0, #0]
 80034fa:	60e3      	str	r3, [r4, #12]
 80034fc:	2300      	movs	r3, #0
 80034fe:	f383 8811 	msr	BASEPRI, r3
}
 8003502:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8003504:	4608      	mov	r0, r1
 8003506:	b1d9      	cbz	r1, 8003540 <chGuardedPoolAllocTimeout+0x60>
    currp->u.wtsemp = sp;
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <chGuardedPoolAllocTimeout+0x64>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800350e:	6862      	ldr	r2, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003510:	2005      	movs	r0, #5
 8003512:	e9c3 4200 	strd	r4, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8003516:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003518:	6063      	str	r3, [r4, #4]
 800351a:	f7ff fed9 	bl	80032d0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800351e:	2800      	cmp	r0, #0
 8003520:	d0e8      	beq.n	80034f4 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 8003522:	2000      	movs	r0, #0
 8003524:	2300      	movs	r3, #0
 8003526:	f383 8811 	msr	BASEPRI, r3
}
 800352a:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 800352c:	69a3      	ldr	r3, [r4, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f7      	beq.n	8003522 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8003532:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8003536:	4798      	blx	r3
 8003538:	2300      	movs	r3, #0
 800353a:	f383 8811 	msr	BASEPRI, r3
}
 800353e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8003540:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 8003542:	e7db      	b.n	80034fc <chGuardedPoolAllocTimeout+0x1c>
 8003544:	200009b0 	.word	0x200009b0
	...

08003550 <oslib_test_007_003_execute>:

static void oslib_test_007_003_execute(void) {
 8003550:	b508      	push	{r3, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <oslib_test_007_003_execute+0x24>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003554:	4808      	ldr	r0, [pc, #32]	; (8003578 <oslib_test_007_003_execute+0x28>)
  test_set_step(1);
 8003556:	2201      	movs	r2, #1
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_set_step(1);
 800355c:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800355e:	f7ff ffbf 	bl	80034e0 <chGuardedPoolAllocTimeout>
 8003562:	fab0 f080 	clz	r0, r0
  }
  test_end_step(1);
}
 8003566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800356a:	4904      	ldr	r1, [pc, #16]	; (800357c <oslib_test_007_003_execute+0x2c>)
 800356c:	0940      	lsrs	r0, r0, #5
 800356e:	f7fd bb57 	b.w	8000c20 <_test_assert>
 8003572:	bf00      	nop
 8003574:	20001cac 	.word	0x20001cac
 8003578:	20000810 	.word	0x20000810
 800357c:	0800a0f8 	.word	0x0800a0f8

08003580 <oslib_test_007_002_execute>:
static void oslib_test_007_002_execute(void) {
 8003580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8003584:	4832      	ldr	r0, [pc, #200]	; (8003650 <oslib_test_007_002_execute+0xd0>)
  test_set_step(1);
 8003586:	4f33      	ldr	r7, [pc, #204]	; (8003654 <oslib_test_007_002_execute+0xd4>)
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8003588:	4933      	ldr	r1, [pc, #204]	; (8003658 <oslib_test_007_002_execute+0xd8>)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800358a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003660 <oslib_test_007_002_execute+0xe0>
  test_set_step(1);
 800358e:	2301      	movs	r3, #1
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8003590:	2204      	movs	r2, #4
 8003592:	4606      	mov	r6, r0
  test_set_step(1);
 8003594:	603b      	str	r3, [r7, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8003596:	f7ff fa93 	bl	8002ac0 <chGuardedPoolLoadArray>
  test_set_step(2);
 800359a:	2302      	movs	r3, #2
 800359c:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800359e:	4635      	mov	r5, r6
  test_set_step(2);
 80035a0:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80035a2:	2100      	movs	r1, #0
 80035a4:	4628      	mov	r0, r5
 80035a6:	f7ff ff9b 	bl	80034e0 <chGuardedPoolAllocTimeout>
 80035aa:	3800      	subs	r0, #0
 80035ac:	bf18      	it	ne
 80035ae:	2001      	movne	r0, #1
 80035b0:	4641      	mov	r1, r8
 80035b2:	f7fd fb35 	bl	8000c20 <_test_assert>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d148      	bne.n	800364c <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80035ba:	3c01      	subs	r4, #1
 80035bc:	d1f1      	bne.n	80035a2 <oslib_test_007_002_execute+0x22>
  test_set_step(3);
 80035be:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80035c0:	4621      	mov	r1, r4
 80035c2:	4823      	ldr	r0, [pc, #140]	; (8003650 <oslib_test_007_002_execute+0xd0>)
  test_set_step(3);
 80035c4:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80035c6:	f7ff ff8b 	bl	80034e0 <chGuardedPoolAllocTimeout>
 80035ca:	fab0 f080 	clz	r0, r0
 80035ce:	4923      	ldr	r1, [pc, #140]	; (800365c <oslib_test_007_002_execute+0xdc>)
 80035d0:	0940      	lsrs	r0, r0, #5
 80035d2:	f7fd fb25 	bl	8000c20 <_test_assert>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d138      	bne.n	800364c <oslib_test_007_002_execute+0xcc>
  test_set_step(4);
 80035da:	4d1f      	ldr	r5, [pc, #124]	; (8003658 <oslib_test_007_002_execute+0xd8>)
 80035dc:	f8df a070 	ldr.w	sl, [pc, #112]	; 8003650 <oslib_test_007_002_execute+0xd0>
 80035e0:	2304      	movs	r3, #4
 80035e2:	f105 0910 	add.w	r9, r5, #16
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	f04f 0820 	mov.w	r8, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 80035ec:	462b      	mov	r3, r5
 80035ee:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80035f2:	68f2      	ldr	r2, [r6, #12]
 80035f4:	f845 2b04 	str.w	r2, [r5], #4
 80035f8:	4650      	mov	r0, sl
  mp->next = php;
 80035fa:	60f3      	str	r3, [r6, #12]
 80035fc:	f7fe f820 	bl	8001640 <chSemSignalI>
  chSchRescheduleS();
 8003600:	f7ff f996 	bl	8002930 <chSchRescheduleS>
 8003604:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003608:	454d      	cmp	r5, r9
 800360a:	d1ef      	bne.n	80035ec <oslib_test_007_002_execute+0x6c>
  test_set_step(5);
 800360c:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800360e:	4e10      	ldr	r6, [pc, #64]	; (8003650 <oslib_test_007_002_execute+0xd0>)
 8003610:	4d13      	ldr	r5, [pc, #76]	; (8003660 <oslib_test_007_002_execute+0xe0>)
  test_set_step(5);
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003616:	2100      	movs	r1, #0
 8003618:	4630      	mov	r0, r6
 800361a:	f7ff ff61 	bl	80034e0 <chGuardedPoolAllocTimeout>
 800361e:	3800      	subs	r0, #0
 8003620:	bf18      	it	ne
 8003622:	2001      	movne	r0, #1
 8003624:	4629      	mov	r1, r5
 8003626:	f7fd fafb 	bl	8000c20 <_test_assert>
 800362a:	b978      	cbnz	r0, 800364c <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800362c:	3c01      	subs	r4, #1
 800362e:	d1f2      	bne.n	8003616 <oslib_test_007_002_execute+0x96>
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003630:	4621      	mov	r1, r4
  test_set_step(6);
 8003632:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003634:	4806      	ldr	r0, [pc, #24]	; (8003650 <oslib_test_007_002_execute+0xd0>)
  test_set_step(6);
 8003636:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003638:	f7ff ff52 	bl	80034e0 <chGuardedPoolAllocTimeout>
 800363c:	fab0 f080 	clz	r0, r0
}
 8003640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003644:	4905      	ldr	r1, [pc, #20]	; (800365c <oslib_test_007_002_execute+0xdc>)
 8003646:	0940      	lsrs	r0, r0, #5
 8003648:	f7fd baea 	b.w	8000c20 <_test_assert>
}
 800364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003650:	20000810 	.word	0x20000810
 8003654:	20001cac 	.word	0x20001cac
 8003658:	20001568 	.word	0x20001568
 800365c:	0800a0f8 	.word	0x0800a0f8
 8003660:	0800a0ec 	.word	0x0800a0ec
	...

08003670 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8003670:	b161      	cbz	r1, 800368c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8003672:	4a08      	ldr	r2, [pc, #32]	; (8003694 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003674:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8003676:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8003678:	6844      	ldr	r4, [r0, #4]
 800367a:	4603      	mov	r3, r0
 800367c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003680:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8003682:	6022      	str	r2, [r4, #0]
}
 8003684:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8003686:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003688:	f7ff be22 	b.w	80032d0 <chSchGoSleepTimeoutS>
}
 800368c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	200009b0 	.word	0x200009b0
	...

080036a0 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80036a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a4:	2320      	movs	r3, #32
 80036a6:	4606      	mov	r6, r0
 80036a8:	460d      	mov	r5, r1
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	4c17      	ldr	r4, [pc, #92]	; (800370c <chMBPostAheadTimeout.constprop.0+0x6c>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80036b0:	f104 0818 	add.w	r8, r4, #24
 80036b4:	e00a      	b.n	80036cc <chMBPostAheadTimeout.constprop.0+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80036b6:	e9d4 2700 	ldrd	r2, r7, [r4]
 80036ba:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80036bc:	eba7 0c02 	sub.w	ip, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80036c0:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 80036c4:	d10e      	bne.n	80036e4 <chMBPostAheadTimeout.constprop.0+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80036c6:	f7ff ffd3 	bl	8003670 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 80036ca:	b930      	cbnz	r0, 80036da <chMBPostAheadTimeout.constprop.0+0x3a>
    if (mbp->reset) {
 80036cc:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80036ce:	4629      	mov	r1, r5
 80036d0:	4640      	mov	r0, r8
    if (mbp->reset) {
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ef      	beq.n	80036b6 <chMBPostAheadTimeout.constprop.0+0x16>
      return MSG_RESET;
 80036d6:	f06f 0001 	mvn.w	r0, #1
 80036da:	2300      	movs	r3, #0
 80036dc:	f383 8811 	msr	BASEPRI, r3
}
 80036e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 80036e4:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80036e6:	480a      	ldr	r0, [pc, #40]	; (8003710 <chMBPostAheadTimeout.constprop.0+0x70>)
      if (--mbp->rdptr < mbp->buffer) {
 80036e8:	3904      	subs	r1, #4
 80036ea:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 80036ec:	bf88      	it	hi
 80036ee:	1f39      	subhi	r1, r7, #4
 80036f0:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 80036f2:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 80036f4:	600e      	str	r6, [r1, #0]
      mbp->cnt++;
 80036f6:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80036f8:	f7fd fe9a 	bl	8001430 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 80036fc:	f7ff f918 	bl	8002930 <chSchRescheduleS>
      return MSG_OK;
 8003700:	2000      	movs	r0, #0
 8003702:	2300      	movs	r3, #0
 8003704:	f383 8811 	msr	BASEPRI, r3
}
 8003708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800370c:	2000084c 	.word	0x2000084c
 8003710:	2000086c 	.word	0x2000086c
	...

08003720 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	4604      	mov	r4, r0
 8003724:	460e      	mov	r6, r1
 8003726:	4615      	mov	r5, r2
 8003728:	2320      	movs	r3, #32
 800372a:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800372e:	18c7      	adds	r7, r0, r3
 8003730:	e004      	b.n	800373c <chMBFetchTimeout+0x1c>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	b96b      	cbnz	r3, 8003752 <chMBFetchTimeout+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003736:	f7ff ff9b 	bl	8003670 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800373a:	b930      	cbnz	r0, 800374a <chMBFetchTimeout+0x2a>
    if (mbp->reset) {
 800373c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800373e:	4629      	mov	r1, r5
 8003740:	4638      	mov	r0, r7
    if (mbp->reset) {
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f5      	beq.n	8003732 <chMBFetchTimeout+0x12>
      return MSG_RESET;
 8003746:	f06f 0001 	mvn.w	r0, #1
 800374a:	2300      	movs	r3, #0
 800374c:	f383 8811 	msr	BASEPRI, r3
}
 8003750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8003752:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8003754:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8003756:	6810      	ldr	r0, [r2, #0]
 8003758:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 800375a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 800375c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 800375e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        mbp->rdptr = mbp->buffer;
 8003762:	bf28      	it	cs
 8003764:	6822      	ldrcs	r2, [r4, #0]
      *msgp = *mbp->rdptr++;
 8003766:	6030      	str	r0, [r6, #0]
        mbp->rdptr = mbp->buffer;
 8003768:	bf28      	it	cs
 800376a:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800376c:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800376e:	f104 0018 	add.w	r0, r4, #24
 8003772:	f7fd fe5d 	bl	8001430 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8003776:	f7ff f8db 	bl	8002930 <chSchRescheduleS>
      return MSG_OK;
 800377a:	2000      	movs	r0, #0
 800377c:	2300      	movs	r3, #0
 800377e:	f383 8811 	msr	BASEPRI, r3
}
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003790 <Thread1.lto_priv.0>:
  chThdSleepMilliseconds(10);
}

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8003790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003794:	4e11      	ldr	r6, [pc, #68]	; (80037dc <Thread1.lto_priv.0+0x4c>)
 8003796:	b082      	sub	sp, #8
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 8003798:	f106 071c 	add.w	r7, r6, #28
 800379c:	46b0      	mov	r8, r6
 800379e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a2:	a901      	add	r1, sp, #4
 80037a4:	4638      	mov	r0, r7
 80037a6:	f7ff ffbb 	bl	8003720 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 80037aa:	4604      	mov	r4, r0
 80037ac:	b110      	cbz	r0, 80037b4 <Thread1.lto_priv.0+0x24>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 80037ae:	b002      	add	sp, #8
 80037b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 80037b4:	9d01      	ldr	r5, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f8      	beq.n	80037ae <Thread1.lto_priv.0+0x1e>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 80037bc:	6868      	ldr	r0, [r5, #4]
 80037be:	4798      	blx	r3
 80037c0:	2320      	movs	r3, #32
 80037c2:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80037c6:	68f3      	ldr	r3, [r6, #12]
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	4640      	mov	r0, r8
  mp->next = php;
 80037cc:	60f5      	str	r5, [r6, #12]
 80037ce:	f7fd ff37 	bl	8001640 <chSemSignalI>
  chSchRescheduleS();
 80037d2:	f7ff f8ad 	bl	8002930 <chSchRescheduleS>
 80037d6:	f384 8811 	msr	BASEPRI, r4
  } while (msg == MSG_OK);
 80037da:	e7e0      	b.n	800379e <Thread1.lto_priv.0+0xe>
 80037dc:	200013f4 	.word	0x200013f4

080037e0 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80037e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e4:	2320      	movs	r3, #32
 80037e6:	4604      	mov	r4, r0
 80037e8:	460e      	mov	r6, r1
 80037ea:	4615      	mov	r5, r2
 80037ec:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80037f0:	f100 0818 	add.w	r8, r0, #24
 80037f4:	e00a      	b.n	800380c <chMBPostTimeout+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80037f6:	e9d4 7200 	ldrd	r7, r2, [r4]
 80037fa:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80037fc:	eba2 0c07 	sub.w	ip, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003800:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8003804:	d10e      	bne.n	8003824 <chMBPostTimeout+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003806:	f7ff ff33 	bl	8003670 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800380a:	b930      	cbnz	r0, 800381a <chMBPostTimeout+0x3a>
    if (mbp->reset) {
 800380c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800380e:	4629      	mov	r1, r5
 8003810:	4640      	mov	r0, r8
    if (mbp->reset) {
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ef      	beq.n	80037f6 <chMBPostTimeout+0x16>
      return MSG_RESET;
 8003816:	f06f 0001 	mvn.w	r0, #1
 800381a:	2300      	movs	r3, #0
 800381c:	f383 8811 	msr	BASEPRI, r3
}
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8003824:	68a0      	ldr	r0, [r4, #8]
 8003826:	1d01      	adds	r1, r0, #4
      if (mbp->wrptr >= mbp->top) {
 8003828:	428a      	cmp	r2, r1
      mbp->cnt++;
 800382a:	f103 0301 	add.w	r3, r3, #1
      *mbp->wrptr++ = msg;
 800382e:	60a1      	str	r1, [r4, #8]
 8003830:	6006      	str	r6, [r0, #0]
        mbp->wrptr = mbp->buffer;
 8003832:	bf98      	it	ls
 8003834:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 8003836:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003838:	f104 0020 	add.w	r0, r4, #32
 800383c:	f7fd fdf8 	bl	8001430 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8003840:	f7ff f876 	bl	8002930 <chSchRescheduleS>
      return MSG_OK;
 8003844:	2000      	movs	r0, #0
 8003846:	2300      	movs	r3, #0
 8003848:	f383 8811 	msr	BASEPRI, r3
}
 800384c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003850 <oslib_test_002_003_execute>:
}

static void oslib_test_002_003_execute(void) {
 8003850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8003854:	4f43      	ldr	r7, [pc, #268]	; (8003964 <oslib_test_002_003_execute+0x114>)
 8003856:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800396c <oslib_test_002_003_execute+0x11c>
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800385a:	4e43      	ldr	r6, [pc, #268]	; (8003968 <oslib_test_002_003_execute+0x118>)
  test_set_step(1);
 800385c:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800385e:	b082      	sub	sp, #8
  test_set_step(1);
 8003860:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003862:	4645      	mov	r5, r8
  test_set_step(1);
 8003864:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003866:	4621      	mov	r1, r4
 8003868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800386c:	4628      	mov	r0, r5
 800386e:	f7ff ffb7 	bl	80037e0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003872:	fab0 f080 	clz	r0, r0
 8003876:	4631      	mov	r1, r6
 8003878:	0940      	lsrs	r0, r0, #5
 800387a:	3401      	adds	r4, #1
 800387c:	f7fd f9d0 	bl	8000c20 <_test_assert>
 8003880:	b990      	cbnz	r0, 80038a8 <oslib_test_002_003_execute+0x58>
    for (i = 0; i < MB_SIZE; i++) {
 8003882:	2c46      	cmp	r4, #70	; 0x46
 8003884:	d1ef      	bne.n	8003866 <oslib_test_002_003_execute+0x16>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8003886:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003888:	2201      	movs	r2, #1
 800388a:	2158      	movs	r1, #88	; 0x58
 800388c:	4837      	ldr	r0, [pc, #220]	; (800396c <oslib_test_002_003_execute+0x11c>)
  test_set_step(2);
 800388e:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003890:	f7ff ffa6 	bl	80037e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003894:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003898:	fab0 f080 	clz	r0, r0
 800389c:	4932      	ldr	r1, [pc, #200]	; (8003968 <oslib_test_002_003_execute+0x118>)
 800389e:	0940      	lsrs	r0, r0, #5
 80038a0:	f7fd f9be 	bl	8000c20 <_test_assert>
 80038a4:	4604      	mov	r4, r0
 80038a6:	b110      	cbz	r0, 80038ae <oslib_test_002_003_execute+0x5e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 80038a8:	b002      	add	sp, #8
 80038aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ae:	2520      	movs	r5, #32
 80038b0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 80038b4:	2058      	movs	r0, #88	; 0x58
 80038b6:	f7fd fdcb 	bl	8001450 <chMBPostI.constprop.0>
 80038ba:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80038be:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80038c2:	fab0 f080 	clz	r0, r0
 80038c6:	4928      	ldr	r1, [pc, #160]	; (8003968 <oslib_test_002_003_execute+0x118>)
 80038c8:	0940      	lsrs	r0, r0, #5
 80038ca:	f7fd f9a9 	bl	8000c20 <_test_assert>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1ea      	bne.n	80038a8 <oslib_test_002_003_execute+0x58>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80038d2:	2101      	movs	r1, #1
 80038d4:	2058      	movs	r0, #88	; 0x58
 80038d6:	f7ff fee3 	bl	80036a0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80038da:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80038de:	fab0 f080 	clz	r0, r0
 80038e2:	4921      	ldr	r1, [pc, #132]	; (8003968 <oslib_test_002_003_execute+0x118>)
 80038e4:	0940      	lsrs	r0, r0, #5
 80038e6:	f7fd f99b 	bl	8000c20 <_test_assert>
 80038ea:	4604      	mov	r4, r0
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1db      	bne.n	80038a8 <oslib_test_002_003_execute+0x58>
 80038f0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 80038f4:	2058      	movs	r0, #88	; 0x58
 80038f6:	f7fd fdd3 	bl	80014a0 <chMBPostAheadI.constprop.0>
 80038fa:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80038fe:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003902:	fab0 f080 	clz	r0, r0
 8003906:	4918      	ldr	r1, [pc, #96]	; (8003968 <oslib_test_002_003_execute+0x118>)
 8003908:	0940      	lsrs	r0, r0, #5
 800390a:	f7fd f989 	bl	8000c20 <_test_assert>
 800390e:	4604      	mov	r4, r0
 8003910:	2800      	cmp	r0, #0
 8003912:	d1c9      	bne.n	80038a8 <oslib_test_002_003_execute+0x58>
  test_set_step(3);
 8003914:	2303      	movs	r3, #3
 8003916:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8003918:	f7ff f842 	bl	80029a0 <chMBReset.constprop.0>
  test_set_step(4);
 800391c:	2304      	movs	r3, #4
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800391e:	a901      	add	r1, sp, #4
 8003920:	2201      	movs	r2, #1
 8003922:	4812      	ldr	r0, [pc, #72]	; (800396c <oslib_test_002_003_execute+0x11c>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8003924:	f888 4014 	strb.w	r4, [r8, #20]
  test_set_step(4);
 8003928:	603b      	str	r3, [r7, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800392a:	f7ff fef9 	bl	8003720 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800392e:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003932:	fab0 f080 	clz	r0, r0
 8003936:	490c      	ldr	r1, [pc, #48]	; (8003968 <oslib_test_002_003_execute+0x118>)
 8003938:	0940      	lsrs	r0, r0, #5
 800393a:	f7fd f971 	bl	8000c20 <_test_assert>
 800393e:	4604      	mov	r4, r0
 8003940:	2800      	cmp	r0, #0
 8003942:	d1b1      	bne.n	80038a8 <oslib_test_002_003_execute+0x58>
 8003944:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8003948:	a801      	add	r0, sp, #4
 800394a:	f7fd fdd1 	bl	80014f0 <chMBFetchI.constprop.0>
 800394e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003952:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003956:	fab0 f080 	clz	r0, r0
 800395a:	4903      	ldr	r1, [pc, #12]	; (8003968 <oslib_test_002_003_execute+0x118>)
 800395c:	0940      	lsrs	r0, r0, #5
 800395e:	f7fd f95f 	bl	8000c20 <_test_assert>
 8003962:	e7a1      	b.n	80038a8 <oslib_test_002_003_execute+0x58>
 8003964:	20001cac 	.word	0x20001cac
 8003968:	0800afe0 	.word	0x0800afe0
 800396c:	2000084c 	.word	0x2000084c

08003970 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8003970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8003974:	4faf      	ldr	r7, [pc, #700]	; (8003c34 <oslib_test_002_002_execute+0x2c4>)
 8003976:	f04f 0801 	mov.w	r8, #1
static void oslib_test_002_002_execute(void) {
 800397a:	b082      	sub	sp, #8
  test_set_step(1);
 800397c:	f8c7 8000 	str.w	r8, [r7]
 8003980:	2620      	movs	r6, #32
 8003982:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003986:	4cac      	ldr	r4, [pc, #688]	; (8003c38 <oslib_test_002_002_execute+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003988:	49ac      	ldr	r1, [pc, #688]	; (8003c3c <oslib_test_002_002_execute+0x2cc>)
 800398a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800398c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003990:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003992:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003996:	f1a0 0004 	sub.w	r0, r0, #4
 800399a:	fab0 f080 	clz	r0, r0
 800399e:	0940      	lsrs	r0, r0, #5
 80039a0:	f7fd f93e 	bl	8000c20 <_test_assert>
 80039a4:	b128      	cbz	r0, 80039b2 <oslib_test_002_002_execute+0x42>
 80039a6:	2300      	movs	r3, #0
 80039a8:	f383 8811 	msr	BASEPRI, r3
}
 80039ac:	b002      	add	sp, #8
 80039ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b2:	4605      	mov	r5, r0
 80039b4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80039b8:	2302      	movs	r3, #2
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80039c0:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 80039c2:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80039c4:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 80039c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 80039cc:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80039d0:	f7fd fdb6 	bl	8001540 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80039d4:	f104 0020 	add.w	r0, r4, #32
 80039d8:	f7fd fdb2 	bl	8001540 <chThdDequeueAllI.constprop.0>
 80039dc:	f385 8811 	msr	BASEPRI, r5
 80039e0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80039e4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80039e8:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80039ea:	4995      	ldr	r1, [pc, #596]	; (8003c40 <oslib_test_002_002_execute+0x2d0>)
  return (size_t)(mbp->top - mbp->buffer);
 80039ec:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80039ee:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80039f2:	f1a0 0004 	sub.w	r0, r0, #4
 80039f6:	fab0 f080 	clz	r0, r0
 80039fa:	0940      	lsrs	r0, r0, #5
 80039fc:	f7fd f910 	bl	8000c20 <_test_assert>
 8003a00:	4680      	mov	r8, r0
 8003a02:	b988      	cbnz	r0, 8003a28 <oslib_test_002_002_execute+0xb8>
 8003a04:	f380 8811 	msr	BASEPRI, r0
 8003a08:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003a0c:	6920      	ldr	r0, [r4, #16]
 8003a0e:	498d      	ldr	r1, [pc, #564]	; (8003c44 <oslib_test_002_002_execute+0x2d4>)
 8003a10:	fab0 f080 	clz	r0, r0
 8003a14:	0940      	lsrs	r0, r0, #5
 8003a16:	f7fd f903 	bl	8000c20 <_test_assert>
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	b148      	cbz	r0, 8003a32 <oslib_test_002_002_execute+0xc2>
 8003a1e:	f388 8811 	msr	BASEPRI, r8
}
 8003a22:	b002      	add	sp, #8
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	f385 8811 	msr	BASEPRI, r5
 8003a2c:	b002      	add	sp, #8
 8003a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a32:	f380 8811 	msr	BASEPRI, r0
 8003a36:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	68a3      	ldr	r3, [r4, #8]
 8003a3e:	4982      	ldr	r1, [pc, #520]	; (8003c48 <oslib_test_002_002_execute+0x2d8>)
 8003a40:	1ac0      	subs	r0, r0, r3
 8003a42:	fab0 f080 	clz	r0, r0
 8003a46:	0940      	lsrs	r0, r0, #5
 8003a48:	f7fd f8ea 	bl	8000c20 <_test_assert>
 8003a4c:	4680      	mov	r8, r0
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d1ea      	bne.n	8003a28 <oslib_test_002_002_execute+0xb8>
 8003a52:	f380 8811 	msr	BASEPRI, r0
 8003a56:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	68e3      	ldr	r3, [r4, #12]
 8003a5e:	497b      	ldr	r1, [pc, #492]	; (8003c4c <oslib_test_002_002_execute+0x2dc>)
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	fab0 f080 	clz	r0, r0
 8003a66:	0940      	lsrs	r0, r0, #5
 8003a68:	f7fd f8da 	bl	8000c20 <_test_assert>
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d1d5      	bne.n	8003a1e <oslib_test_002_002_execute+0xae>
 8003a72:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8003a76:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a78:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8003c50 <oslib_test_002_002_execute+0x2e0>
  mbp->reset = false;
 8003a7c:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	f04f 0942 	mov.w	r9, #66	; 0x42
 8003a84:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8003a88:	4648      	mov	r0, r9
 8003a8a:	f7fd fce1 	bl	8001450 <chMBPostI.constprop.0>
 8003a8e:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a92:	fab0 f080 	clz	r0, r0
 8003a96:	0940      	lsrs	r0, r0, #5
 8003a98:	4651      	mov	r1, sl
 8003a9a:	f7fd f8c1 	bl	8000c20 <_test_assert>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8003a9e:	f109 0901 	add.w	r9, r9, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d181      	bne.n	80039ac <oslib_test_002_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8003aa8:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8003aac:	d1ea      	bne.n	8003a84 <oslib_test_002_002_execute+0x114>
 8003aae:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 8003ab2:	2041      	movs	r0, #65	; 0x41
 8003ab4:	f7fd fcf4 	bl	80014a0 <chMBPostAheadI.constprop.0>
 8003ab8:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003abc:	fab0 f080 	clz	r0, r0
 8003ac0:	4963      	ldr	r1, [pc, #396]	; (8003c50 <oslib_test_002_002_execute+0x2e0>)
 8003ac2:	0940      	lsrs	r0, r0, #5
 8003ac4:	f7fd f8ac 	bl	8000c20 <_test_assert>
 8003ac8:	4605      	mov	r5, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	f47f af6e 	bne.w	80039ac <oslib_test_002_002_execute+0x3c>
  test_set_step(4);
 8003ad0:	f04f 0904 	mov.w	r9, #4
 8003ad4:	f8c7 9000 	str.w	r9, [r7]
 8003ad8:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003adc:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003ae0:	6922      	ldr	r2, [r4, #16]
 8003ae2:	1a5b      	subs	r3, r3, r1
 8003ae4:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8003ae8:	495a      	ldr	r1, [pc, #360]	; (8003c54 <oslib_test_002_002_execute+0x2e4>)
 8003aea:	bf0c      	ite	eq
 8003aec:	2001      	moveq	r0, #1
 8003aee:	2000      	movne	r0, #0
 8003af0:	f7fd f896 	bl	8000c20 <_test_assert>
 8003af4:	4680      	mov	r8, r0
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d196      	bne.n	8003a28 <oslib_test_002_002_execute+0xb8>
 8003afa:	f380 8811 	msr	BASEPRI, r0
 8003afe:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003b02:	6920      	ldr	r0, [r4, #16]
 8003b04:	4954      	ldr	r1, [pc, #336]	; (8003c58 <oslib_test_002_002_execute+0x2e8>)
 8003b06:	f1a0 0004 	sub.w	r0, r0, #4
 8003b0a:	fab0 f080 	clz	r0, r0
 8003b0e:	0940      	lsrs	r0, r0, #5
 8003b10:	f7fd f886 	bl	8000c20 <_test_assert>
 8003b14:	4605      	mov	r5, r0
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d181      	bne.n	8003a1e <oslib_test_002_002_execute+0xae>
 8003b1a:	f380 8811 	msr	BASEPRI, r0
 8003b1e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8003b22:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8003b26:	1ac0      	subs	r0, r0, r3
 8003b28:	fab0 f080 	clz	r0, r0
 8003b2c:	494b      	ldr	r1, [pc, #300]	; (8003c5c <oslib_test_002_002_execute+0x2ec>)
 8003b2e:	0940      	lsrs	r0, r0, #5
 8003b30:	f7fd f876 	bl	8000c20 <_test_assert>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	f47f af77 	bne.w	8003a28 <oslib_test_002_002_execute+0xb8>
 8003b3a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8003b3e:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003b40:	4e43      	ldr	r6, [pc, #268]	; (8003c50 <oslib_test_002_002_execute+0x2e0>)
  test_set_step(5);
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4605      	mov	r5, r0
 8003b46:	f04f 0820 	mov.w	r8, #32
 8003b4a:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 8003b4e:	a801      	add	r0, sp, #4
 8003b50:	f7fd fcce 	bl	80014f0 <chMBFetchI.constprop.0>
 8003b54:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003b58:	fab0 f080 	clz	r0, r0
 8003b5c:	0940      	lsrs	r0, r0, #5
 8003b5e:	4631      	mov	r1, r6
 8003b60:	f7fd f85e 	bl	8000c20 <_test_assert>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	f47f af21 	bne.w	80039ac <oslib_test_002_002_execute+0x3c>
      test_emit_token(msg2);
 8003b6a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003b6e:	f7fd f8ff 	bl	8000d70 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8003b72:	f1b9 0901 	subs.w	r9, r9, #1
 8003b76:	d1e8      	bne.n	8003b4a <oslib_test_002_002_execute+0x1da>
    test_assert_sequence("ABCD", "wrong get sequence");
 8003b78:	4939      	ldr	r1, [pc, #228]	; (8003c60 <oslib_test_002_002_execute+0x2f0>)
 8003b7a:	483a      	ldr	r0, [pc, #232]	; (8003c64 <oslib_test_002_002_execute+0x2f4>)
 8003b7c:	f7fd f9d0 	bl	8000f20 <_test_assert_sequence>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	f47f af13 	bne.w	80039ac <oslib_test_002_002_execute+0x3c>
  test_set_step(6);
 8003b86:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003b88:	2146      	movs	r1, #70	; 0x46
 8003b8a:	482b      	ldr	r0, [pc, #172]	; (8003c38 <oslib_test_002_002_execute+0x2c8>)
  test_set_step(6);
 8003b8c:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b92:	f7ff fe25 	bl	80037e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003b96:	fab0 f080 	clz	r0, r0
 8003b9a:	492d      	ldr	r1, [pc, #180]	; (8003c50 <oslib_test_002_002_execute+0x2e0>)
 8003b9c:	0940      	lsrs	r0, r0, #5
 8003b9e:	f7fd f83f 	bl	8000c20 <_test_assert>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f47f af02 	bne.w	80039ac <oslib_test_002_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003ba8:	a901      	add	r1, sp, #4
 8003baa:	4823      	ldr	r0, [pc, #140]	; (8003c38 <oslib_test_002_002_execute+0x2c8>)
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb0:	f7ff fdb6 	bl	8003720 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003bb4:	fab0 f080 	clz	r0, r0
 8003bb8:	4925      	ldr	r1, [pc, #148]	; (8003c50 <oslib_test_002_002_execute+0x2e0>)
 8003bba:	0940      	lsrs	r0, r0, #5
 8003bbc:	f7fd f830 	bl	8000c20 <_test_assert>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	f47f aef3 	bne.w	80039ac <oslib_test_002_002_execute+0x3c>
  test_set_step(7);
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	f388 8811 	msr	BASEPRI, r8
 8003bce:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003bd2:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003bd4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003bd6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003bda:	1f19      	subs	r1, r3, #4
 8003bdc:	4248      	negs	r0, r1
 8003bde:	4148      	adcs	r0, r1
 8003be0:	4917      	ldr	r1, [pc, #92]	; (8003c40 <oslib_test_002_002_execute+0x2d0>)
 8003be2:	f7fd f81d 	bl	8000c20 <_test_assert>
 8003be6:	bb08      	cbnz	r0, 8003c2c <oslib_test_002_002_execute+0x2bc>
 8003be8:	f389 8811 	msr	BASEPRI, r9
 8003bec:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003bf0:	6920      	ldr	r0, [r4, #16]
 8003bf2:	4914      	ldr	r1, [pc, #80]	; (8003c44 <oslib_test_002_002_execute+0x2d4>)
 8003bf4:	fab0 f080 	clz	r0, r0
 8003bf8:	0940      	lsrs	r0, r0, #5
 8003bfa:	f7fd f811 	bl	8000c20 <_test_assert>
 8003bfe:	b9a8      	cbnz	r0, 8003c2c <oslib_test_002_002_execute+0x2bc>
 8003c00:	f389 8811 	msr	BASEPRI, r9
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	490f      	ldr	r1, [pc, #60]	; (8003c48 <oslib_test_002_002_execute+0x2d8>)
 8003c0a:	1ac2      	subs	r2, r0, r3
 8003c0c:	4250      	negs	r0, r2
 8003c0e:	4150      	adcs	r0, r2
 8003c10:	f7fd f806 	bl	8000c20 <_test_assert>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	f47f aec9 	bne.w	80039ac <oslib_test_002_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003c1a:	6820      	ldr	r0, [r4, #0]
 8003c1c:	68e3      	ldr	r3, [r4, #12]
 8003c1e:	490b      	ldr	r1, [pc, #44]	; (8003c4c <oslib_test_002_002_execute+0x2dc>)
 8003c20:	1ac3      	subs	r3, r0, r3
 8003c22:	4258      	negs	r0, r3
 8003c24:	4158      	adcs	r0, r3
 8003c26:	f7fc fffb 	bl	8000c20 <_test_assert>
 8003c2a:	e6bf      	b.n	80039ac <oslib_test_002_002_execute+0x3c>
 8003c2c:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003c30:	e6bc      	b.n	80039ac <oslib_test_002_002_execute+0x3c>
 8003c32:	bf00      	nop
 8003c34:	20001cac 	.word	0x20001cac
 8003c38:	2000084c 	.word	0x2000084c
 8003c3c:	0800aff8 	.word	0x0800aff8
 8003c40:	0800b004 	.word	0x0800b004
 8003c44:	0800b010 	.word	0x0800b010
 8003c48:	0800b01c 	.word	0x0800b01c
 8003c4c:	0800b040 	.word	0x0800b040
 8003c50:	0800afe0 	.word	0x0800afe0
 8003c54:	0800b064 	.word	0x0800b064
 8003c58:	0800b070 	.word	0x0800b070
 8003c5c:	0800b07c 	.word	0x0800b07c
 8003c60:	0800b094 	.word	0x0800b094
 8003c64:	0800b0a8 	.word	0x0800b0a8
	...

08003c70 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8003c74:	4fbb      	ldr	r7, [pc, #748]	; (8003f64 <oslib_test_002_001_execute+0x2f4>)
 8003c76:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8003c78:	b082      	sub	sp, #8
  test_set_step(1);
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	2620      	movs	r6, #32
 8003c7e:	f386 8811 	msr	BASEPRI, r6
 8003c82:	4cb9      	ldr	r4, [pc, #740]	; (8003f68 <oslib_test_002_001_execute+0x2f8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003c84:	49b9      	ldr	r1, [pc, #740]	; (8003f6c <oslib_test_002_001_execute+0x2fc>)
 8003c86:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003c88:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003c8c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003c8e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003c92:	f1a0 0004 	sub.w	r0, r0, #4
 8003c96:	fab0 f080 	clz	r0, r0
 8003c9a:	0940      	lsrs	r0, r0, #5
 8003c9c:	f7fc ffc0 	bl	8000c20 <_test_assert>
 8003ca0:	b128      	cbz	r0, 8003cae <oslib_test_002_001_execute+0x3e>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f383 8811 	msr	BASEPRI, r3
}
 8003ca8:	b002      	add	sp, #8
 8003caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cae:	4605      	mov	r5, r0
 8003cb0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8003cb8:	f7fe fe72 	bl	80029a0 <chMBReset.constprop.0>
 8003cbc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003cc0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003cc4:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003cc6:	49aa      	ldr	r1, [pc, #680]	; (8003f70 <oslib_test_002_001_execute+0x300>)
  return (size_t)(mbp->top - mbp->buffer);
 8003cc8:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003cca:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003cce:	f1a0 0004 	sub.w	r0, r0, #4
 8003cd2:	fab0 f080 	clz	r0, r0
 8003cd6:	0940      	lsrs	r0, r0, #5
 8003cd8:	f7fc ffa2 	bl	8000c20 <_test_assert>
 8003cdc:	4680      	mov	r8, r0
 8003cde:	b988      	cbnz	r0, 8003d04 <oslib_test_002_001_execute+0x94>
 8003ce0:	f380 8811 	msr	BASEPRI, r0
 8003ce4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003ce8:	6920      	ldr	r0, [r4, #16]
 8003cea:	49a2      	ldr	r1, [pc, #648]	; (8003f74 <oslib_test_002_001_execute+0x304>)
 8003cec:	fab0 f080 	clz	r0, r0
 8003cf0:	0940      	lsrs	r0, r0, #5
 8003cf2:	f7fc ff95 	bl	8000c20 <_test_assert>
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	b148      	cbz	r0, 8003d0e <oslib_test_002_001_execute+0x9e>
 8003cfa:	f388 8811 	msr	BASEPRI, r8
}
 8003cfe:	b002      	add	sp, #8
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d04:	f385 8811 	msr	BASEPRI, r5
 8003d08:	b002      	add	sp, #8
 8003d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0e:	f380 8811 	msr	BASEPRI, r0
 8003d12:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003d16:	6820      	ldr	r0, [r4, #0]
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	4997      	ldr	r1, [pc, #604]	; (8003f78 <oslib_test_002_001_execute+0x308>)
 8003d1c:	1ac0      	subs	r0, r0, r3
 8003d1e:	fab0 f080 	clz	r0, r0
 8003d22:	0940      	lsrs	r0, r0, #5
 8003d24:	f7fc ff7c 	bl	8000c20 <_test_assert>
 8003d28:	4680      	mov	r8, r0
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d1ea      	bne.n	8003d04 <oslib_test_002_001_execute+0x94>
 8003d2e:	f380 8811 	msr	BASEPRI, r0
 8003d32:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	68e3      	ldr	r3, [r4, #12]
 8003d3a:	4990      	ldr	r1, [pc, #576]	; (8003f7c <oslib_test_002_001_execute+0x30c>)
 8003d3c:	1ac0      	subs	r0, r0, r3
 8003d3e:	fab0 f080 	clz	r0, r0
 8003d42:	0940      	lsrs	r0, r0, #5
 8003d44:	f7fc ff6c 	bl	8000c20 <_test_assert>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d1d6      	bne.n	8003cfa <oslib_test_002_001_execute+0x8a>
 8003d4c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8003d50:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8003d52:	4601      	mov	r1, r0
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d58:	4620      	mov	r0, r4
  test_set_step(3);
 8003d5a:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8003d5c:	f7ff fd40 	bl	80037e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8003d60:	1c81      	adds	r1, r0, #2
 8003d62:	bf14      	ite	ne
 8003d64:	2000      	movne	r0, #0
 8003d66:	2001      	moveq	r0, #1
 8003d68:	4985      	ldr	r1, [pc, #532]	; (8003f80 <oslib_test_002_001_execute+0x310>)
 8003d6a:	f7fc ff59 	bl	8000c20 <_test_assert>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d19a      	bne.n	8003ca8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8003d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d76:	f7ff fc93 	bl	80036a0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8003d7a:	1c82      	adds	r2, r0, #2
 8003d7c:	bf14      	ite	ne
 8003d7e:	2000      	movne	r0, #0
 8003d80:	2001      	moveq	r0, #1
 8003d82:	497f      	ldr	r1, [pc, #508]	; (8003f80 <oslib_test_002_001_execute+0x310>)
 8003d84:	f7fc ff4c 	bl	8000c20 <_test_assert>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d18d      	bne.n	8003ca8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003d8c:	a901      	add	r1, sp, #4
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff fcc4 	bl	8003720 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8003d98:	1c83      	adds	r3, r0, #2
 8003d9a:	bf14      	ite	ne
 8003d9c:	2000      	movne	r0, #0
 8003d9e:	2001      	moveq	r0, #1
 8003da0:	4977      	ldr	r1, [pc, #476]	; (8003f80 <oslib_test_002_001_execute+0x310>)
 8003da2:	f7fc ff3d 	bl	8000c20 <_test_assert>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	f47f af7e 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
  test_set_step(4);
 8003dac:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003dae:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8003f84 <oslib_test_002_001_execute+0x314>
  mbp->reset = false;
 8003db2:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003db8:	4626      	mov	r6, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f7ff fd0d 	bl	80037e0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003dc6:	fab0 f080 	clz	r0, r0
 8003dca:	4641      	mov	r1, r8
 8003dcc:	0940      	lsrs	r0, r0, #5
 8003dce:	3501      	adds	r5, #1
 8003dd0:	f7fc ff26 	bl	8000c20 <_test_assert>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	f47f af67 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8003dda:	2d45      	cmp	r5, #69	; 0x45
 8003ddc:	d1ed      	bne.n	8003dba <oslib_test_002_001_execute+0x14a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8003dde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003de2:	2041      	movs	r0, #65	; 0x41
 8003de4:	f7ff fc5c 	bl	80036a0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003de8:	fab0 f080 	clz	r0, r0
 8003dec:	4965      	ldr	r1, [pc, #404]	; (8003f84 <oslib_test_002_001_execute+0x314>)
 8003dee:	0940      	lsrs	r0, r0, #5
 8003df0:	f7fc ff16 	bl	8000c20 <_test_assert>
 8003df4:	4605      	mov	r5, r0
 8003df6:	2800      	cmp	r0, #0
 8003df8:	f47f af56 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
  test_set_step(5);
 8003dfc:	2305      	movs	r3, #5
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	f04f 0820 	mov.w	r8, #32
 8003e04:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 8003e08:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003e0c:	6922      	ldr	r2, [r4, #16]
 8003e0e:	1a5b      	subs	r3, r3, r1
 8003e10:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8003e14:	495c      	ldr	r1, [pc, #368]	; (8003f88 <oslib_test_002_001_execute+0x318>)
 8003e16:	bf0c      	ite	eq
 8003e18:	2001      	moveq	r0, #1
 8003e1a:	2000      	movne	r0, #0
 8003e1c:	f7fc ff00 	bl	8000c20 <_test_assert>
 8003e20:	4606      	mov	r6, r0
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f47f af6e 	bne.w	8003d04 <oslib_test_002_001_execute+0x94>
 8003e28:	f380 8811 	msr	BASEPRI, r0
 8003e2c:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003e30:	6920      	ldr	r0, [r4, #16]
 8003e32:	4956      	ldr	r1, [pc, #344]	; (8003f8c <oslib_test_002_001_execute+0x31c>)
 8003e34:	f1a0 0c04 	sub.w	ip, r0, #4
 8003e38:	f1dc 0000 	rsbs	r0, ip, #0
 8003e3c:	eb40 000c 	adc.w	r0, r0, ip
 8003e40:	f7fc feee 	bl	8000c20 <_test_assert>
 8003e44:	4605      	mov	r5, r0
 8003e46:	b110      	cbz	r0, 8003e4e <oslib_test_002_001_execute+0x1de>
 8003e48:	f386 8811 	msr	BASEPRI, r6
 8003e4c:	e72c      	b.n	8003ca8 <oslib_test_002_001_execute+0x38>
 8003e4e:	f380 8811 	msr	BASEPRI, r0
 8003e52:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8003e56:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8003e5a:	1ac6      	subs	r6, r0, r3
 8003e5c:	4270      	negs	r0, r6
 8003e5e:	4170      	adcs	r0, r6
 8003e60:	494b      	ldr	r1, [pc, #300]	; (8003f90 <oslib_test_002_001_execute+0x320>)
 8003e62:	f7fc fedd 	bl	8000c20 <_test_assert>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	f47f af4c 	bne.w	8003d04 <oslib_test_002_001_execute+0x94>
 8003e6c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8003e70:	2306      	movs	r3, #6
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003e72:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003f68 <oslib_test_002_001_execute+0x2f8>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003e76:	4e43      	ldr	r6, [pc, #268]	; (8003f84 <oslib_test_002_001_execute+0x314>)
  test_set_step(6);
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003e7c:	a901      	add	r1, sp, #4
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e82:	4640      	mov	r0, r8
 8003e84:	f7ff fc4c 	bl	8003720 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003e88:	fab0 f080 	clz	r0, r0
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	0940      	lsrs	r0, r0, #5
 8003e90:	f7fc fec6 	bl	8000c20 <_test_assert>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f47f af07 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
      test_emit_token(msg2);
 8003e9a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003e9e:	f7fc ff67 	bl	8000d70 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8003ea2:	3d01      	subs	r5, #1
 8003ea4:	d1ea      	bne.n	8003e7c <oslib_test_002_001_execute+0x20c>
    test_assert_sequence("ABCD", "wrong get sequence");
 8003ea6:	493b      	ldr	r1, [pc, #236]	; (8003f94 <oslib_test_002_001_execute+0x324>)
 8003ea8:	483b      	ldr	r0, [pc, #236]	; (8003f98 <oslib_test_002_001_execute+0x328>)
 8003eaa:	f7fd f839 	bl	8000f20 <_test_assert_sequence>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	f47f aefa 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
  test_set_step(7);
 8003eb4:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003eb6:	2146      	movs	r1, #70	; 0x46
 8003eb8:	482b      	ldr	r0, [pc, #172]	; (8003f68 <oslib_test_002_001_execute+0x2f8>)
  test_set_step(7);
 8003eba:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec0:	f7ff fc8e 	bl	80037e0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003ec4:	fab0 f080 	clz	r0, r0
 8003ec8:	492e      	ldr	r1, [pc, #184]	; (8003f84 <oslib_test_002_001_execute+0x314>)
 8003eca:	0940      	lsrs	r0, r0, #5
 8003ecc:	f7fc fea8 	bl	8000c20 <_test_assert>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f47f aee9 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003ed6:	a901      	add	r1, sp, #4
 8003ed8:	4823      	ldr	r0, [pc, #140]	; (8003f68 <oslib_test_002_001_execute+0x2f8>)
 8003eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ede:	f7ff fc1f 	bl	8003720 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003ee2:	fab0 f080 	clz	r0, r0
 8003ee6:	4927      	ldr	r1, [pc, #156]	; (8003f84 <oslib_test_002_001_execute+0x314>)
 8003ee8:	0940      	lsrs	r0, r0, #5
 8003eea:	f7fc fe99 	bl	8000c20 <_test_assert>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f47f aeda 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
  test_set_step(8);
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	2620      	movs	r6, #32
 8003efa:	f386 8811 	msr	BASEPRI, r6
 8003efe:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003f02:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003f04:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003f06:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003f0a:	1f19      	subs	r1, r3, #4
 8003f0c:	4248      	negs	r0, r1
 8003f0e:	4148      	adcs	r0, r1
 8003f10:	4917      	ldr	r1, [pc, #92]	; (8003f70 <oslib_test_002_001_execute+0x300>)
 8003f12:	f7fc fe85 	bl	8000c20 <_test_assert>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	f47f aef4 	bne.w	8003d04 <oslib_test_002_001_execute+0x94>
 8003f1c:	f385 8811 	msr	BASEPRI, r5
 8003f20:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003f24:	6920      	ldr	r0, [r4, #16]
 8003f26:	4913      	ldr	r1, [pc, #76]	; (8003f74 <oslib_test_002_001_execute+0x304>)
 8003f28:	fab0 f080 	clz	r0, r0
 8003f2c:	0940      	lsrs	r0, r0, #5
 8003f2e:	f7fc fe77 	bl	8000c20 <_test_assert>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	f47f aee6 	bne.w	8003d04 <oslib_test_002_001_execute+0x94>
 8003f38:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	490d      	ldr	r1, [pc, #52]	; (8003f78 <oslib_test_002_001_execute+0x308>)
 8003f42:	1ac2      	subs	r2, r0, r3
 8003f44:	4250      	negs	r0, r2
 8003f46:	4150      	adcs	r0, r2
 8003f48:	f7fc fe6a 	bl	8000c20 <_test_assert>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	f47f aeab 	bne.w	8003ca8 <oslib_test_002_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	68e3      	ldr	r3, [r4, #12]
 8003f56:	4909      	ldr	r1, [pc, #36]	; (8003f7c <oslib_test_002_001_execute+0x30c>)
 8003f58:	1ac3      	subs	r3, r0, r3
 8003f5a:	4258      	negs	r0, r3
 8003f5c:	4158      	adcs	r0, r3
 8003f5e:	f7fc fe5f 	bl	8000c20 <_test_assert>
 8003f62:	e6a1      	b.n	8003ca8 <oslib_test_002_001_execute+0x38>
 8003f64:	20001cac 	.word	0x20001cac
 8003f68:	2000084c 	.word	0x2000084c
 8003f6c:	0800aff8 	.word	0x0800aff8
 8003f70:	0800b004 	.word	0x0800b004
 8003f74:	0800b010 	.word	0x0800b010
 8003f78:	0800b01c 	.word	0x0800b01c
 8003f7c:	0800b040 	.word	0x0800b040
 8003f80:	0800b0b0 	.word	0x0800b0b0
 8003f84:	0800afe0 	.word	0x0800afe0
 8003f88:	0800b064 	.word	0x0800b064
 8003f8c:	0800b070 	.word	0x0800b070
 8003f90:	0800b07c 	.word	0x0800b07c
 8003f94:	0800b094 	.word	0x0800b094
 8003f98:	0800b0a8 	.word	0x0800b0a8
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8003fa0:	b508      	push	{r3, lr}
 8003fa2:	4601      	mov	r1, r0
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003faa:	2008      	movs	r0, #8
 8003fac:	f7ff f990 	bl	80032d0 <chSchGoSleepTimeoutS>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f383 8811 	msr	BASEPRI, r3
}
 8003fb6:	bd08      	pop	{r3, pc}
	...

08003fc0 <Thread1.lto_priv.2>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <Thread1.lto_priv.2+0x40>)
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <Thread1.lto_priv.2+0x44>)
 8003fc4:	699b      	ldr	r3, [r3, #24]
uint8_t write;
uint8_t* message[10];

static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {

 8003fc6:	4e10      	ldr	r6, [pc, #64]	; (8004008 <Thread1.lto_priv.2+0x48>)
uint8_t write;
 8003fc8:	b580      	push	{r7, lr}

 8003fca:	2740      	movs	r7, #64	; 0x40
 8003fcc:	619a      	str	r2, [r3, #24]
 8003fce:	46b8      	mov	r8, r7
  (void)arg;
  chRegSetThreadName("blinker");
 8003fd0:	4c0e      	ldr	r4, [pc, #56]	; (800400c <Thread1.lto_priv.2+0x4c>)

 8003fd2:	f8a6 8018 	strh.w	r8, [r6, #24]
  chRegSetThreadName("blinker");
 8003fd6:	2510      	movs	r5, #16
  (void)arg;
 8003fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fdc:	f7ff ffe0 	bl	8003fa0 <chThdSleep>
  chRegSetThreadName("blinker");
 8003fe0:	8325      	strh	r5, [r4, #24]
  while (true) {
 8003fe2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003fe6:	f7ff ffdb 	bl	8003fa0 <chThdSleep>
//    palSetLine(LINE_LED_GREEN);
 8003fea:	8377      	strh	r7, [r6, #26]
//    chThdSleepMilliseconds(50);
 8003fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ff0:	f7ff ffd6 	bl	8003fa0 <chThdSleep>
    palSetLine(LINE_LED_ORANGE);
 8003ff4:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(50);
 8003ff6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003ffa:	f7ff ffd1 	bl	8003fa0 <chThdSleep>
static THD_FUNCTION(Thread1, arg) {
 8003ffe:	e7e7      	b.n	8003fd0 <Thread1.lto_priv.2+0x10>
 8004000:	200009b0 	.word	0x200009b0
 8004004:	0800b0c4 	.word	0x0800b0c4
 8004008:	40021800 	.word	0x40021800
 800400c:	40020c00 	.word	0x40020c00

08004010 <Thread2>:
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <Thread2+0x40>)
 8004012:	4a10      	ldr	r2, [pc, #64]	; (8004054 <Thread2+0x44>)
 8004014:	699b      	ldr	r3, [r3, #24]
    chThdSleepMilliseconds(200);
  }
}



 8004016:	4e10      	ldr	r6, [pc, #64]	; (8004058 <Thread2+0x48>)
    chThdSleepMilliseconds(200);
 8004018:	b580      	push	{r7, lr}

 800401a:	2720      	movs	r7, #32
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	46b8      	mov	r8, r7
static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 8004020:	4c0e      	ldr	r4, [pc, #56]	; (800405c <Thread2+0x4c>)

 8004022:	f8a6 8018 	strh.w	r8, [r6, #24]
static THD_FUNCTION(Thread2, arg) {
 8004026:	2508      	movs	r5, #8
static THD_WORKING_AREA(waThread2, 128);
 8004028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800402c:	f7ff ffb8 	bl	8003fa0 <chThdSleep>
static THD_FUNCTION(Thread2, arg) {
 8004030:	8325      	strh	r5, [r4, #24]

 8004032:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004036:	f7ff ffb3 	bl	8003fa0 <chThdSleep>
  (void)arg;
 800403a:	8377      	strh	r7, [r6, #26]
  chRegSetThreadName("Serial");
 800403c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004040:	f7ff ffae 	bl	8003fa0 <chThdSleep>
  while (true) {
 8004044:	8365      	strh	r5, [r4, #26]
      if (write == 1)
 8004046:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800404a:	f7ff ffa9 	bl	8003fa0 <chThdSleep>

 800404e:	e7e7      	b.n	8004020 <Thread2+0x10>
 8004050:	200009b0 	.word	0x200009b0
 8004054:	0800b0d0 	.word	0x0800b0d0
 8004058:	40020c00 	.word	0x40020c00
 800405c:	40022800 	.word	0x40022800

08004060 <job_slow>:
static void job_slow(void *arg) {
 8004060:	b508      	push	{r3, lr}
  test_emit_token((int)arg);
 8004062:	b2c0      	uxtb	r0, r0
 8004064:	f7fc fe84 	bl	8000d70 <test_emit_token>
}
 8004068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdSleepMilliseconds(10);
 800406c:	2064      	movs	r0, #100	; 0x64
 800406e:	f7ff bf97 	b.w	8003fa0 <chThdSleep>
 8004072:	bf00      	nop
	...

08004080 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2520      	movs	r5, #32
 8004084:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004088:	480b      	ldr	r0, [pc, #44]	; (80040b8 <evt_thread7+0x38>)
 800408a:	2100      	movs	r1, #0
 800408c:	f7fd fa98 	bl	80015c0 <chEvtBroadcastFlagsI>
 8004090:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004092:	f7fe fc4d 	bl	8002930 <chSchRescheduleS>
 8004096:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800409a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800409e:	f7ff ff7f 	bl	8003fa0 <chThdSleep>
 80040a2:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 80040a6:	4805      	ldr	r0, [pc, #20]	; (80040bc <evt_thread7+0x3c>)
 80040a8:	4621      	mov	r1, r4
 80040aa:	f7fd fa89 	bl	80015c0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80040ae:	f7fe fc3f 	bl	8002930 <chSchRescheduleS>
 80040b2:	f384 8811 	msr	BASEPRI, r4
}
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000808 	.word	0x20000808
 80040bc:	2000080c 	.word	0x2000080c

080040c0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 80040c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040c8:	f7ff ff6a 	bl	8003fa0 <chThdSleep>
 80040cc:	2320      	movs	r3, #32
 80040ce:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 80040d2:	2101      	movs	r1, #1
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7fd fa5b 	bl	8001590 <chEvtSignalI>
  chSchRescheduleS();
 80040da:	f7fe fc29 	bl	8002930 <chSchRescheduleS>
 80040de:	2300      	movs	r3, #0
 80040e0:	f383 8811 	msr	BASEPRI, r3
}
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop
	...

080040f0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80040f0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80040f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040f6:	f7ff ff53 	bl	8003fa0 <chThdSleep>
 80040fa:	2320      	movs	r3, #32
 80040fc:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8004100:	4804      	ldr	r0, [pc, #16]	; (8004114 <thread2+0x24>)
 8004102:	f7fd fa9d 	bl	8001640 <chSemSignalI>
  chSchRescheduleS();
 8004106:	f7fe fc13 	bl	8002930 <chSchRescheduleS>
 800410a:	2300      	movs	r3, #0
 800410c:	f383 8811 	msr	BASEPRI, r3
}
 8004110:	bd08      	pop	{r3, pc}
 8004112:	bf00      	nop
 8004114:	20001578 	.word	0x20001578
	...

08004120 <rt_test_004_001_execute>:
static void rt_test_004_001_execute(void) {
 8004120:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8004122:	4e2c      	ldr	r6, [pc, #176]	; (80041d4 <rt_test_004_001_execute+0xb4>)
 8004124:	2301      	movs	r3, #1
 8004126:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800412a:	6033      	str	r3, [r6, #0]
 800412c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
 800412e:	2064      	movs	r0, #100	; 0x64
 8004130:	f7ff ff36 	bl	8003fa0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8004134:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8004138:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800413c:	f7fc fb10 	bl	8000760 <_test_assert_time_window.constprop.0>
 8004140:	b100      	cbz	r0, 8004144 <rt_test_004_001_execute+0x24>
}
 8004142:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8004144:	2302      	movs	r3, #2
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 800414a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800414e:	f7ff ff27 	bl	8003fa0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8004152:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8004156:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 800415a:	f7fc fb01 	bl	8000760 <_test_assert_time_window.constprop.0>
 800415e:	2800      	cmp	r0, #0
 8004160:	d1ef      	bne.n	8004142 <rt_test_004_001_execute+0x22>
  test_set_step(3);
 8004162:	2303      	movs	r3, #3
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8004168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800416c:	f7ff ff18 	bl	8003fa0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8004170:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8004174:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8004178:	f7fc faf2 	bl	8000760 <_test_assert_time_window.constprop.0>
 800417c:	2800      	cmp	r0, #0
 800417e:	d1e0      	bne.n	8004142 <rt_test_004_001_execute+0x22>
  test_set_step(4);
 8004180:	2304      	movs	r3, #4
 8004182:	6033      	str	r3, [r6, #0]
 8004184:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8004186:	f242 7010 	movw	r0, #10000	; 0x2710
 800418a:	f7ff ff09 	bl	8003fa0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 800418e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8004192:	4608      	mov	r0, r1
 8004194:	3010      	adds	r0, #16
 8004196:	3113      	adds	r1, #19
 8004198:	f7fc fae2 	bl	8000760 <_test_assert_time_window.constprop.0>
 800419c:	2800      	cmp	r0, #0
 800419e:	d1d0      	bne.n	8004142 <rt_test_004_001_execute+0x22>
  test_set_step(5);
 80041a0:	2305      	movs	r3, #5
 80041a2:	6033      	str	r3, [r6, #0]
 80041a4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80041a6:	2320      	movs	r3, #32
 80041a8:	f106 0464 	add.w	r4, r6, #100	; 0x64
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 80041b2:	1a61      	subs	r1, r4, r1
 80041b4:	d109      	bne.n	80041ca <rt_test_004_001_execute+0xaa>
 80041b6:	2300      	movs	r3, #0
 80041b8:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 80041bc:	f106 0167 	add.w	r1, r6, #103	; 0x67
 80041c0:	4620      	mov	r0, r4
}
 80041c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 80041c6:	f7fc bacb 	b.w	8000760 <_test_assert_time_window.constprop.0>
 80041ca:	2008      	movs	r0, #8
 80041cc:	f7ff f880 	bl	80032d0 <chSchGoSleepTimeoutS>
 80041d0:	e7f1      	b.n	80041b6 <rt_test_004_001_execute+0x96>
 80041d2:	bf00      	nop
 80041d4:	20001cac 	.word	0x20001cac
	...

080041e0 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 80041e0:	b510      	push	{r4, lr}
  test_set_step(1);
 80041e2:	4c31      	ldr	r4, [pc, #196]	; (80042a8 <rt_test_002_002_execute+0xc8>)
 80041e4:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 80041e6:	b086      	sub	sp, #24
  test_set_step(1);
 80041e8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ea:	f3ef 8311 	mrs	r3, BASEPRI
 80041ee:	b91b      	cbnz	r3, 80041f8 <rt_test_002_002_execute+0x18>
 80041f0:	f7fd fafe 	bl	80017f0 <chSysGetStatusAndLockX.part.0>
 80041f4:	f7fe fe3c 	bl	8002e70 <chSysRestoreStatusX.part.0>
  test_set_step(2);
 80041f8:	2302      	movs	r3, #2
 80041fa:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80041fc:	2320      	movs	r3, #32
 80041fe:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004202:	f3ef 8311 	mrs	r3, BASEPRI
 8004206:	b91b      	cbnz	r3, 8004210 <rt_test_002_002_execute+0x30>
 8004208:	f7fd faf2 	bl	80017f0 <chSysGetStatusAndLockX.part.0>
 800420c:	f7fe fe30 	bl	8002e70 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004210:	2300      	movs	r3, #0
 8004212:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8004216:	2303      	movs	r3, #3
 8004218:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800421a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 800421e:	b913      	cbnz	r3, 8004226 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004220:	2320      	movs	r3, #32
 8004222:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004226:	f3ef 8311 	mrs	r3, BASEPRI
 800422a:	b913      	cbnz	r3, 8004232 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800422c:	2320      	movs	r3, #32
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	2300      	movs	r3, #0
 8004234:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8004238:	2204      	movs	r2, #4
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	2220      	movs	r2, #32
 800423e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004242:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8004246:	b10a      	cbz	r2, 800424c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004248:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800424c:	f3ef 8311 	mrs	r3, BASEPRI
 8004250:	b113      	cbz	r3, 8004258 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004252:	2300      	movs	r3, #0
 8004254:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8004258:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	6022      	str	r2, [r4, #0]
 8004260:	2320      	movs	r3, #32
 8004262:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004266:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8004268:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 800426a:	b113      	cbz	r3, 8004272 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 800426c:	4620      	mov	r0, r4
 800426e:	f7fd fa37 	bl	80016e0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8004272:	4620      	mov	r0, r4
 8004274:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <rt_test_002_002_execute+0xcc>)
 8004276:	2300      	movs	r3, #0
 8004278:	2101      	movs	r1, #1
 800427a:	f7fd fa71 	bl	8001760 <chVTDoSetI>
 800427e:	2400      	movs	r4, #0
 8004280:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8004284:	200a      	movs	r0, #10
 8004286:	f7ff fe8b 	bl	8003fa0 <chThdSleep>
 800428a:	2320      	movs	r3, #32
 800428c:	f383 8811 	msr	BASEPRI, r3
  b = chVTIsArmedI(vtp);
 8004290:	9804      	ldr	r0, [sp, #16]
 8004292:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8004296:	fab0 f080 	clz	r0, r0
 800429a:	4905      	ldr	r1, [pc, #20]	; (80042b0 <rt_test_002_002_execute+0xd0>)
 800429c:	0940      	lsrs	r0, r0, #5
 800429e:	f7fc fcbf 	bl	8000c20 <_test_assert>
}
 80042a2:	b006      	add	sp, #24
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	bf00      	nop
 80042a8:	20001cac 	.word	0x20001cac
 80042ac:	08002e91 	.word	0x08002e91
 80042b0:	0800b0dc 	.word	0x0800b0dc
	...

080042c0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 80042c0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80042c2:	2001      	movs	r0, #1
 80042c4:	f7ff fe6c 	bl	8003fa0 <chThdSleep>
 80042c8:	2320      	movs	r3, #32
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042d2:	2300      	movs	r3, #0
 80042d4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80042d6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80042da:	bd08      	pop	{r3, pc}
 80042dc:	0000      	movs	r0, r0
	...

080042e0 <rt_test_011_009_execute>:
static void rt_test_011_009_execute(void) {
 80042e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80042e4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8004378 <rt_test_011_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80042e8:	4f1e      	ldr	r7, [pc, #120]	; (8004364 <rt_test_011_009_execute+0x84>)
 80042ea:	4e1f      	ldr	r6, [pc, #124]	; (8004368 <rt_test_011_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 80042ec:	4d1f      	ldr	r5, [pc, #124]	; (800436c <rt_test_011_009_execute+0x8c>)
  test_set_step(1);
 80042ee:	2301      	movs	r3, #1
 80042f0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 80042f4:	f7ff ffe4 	bl	80042c0 <test_wait_tick>
    n = 0;
 80042f8:	2400      	movs	r4, #0
    start = test_wait_tick();
 80042fa:	4680      	mov	r8, r0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80042fc:	46a2      	mov	sl, r4
 80042fe:	f04f 0920 	mov.w	r9, #32
 8004302:	f389 8811 	msr	BASEPRI, r9
 8004306:	2300      	movs	r3, #0
 8004308:	463a      	mov	r2, r7
 800430a:	4630      	mov	r0, r6
 800430c:	2101      	movs	r1, #1
 800430e:	f7fd fa27 	bl	8001760 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8004312:	463a      	mov	r2, r7
 8004314:	2300      	movs	r3, #0
 8004316:	f242 7110 	movw	r1, #10000	; 0x2710
 800431a:	4628      	mov	r0, r5
 800431c:	f7fd fa20 	bl	8001760 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8004320:	4630      	mov	r0, r6
 8004322:	f7fd f9dd 	bl	80016e0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8004326:	4628      	mov	r0, r5
 8004328:	f7fd f9da 	bl	80016e0 <chVTDoResetI>
 800432c:	f38a 8811 	msr	BASEPRI, sl
 8004330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8004334:	f242 720f 	movw	r2, #9999	; 0x270f
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800433a:	eba3 0308 	sub.w	r3, r3, r8
 800433e:	4293      	cmp	r3, r2
      n++;
 8004340:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004344:	d9dd      	bls.n	8004302 <rt_test_011_009_execute+0x22>
  test_set_step(2);
 8004346:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004348:	4809      	ldr	r0, [pc, #36]	; (8004370 <rt_test_011_009_execute+0x90>)
  test_set_step(2);
 800434a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800434e:	f7fc fdcf 	bl	8000ef0 <test_print>
    test_printn(n * 2);
 8004352:	0060      	lsls	r0, r4, #1
 8004354:	f7fc fcfc 	bl	8000d50 <test_printn>
}
 8004358:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800435c:	4805      	ldr	r0, [pc, #20]	; (8004374 <rt_test_011_009_execute+0x94>)
 800435e:	f7fc bda7 	b.w	8000eb0 <test_println>
 8004362:	bf00      	nop
 8004364:	08000a31 	.word	0x08000a31
 8004368:	20001cdc 	.word	0x20001cdc
 800436c:	20001cf0 	.word	0x20001cf0
 8004370:	0800b0f0 	.word	0x0800b0f0
 8004374:	0800b100 	.word	0x0800b100
 8004378:	20001cac 	.word	0x20001cac
 800437c:	00000000 	.word	0x00000000

08004380 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	4688      	mov	r8, r1
  int tseq, tcase;

  test_chp = stream;
 8004386:	f8df b334 	ldr.w	fp, [pc, #820]	; 80046bc <test_execute+0x33c>
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800438a:	4603      	mov	r3, r0
 800438c:	b083      	sub	sp, #12
  test_println("");
 800438e:	48ab      	ldr	r0, [pc, #684]	; (800463c <test_execute+0x2bc>)
  test_chp = stream;
 8004390:	f8cb 3000 	str.w	r3, [fp]
  test_println("");
 8004394:	f7fc fd8c 	bl	8000eb0 <test_println>
  if (tsp->name != NULL) {
 8004398:	f8d8 3000 	ldr.w	r3, [r8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 81f8 	beq.w	8004792 <test_execute+0x412>
 80043a2:	4ca7      	ldr	r4, [pc, #668]	; (8004640 <test_execute+0x2c0>)
  while (*msgp)
 80043a4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80043a6:	f8db 0000 	ldr.w	r0, [fp]
 80043aa:	6803      	ldr	r3, [r0, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4798      	blx	r3
  while (*msgp)
 80043b0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80043b4:	2900      	cmp	r1, #0
 80043b6:	d1f6      	bne.n	80043a6 <test_execute+0x26>
    test_print("*** ");
    test_println(tsp->name);
 80043b8:	f8d8 0000 	ldr.w	r0, [r8]
 80043bc:	f7fc fd78 	bl	8000eb0 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 80043c0:	48a0      	ldr	r0, [pc, #640]	; (8004644 <test_execute+0x2c4>)
 80043c2:	4ca1      	ldr	r4, [pc, #644]	; (8004648 <test_execute+0x2c8>)
 80043c4:	f7fc fd74 	bl	8000eb0 <test_println>
  while (*msgp)
 80043c8:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80043ca:	f8db 0000 	ldr.w	r0, [fp]
 80043ce:	6803      	ldr	r3, [r0, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4798      	blx	r3
  while (*msgp)
 80043d4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80043d8:	2900      	cmp	r1, #0
 80043da:	d1f6      	bne.n	80043ca <test_execute+0x4a>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 80043dc:	489b      	ldr	r0, [pc, #620]	; (800464c <test_execute+0x2cc>)
 80043de:	4c9c      	ldr	r4, [pc, #624]	; (8004650 <test_execute+0x2d0>)
 80043e0:	f7fc fd66 	bl	8000eb0 <test_println>
  while (*msgp)
 80043e4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80043e6:	f8db 0000 	ldr.w	r0, [fp]
 80043ea:	6803      	ldr	r3, [r0, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4798      	blx	r3
  while (*msgp)
 80043f0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80043f4:	2900      	cmp	r1, #0
 80043f6:	d1f6      	bne.n	80043e6 <test_execute+0x66>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80043f8:	4896      	ldr	r0, [pc, #600]	; (8004654 <test_execute+0x2d4>)
 80043fa:	4c97      	ldr	r4, [pc, #604]	; (8004658 <test_execute+0x2d8>)
 80043fc:	f7fc fd58 	bl	8000eb0 <test_println>
  while (*msgp)
 8004400:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004402:	f8db 0000 	ldr.w	r0, [fp]
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4798      	blx	r3
  while (*msgp)
 800440c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004410:	2900      	cmp	r1, #0
 8004412:	d1f6      	bne.n	8004402 <test_execute+0x82>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8004414:	4891      	ldr	r0, [pc, #580]	; (800465c <test_execute+0x2dc>)
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 8004416:	4c92      	ldr	r4, [pc, #584]	; (8004660 <test_execute+0x2e0>)
  test_println(BOARD_NAME);
 8004418:	f7fc fd4a 	bl	8000eb0 <test_println>
    test_println("***");
 800441c:	4889      	ldr	r0, [pc, #548]	; (8004644 <test_execute+0x2c4>)
 800441e:	f7fc fd47 	bl	8000eb0 <test_println>
  while (*msgp)
 8004422:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004424:	f8db 0000 	ldr.w	r0, [fp]
 8004428:	6803      	ldr	r3, [r0, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4798      	blx	r3
  while (*msgp)
 800442e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004432:	2900      	cmp	r1, #0
 8004434:	d1f6      	bne.n	8004424 <test_execute+0xa4>
    test_print("*** Text size:    ");
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8004436:	4b8b      	ldr	r3, [pc, #556]	; (8004664 <test_execute+0x2e4>)
 8004438:	488b      	ldr	r0, [pc, #556]	; (8004668 <test_execute+0x2e8>)
    test_println(" bytes");
 800443a:	4c8c      	ldr	r4, [pc, #560]	; (800466c <test_execute+0x2ec>)
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 800443c:	1ac0      	subs	r0, r0, r3
 800443e:	f7fc fc87 	bl	8000d50 <test_printn>
    test_println(" bytes");
 8004442:	488b      	ldr	r0, [pc, #556]	; (8004670 <test_execute+0x2f0>)
 8004444:	f7fc fd34 	bl	8000eb0 <test_println>
  while (*msgp)
 8004448:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 800444a:	f8db 0000 	ldr.w	r0, [fp]
 800444e:	6803      	ldr	r3, [r0, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4798      	blx	r3
  while (*msgp)
 8004454:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004458:	2900      	cmp	r1, #0
 800445a:	d1f6      	bne.n	800444a <test_execute+0xca>
    test_print("*** RO data size: ");
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 800445c:	4b85      	ldr	r3, [pc, #532]	; (8004674 <test_execute+0x2f4>)
 800445e:	4886      	ldr	r0, [pc, #536]	; (8004678 <test_execute+0x2f8>)
    test_println(" bytes");
 8004460:	4c86      	ldr	r4, [pc, #536]	; (800467c <test_execute+0x2fc>)
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8004462:	1ac0      	subs	r0, r0, r3
 8004464:	f7fc fc74 	bl	8000d50 <test_printn>
    test_println(" bytes");
 8004468:	4881      	ldr	r0, [pc, #516]	; (8004670 <test_execute+0x2f0>)
 800446a:	f7fc fd21 	bl	8000eb0 <test_println>
  while (*msgp)
 800446e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004470:	f8db 0000 	ldr.w	r0, [fp]
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4798      	blx	r3
  while (*msgp)
 800447a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800447e:	2900      	cmp	r1, #0
 8004480:	d1f6      	bne.n	8004470 <test_execute+0xf0>
    test_print("*** Data size:    ");
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8004482:	4b7f      	ldr	r3, [pc, #508]	; (8004680 <test_execute+0x300>)
 8004484:	487f      	ldr	r0, [pc, #508]	; (8004684 <test_execute+0x304>)
    test_println(" bytes");
 8004486:	4c80      	ldr	r4, [pc, #512]	; (8004688 <test_execute+0x308>)
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8004488:	1ac0      	subs	r0, r0, r3
 800448a:	f7fc fc61 	bl	8000d50 <test_printn>
    test_println(" bytes");
 800448e:	4878      	ldr	r0, [pc, #480]	; (8004670 <test_execute+0x2f0>)
 8004490:	f7fc fd0e 	bl	8000eb0 <test_println>
  while (*msgp)
 8004494:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004496:	f8db 0000 	ldr.w	r0, [fp]
 800449a:	6803      	ldr	r3, [r0, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4798      	blx	r3
  while (*msgp)
 80044a0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80044a4:	2900      	cmp	r1, #0
 80044a6:	d1f6      	bne.n	8004496 <test_execute+0x116>
    test_print("*** BSS size:     ");
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 80044a8:	4b78      	ldr	r3, [pc, #480]	; (800468c <test_execute+0x30c>)
 80044aa:	4879      	ldr	r0, [pc, #484]	; (8004690 <test_execute+0x310>)
 80044ac:	9101      	str	r1, [sp, #4]
 80044ae:	1ac0      	subs	r0, r0, r3
 80044b0:	f7fc fc4e 	bl	8000d50 <test_printn>
    test_println(" bytes");
 80044b4:	486e      	ldr	r0, [pc, #440]	; (8004670 <test_execute+0x2f0>)
 80044b6:	f7fc fcfb 	bl	8000eb0 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 80044ba:	4860      	ldr	r0, [pc, #384]	; (800463c <test_execute+0x2bc>)
 80044bc:	f7fc fcf8 	bl	8000eb0 <test_println>

  test_global_fail = false;
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 80044c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_global_fail = false;
 80044c4:	4a73      	ldr	r2, [pc, #460]	; (8004694 <test_execute+0x314>)
  while (tsp->sequences[tseq] != NULL) {
 80044c6:	681b      	ldr	r3, [r3, #0]
  test_global_fail = false;
 80044c8:	9901      	ldr	r1, [sp, #4]
 80044ca:	7011      	strb	r1, [r2, #0]
  while (tsp->sequences[tseq] != NULL) {
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80f7 	beq.w	80046c0 <test_execute+0x340>
  tseq = 0;
 80044d2:	468a      	mov	sl, r1
  while (tsp->sequences[tseq] != NULL) {
 80044d4:	4689      	mov	r9, r1
 80044d6:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '=');
 80044d8:	f8db 0000 	ldr.w	r0, [fp]
 80044dc:	6803      	ldr	r3, [r0, #0]
 80044de:	213d      	movs	r1, #61	; 0x3d
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80044e4:	3c01      	subs	r4, #1
 80044e6:	d1f7      	bne.n	80044d8 <test_execute+0x158>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80044e8:	f8db 0000 	ldr.w	r0, [fp]
 80044ec:	496a      	ldr	r1, [pc, #424]	; (8004698 <test_execute+0x318>)
 80044ee:	6803      	ldr	r3, [r0, #0]
 80044f0:	4c6a      	ldr	r4, [pc, #424]	; (800469c <test_execute+0x31c>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	4798      	blx	r3
  while (*msgp)
 80044f8:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 80044fa:	f8db 0000 	ldr.w	r0, [fp]
 80044fe:	6803      	ldr	r3, [r0, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4798      	blx	r3
  while (*msgp)
 8004504:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004508:	2900      	cmp	r1, #0
 800450a:	d1f6      	bne.n	80044fa <test_execute+0x17a>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 800450c:	f10a 0a01 	add.w	sl, sl, #1
 8004510:	4650      	mov	r0, sl
 8004512:	4c63      	ldr	r4, [pc, #396]	; (80046a0 <test_execute+0x320>)
 8004514:	f7fc fc1c 	bl	8000d50 <test_printn>
  while (*msgp)
 8004518:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800451a:	f8db 0000 	ldr.w	r0, [fp]
 800451e:	6803      	ldr	r3, [r0, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4798      	blx	r3
  while (*msgp)
 8004524:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004528:	2900      	cmp	r1, #0
 800452a:	d1f6      	bne.n	800451a <test_execute+0x19a>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 800452c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004530:	f853 3009 	ldr.w	r3, [r3, r9]
 8004534:	681c      	ldr	r4, [r3, #0]
  while (*msgp)
 8004536:	7821      	ldrb	r1, [r4, #0]
 8004538:	b141      	cbz	r1, 800454c <test_execute+0x1cc>
    streamPut(test_chp, *msgp++);
 800453a:	f8db 0000 	ldr.w	r0, [fp]
 800453e:	6803      	ldr	r3, [r0, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4798      	blx	r3
  while (*msgp)
 8004544:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004548:	2900      	cmp	r1, #0
 800454a:	d1f6      	bne.n	800453a <test_execute+0x1ba>
    test_println(")");
 800454c:	4855      	ldr	r0, [pc, #340]	; (80046a4 <test_execute+0x324>)
 800454e:	f7fc fcaf 	bl	8000eb0 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8004552:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004556:	f852 3009 	ldr.w	r3, [r2, r9]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <test_execute+0x2aa>
 8004562:	4d51      	ldr	r5, [pc, #324]	; (80046a8 <test_execute+0x328>)
    tcase = 0;
 8004564:	2600      	movs	r6, #0
      print_line();
 8004566:	4f51      	ldr	r7, [pc, #324]	; (80046ac <test_execute+0x32c>)
 8004568:	f7fc fd2a 	bl	8000fc0 <print_line>
 800456c:	00b4      	lsls	r4, r6, #2
  while (*msgp)
 800456e:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8004570:	f8db 0000 	ldr.w	r0, [fp]
 8004574:	6803      	ldr	r3, [r0, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4798      	blx	r3
  while (*msgp)
 800457a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800457e:	2900      	cmp	r1, #0
 8004580:	d1f6      	bne.n	8004570 <test_execute+0x1f0>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8004582:	4650      	mov	r0, sl
 8004584:	f7fc fbe4 	bl	8000d50 <test_printn>
    streamPut(test_chp, *msgp++);
 8004588:	f8db 0000 	ldr.w	r0, [fp]
      test_print(".");
      test_printn(tcase + 1);
 800458c:	4f44      	ldr	r7, [pc, #272]	; (80046a0 <test_execute+0x320>)
    streamPut(test_chp, *msgp++);
 800458e:	6803      	ldr	r3, [r0, #0]
 8004590:	212e      	movs	r1, #46	; 0x2e
 8004592:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 8004594:	3601      	adds	r6, #1
    streamPut(test_chp, *msgp++);
 8004596:	4798      	blx	r3
      test_printn(tcase + 1);
 8004598:	4630      	mov	r0, r6
 800459a:	f7fc fbd9 	bl	8000d50 <test_printn>
  while (*msgp)
 800459e:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80045a0:	f8db 0000 	ldr.w	r0, [fp]
 80045a4:	6803      	ldr	r3, [r0, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4798      	blx	r3
  while (*msgp)
 80045aa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80045ae:	2900      	cmp	r1, #0
 80045b0:	d1f6      	bne.n	80045a0 <test_execute+0x220>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 80045b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80045b6:	f853 3009 	ldr.w	r3, [r3, r9]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	591b      	ldr	r3, [r3, r4]
 80045be:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 80045c0:	7839      	ldrb	r1, [r7, #0]
 80045c2:	b141      	cbz	r1, 80045d6 <test_execute+0x256>
    streamPut(test_chp, *msgp++);
 80045c4:	f8db 0000 	ldr.w	r0, [fp]
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4798      	blx	r3
  while (*msgp)
 80045ce:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80045d2:	2900      	cmp	r1, #0
 80045d4:	d1f6      	bne.n	80045c4 <test_execute+0x244>
      test_println(")");
 80045d6:	4833      	ldr	r0, [pc, #204]	; (80046a4 <test_execute+0x324>)
 80045d8:	f7fc fc6a 	bl	8000eb0 <test_println>
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {

  chThdSleep(delay);
 80045dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80045e0:	f7ff fcde 	bl	8003fa0 <chThdSleep>
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80045e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_tokp = test_tokens_buffer;
 80045e8:	4a31      	ldr	r2, [pc, #196]	; (80046b0 <test_execute+0x330>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80045ea:	f853 3009 	ldr.w	r3, [r3, r9]
  test_local_fail = false;
 80045ee:	4931      	ldr	r1, [pc, #196]	; (80046b4 <test_execute+0x334>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80045f0:	685b      	ldr	r3, [r3, #4]
  test_tokp = test_tokens_buffer;
 80045f2:	602a      	str	r2, [r5, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80045f4:	591f      	ldr	r7, [r3, r4]
  if (tcp->setup != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
  test_local_fail = false;
 80045f8:	2200      	movs	r2, #0
 80045fa:	700a      	strb	r2, [r1, #0]
  if (tcp->setup != NULL)
 80045fc:	b103      	cbz	r3, 8004600 <test_execute+0x280>
    tcp->setup();
 80045fe:	4798      	blx	r3
  tcp->execute();
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	b103      	cbz	r3, 800460a <test_execute+0x28a>
    tcp->teardown();
 8004608:	4798      	blx	r3
      if (test_local_fail) {
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <test_execute+0x334>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d172      	bne.n	80046f8 <test_execute+0x378>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else {
        test_println("--- Result: SUCCESS");
 8004612:	4829      	ldr	r0, [pc, #164]	; (80046b8 <test_execute+0x338>)
 8004614:	f7fc fc4c 	bl	8000eb0 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8004618:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800461c:	f852 3009 	ldr.w	r3, [r2, r9]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	441c      	add	r4, r3
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d19d      	bne.n	8004566 <test_execute+0x1e6>
  while (tsp->sequences[tseq] != NULL) {
 800462a:	f109 0904 	add.w	r9, r9, #4
 800462e:	f852 3009 	ldr.w	r3, [r2, r9]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f47f af4f 	bne.w	80044d6 <test_execute+0x156>
 8004638:	e042      	b.n	80046c0 <test_execute+0x340>
 800463a:	bf00      	nop
 800463c:	0800b820 	.word	0x0800b820
 8004640:	0800b10c 	.word	0x0800b10c
 8004644:	0800b208 	.word	0x0800b208
 8004648:	0800b114 	.word	0x0800b114
 800464c:	0800b20c 	.word	0x0800b20c
 8004650:	0800b128 	.word	0x0800b128
 8004654:	0800ae2c 	.word	0x0800ae2c
 8004658:	0800b13c 	.word	0x0800b13c
 800465c:	0800ae6c 	.word	0x0800ae6c
 8004660:	0800b150 	.word	0x0800b150
 8004664:	080001e0 	.word	0x080001e0
 8004668:	0800a0c0 	.word	0x0800a0c0
 800466c:	0800b164 	.word	0x0800b164
 8004670:	0800a598 	.word	0x0800a598
 8004674:	0800a0c0 	.word	0x0800a0c0
 8004678:	0800cb00 	.word	0x0800cb00
 800467c:	0800b178 	.word	0x0800b178
 8004680:	20000800 	.word	0x20000800
 8004684:	200008dc 	.word	0x200008dc
 8004688:	0800b18c 	.word	0x0800b18c
 800468c:	200008e0 	.word	0x200008e0
 8004690:	200024f0 	.word	0x200024f0
 8004694:	20001c08 	.word	0x20001c08
 8004698:	0800b7cc 	.word	0x0800b7cc
 800469c:	0800b1a0 	.word	0x0800b1a0
 80046a0:	0800b1b4 	.word	0x0800b1b4
 80046a4:	0800b224 	.word	0x0800b224
 80046a8:	20001cc0 	.word	0x20001cc0
 80046ac:	0800b1b8 	.word	0x0800b1b8
 80046b0:	20001cb0 	.word	0x20001cb0
 80046b4:	20001ca8 	.word	0x20001ca8
 80046b8:	0800b22c 	.word	0x0800b22c
 80046bc:	20001c00 	.word	0x20001c00
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 80046c0:	f7fc fc7e 	bl	8000fc0 <print_line>
  test_println("");
 80046c4:	4c35      	ldr	r4, [pc, #212]	; (800479c <test_execute+0x41c>)
 80046c6:	4836      	ldr	r0, [pc, #216]	; (80047a0 <test_execute+0x420>)
 80046c8:	f7fc fbf2 	bl	8000eb0 <test_println>
  while (*msgp)
 80046cc:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 80046ce:	f8db 0000 	ldr.w	r0, [fp]
 80046d2:	6803      	ldr	r3, [r0, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4798      	blx	r3
  while (*msgp)
 80046d8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80046dc:	2900      	cmp	r1, #0
 80046de:	d1f6      	bne.n	80046ce <test_execute+0x34e>
  test_print("Final result: ");
  if (test_global_fail)
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <test_execute+0x424>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d04c      	beq.n	8004782 <test_execute+0x402>
    test_println("FAILURE");
 80046e8:	482f      	ldr	r0, [pc, #188]	; (80047a8 <test_execute+0x428>)
 80046ea:	f7fc fbe1 	bl	8000eb0 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 80046ee:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <test_execute+0x424>)
 80046f0:	7818      	ldrb	r0, [r3, #0]
 80046f2:	b003      	add	sp, #12
 80046f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (test_local_fail) {
 80046f8:	4f2c      	ldr	r7, [pc, #176]	; (80047ac <test_execute+0x42c>)
  while (*msgp)
 80046fa:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 80046fc:	f8db 0000 	ldr.w	r0, [fp]
 8004700:	6803      	ldr	r3, [r0, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4798      	blx	r3
  while (*msgp)
 8004706:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800470a:	2900      	cmp	r1, #0
 800470c:	d1f6      	bne.n	80046fc <test_execute+0x37c>
        test_printn(test_step);
 800470e:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <test_execute+0x430>)
 8004710:	4f28      	ldr	r7, [pc, #160]	; (80047b4 <test_execute+0x434>)
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	f7fc fb1c 	bl	8000d50 <test_printn>
  while (*msgp)
 8004718:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800471a:	f8db 0000 	ldr.w	r0, [fp]
 800471e:	6803      	ldr	r3, [r0, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4798      	blx	r3
  while (*msgp)
 8004724:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004728:	2900      	cmp	r1, #0
 800472a:	d1f6      	bne.n	800471a <test_execute+0x39a>
  while (cp < test_tokp)
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <test_execute+0x438>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d90a      	bls.n	800474a <test_execute+0x3ca>
  char *cp = test_tokens_buffer;
 8004734:	4f20      	ldr	r7, [pc, #128]	; (80047b8 <test_execute+0x438>)
    streamPut(test_chp, *cp++);
 8004736:	f8db 0000 	ldr.w	r0, [fp]
 800473a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800473e:	6803      	ldr	r3, [r0, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4798      	blx	r3
  while (cp < test_tokp)
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	429f      	cmp	r7, r3
 8004748:	d3f5      	bcc.n	8004736 <test_execute+0x3b6>
  while (*msgp)
 800474a:	4f1c      	ldr	r7, [pc, #112]	; (80047bc <test_execute+0x43c>)
 800474c:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 800474e:	f8db 0000 	ldr.w	r0, [fp]
 8004752:	6803      	ldr	r3, [r0, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4798      	blx	r3
  while (*msgp)
 8004758:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800475c:	2900      	cmp	r1, #0
 800475e:	d1f6      	bne.n	800474e <test_execute+0x3ce>
        test_print(test_failure_message);
 8004760:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <test_execute+0x440>)
 8004762:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 8004764:	7839      	ldrb	r1, [r7, #0]
 8004766:	b141      	cbz	r1, 800477a <test_execute+0x3fa>
    streamPut(test_chp, *msgp++);
 8004768:	f8db 0000 	ldr.w	r0, [fp]
 800476c:	6803      	ldr	r3, [r0, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4798      	blx	r3
  while (*msgp)
 8004772:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004776:	2900      	cmp	r1, #0
 8004778:	d1f6      	bne.n	8004768 <test_execute+0x3e8>
        test_println("\")");
 800477a:	4812      	ldr	r0, [pc, #72]	; (80047c4 <test_execute+0x444>)
 800477c:	f7fc fb98 	bl	8000eb0 <test_println>
 8004780:	e74a      	b.n	8004618 <test_execute+0x298>
    test_println("SUCCESS");
 8004782:	4811      	ldr	r0, [pc, #68]	; (80047c8 <test_execute+0x448>)
 8004784:	f7fc fb94 	bl	8000eb0 <test_println>
}
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <test_execute+0x424>)
 800478a:	7818      	ldrb	r0, [r3, #0]
 800478c:	b003      	add	sp, #12
 800478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8004792:	480e      	ldr	r0, [pc, #56]	; (80047cc <test_execute+0x44c>)
 8004794:	f7fc fb8c 	bl	8000eb0 <test_println>
 8004798:	e612      	b.n	80043c0 <test_execute+0x40>
 800479a:	bf00      	nop
 800479c:	0800b1e8 	.word	0x0800b1e8
 80047a0:	0800b820 	.word	0x0800b820
 80047a4:	20001c08 	.word	0x20001c08
 80047a8:	0800b240 	.word	0x0800b240
 80047ac:	0800b1c8 	.word	0x0800b1c8
 80047b0:	20001cac 	.word	0x20001cac
 80047b4:	0800b1e0 	.word	0x0800b1e0
 80047b8:	20001cb0 	.word	0x20001cb0
 80047bc:	0800b1e4 	.word	0x0800b1e4
 80047c0:	20001c04 	.word	0x20001c04
 80047c4:	0800b228 	.word	0x0800b228
 80047c8:	0800b238 	.word	0x0800b238
 80047cc:	0800b1f8 	.word	0x0800b1f8

080047d0 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 80047d0:	4901      	ldr	r1, [pc, #4]	; (80047d8 <test_rt+0x8>)
 80047d2:	f7ff bdd5 	b.w	8004380 <test_execute>
 80047d6:	bf00      	nop
 80047d8:	0800c978 	.word	0x0800c978
 80047dc:	00000000 	.word	0x00000000

080047e0 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 80047e0:	4901      	ldr	r1, [pc, #4]	; (80047e8 <test_oslib+0x8>)
 80047e2:	f7ff bdcd 	b.w	8004380 <test_execute>
 80047e6:	bf00      	nop
 80047e8:	0800c504 	.word	0x0800c504
 80047ec:	00000000 	.word	0x00000000

080047f0 <chMsgWaitS>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @sclass
 */
thread_t *chMsgWaitS(void) {
 80047f0:	b510      	push	{r4, lr}
  thread_t *tp;

  chDbgCheckClassS();

  if (!chMsgIsPendingI(currp)) {
 80047f2:	4c0b      	ldr	r4, [pc, #44]	; (8004820 <chMsgWaitS+0x30>)
 80047f4:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 80047f6:	4613      	mov	r3, r2
 80047f8:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 80047fc:	4298      	cmp	r0, r3
 80047fe:	d006      	beq.n	800480e <chMsgWaitS+0x1e>
  tqp->next             = tp->queue.next;
 8004800:	6801      	ldr	r1, [r0, #0]
 8004802:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8004804:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8004806:	604b      	str	r3, [r1, #4]
 8004808:	f880 2020 	strb.w	r2, [r0, #32]

  return tp;
}
 800480c:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 800480e:	200e      	movs	r0, #14
 8004810:	f7fe fc46 	bl	80030a0 <chSchGoSleepS>
 8004814:	69a2      	ldr	r2, [r4, #24]
 8004816:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004818:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 800481c:	e7f0      	b.n	8004800 <chMsgWaitS+0x10>
 800481e:	bf00      	nop
 8004820:	200009b0 	.word	0x200009b0
	...

08004830 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2620      	movs	r6, #32
 8004834:	2500      	movs	r5, #0
 8004836:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 800483a:	f7ff ffd9 	bl	80047f0 <chMsgWaitS>
 800483e:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
 8004842:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004844:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004848:	4621      	mov	r1, r4
 800484a:	f7fe fb39 	bl	8002ec0 <chSchWakeupS>
 800484e:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 8004852:	2c00      	cmp	r4, #0
 8004854:	d1ef      	bne.n	8004836 <bmk_thread1+0x6>
}
 8004856:	bd70      	pop	{r4, r5, r6, pc}
	...

08004860 <chMsgSend>:
  thread_t *ctp = currp;
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8004862:	b510      	push	{r4, lr}
 8004864:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8004866:	699c      	ldr	r4, [r3, #24]
 8004868:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800486c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800486e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004870:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8004872:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8004876:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8004878:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800487a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800487e:	6304      	str	r4, [r0, #48]	; 0x30
 8004880:	2a0e      	cmp	r2, #14
 8004882:	d007      	beq.n	8004894 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8004884:	200c      	movs	r0, #12
 8004886:	f7fe fc0b 	bl	80030a0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800488a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800488c:	2300      	movs	r3, #0
 800488e:	f383 8811 	msr	BASEPRI, r3
}
 8004892:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8004894:	f7fc fdb4 	bl	8001400 <chSchReadyI>
 8004898:	e7f4      	b.n	8004884 <chMsgSend+0x24>
 800489a:	bf00      	nop
 800489c:	200009b0 	.word	0x200009b0

080048a0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	4605      	mov	r5, r0
  start = test_wait_tick();
 80048a6:	f7ff fd0b 	bl	80042c0 <test_wait_tick>
  uint32_t n = 0;
 80048aa:	2400      	movs	r4, #0
  start = test_wait_tick();
 80048ac:	4606      	mov	r6, r0
 80048ae:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 80048b2:	f242 770f 	movw	r7, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 80048b6:	2101      	movs	r1, #1
 80048b8:	4628      	mov	r0, r5
 80048ba:	f7ff ffd1 	bl	8004860 <chMsgSend>
 80048be:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80048c2:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 80048c4:	42bb      	cmp	r3, r7
    n++;
 80048c6:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 80048ca:	d9f4      	bls.n	80048b6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 80048cc:	4628      	mov	r0, r5
 80048ce:	2100      	movs	r1, #0
 80048d0:	f7ff ffc6 	bl	8004860 <chMsgSend>
}
 80048d4:	4620      	mov	r0, r4
 80048d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048da:	bf00      	nop
 80048dc:	0000      	movs	r0, r0
	...

080048e0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80048e0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 80048e2:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 80048e4:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 80048e6:	f7ff ffbb 	bl	8004860 <chMsgSend>
  chMsgSend(p, 'B');
 80048ea:	4620      	mov	r0, r4
 80048ec:	2142      	movs	r1, #66	; 0x42
 80048ee:	f7ff ffb7 	bl	8004860 <chMsgSend>
  chMsgSend(p, 'C');
 80048f2:	4620      	mov	r0, r4
 80048f4:	2143      	movs	r1, #67	; 0x43
 80048f6:	f7ff ffb3 	bl	8004860 <chMsgSend>
  chMsgSend(p, 'D');
 80048fa:	4620      	mov	r0, r4
 80048fc:	2144      	movs	r1, #68	; 0x44
}
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8004902:	f7ff bfad 	b.w	8004860 <chMsgSend>
 8004906:	bf00      	nop
	...

08004910 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8004910:	b40e      	push	{r1, r2, r3}
 8004912:	b510      	push	{r4, lr}
 8004914:	b085      	sub	sp, #20
 8004916:	ab07      	add	r3, sp, #28

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8004918:	aa01      	add	r2, sp, #4
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 800491a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_start(args, veneer);
 800491e:	9301      	str	r3, [sp, #4]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8004920:	a902      	add	r1, sp, #8
  cm.argsp  = &args;
 8004922:	e9cd 4202 	strd	r4, r2, [sp, #8]
  msg = chMsgSend(tp, (msg_t)&cm);
 8004926:	f7ff ff9b 	bl	8004860 <chMsgSend>

  va_end(args);

  return msg;
}
 800492a:	b005      	add	sp, #20
 800492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004930:	b003      	add	sp, #12
 8004932:	4770      	bx	lr
	...

08004940 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8004940:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 8004944:	4604      	mov	r4, r0
  if (mp->owner != NULL) {
 8004946:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8004948:	699d      	ldr	r5, [r3, #24]
  if (mp->owner != NULL) {
 800494a:	b330      	cbz	r0, 800499a <chMtxLockS+0x5a>
      while (tp->prio < ctp->prio) {
 800494c:	68aa      	ldr	r2, [r5, #8]
 800494e:	6883      	ldr	r3, [r0, #8]
 8004950:	4293      	cmp	r3, r2
 8004952:	d207      	bcs.n	8004964 <chMtxLockS+0x24>
        switch (tp->state) {
 8004954:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8004958:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800495a:	2b06      	cmp	r3, #6
 800495c:	d035      	beq.n	80049ca <chMtxLockS+0x8a>
 800495e:	2b07      	cmp	r3, #7
 8004960:	d020      	beq.n	80049a4 <chMtxLockS+0x64>
 8004962:	b19b      	cbz	r3, 800498c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 8004964:	4623      	mov	r3, r4
 8004966:	e003      	b.n	8004970 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	68aa      	ldr	r2, [r5, #8]
 800496c:	4291      	cmp	r1, r2
 800496e:	d302      	bcc.n	8004976 <chMtxLockS+0x36>
    cp = cp->queue.next;
 8004970:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004972:	429c      	cmp	r4, r3
 8004974:	d1f8      	bne.n	8004968 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8004976:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 8004978:	2006      	movs	r0, #6
 800497a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800497e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8004980:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8004982:	626c      	str	r4, [r5, #36]	; 0x24
}
 8004984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8004988:	f7fe bb8a 	b.w	80030a0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800498c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004990:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8004992:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8004994:	f7fc fd34 	bl	8001400 <chSchReadyI>
          break;
 8004998:	e7e4      	b.n	8004964 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800499a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800499c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 80049a0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80049a4:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80049a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049aa:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80049ac:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80049ae:	4633      	mov	r3, r6
 80049b0:	e002      	b.n	80049b8 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	428a      	cmp	r2, r1
 80049b6:	d802      	bhi.n	80049be <chMtxLockS+0x7e>
    cp = cp->queue.next;
 80049b8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80049ba:	429e      	cmp	r6, r3
 80049bc:	d1f9      	bne.n	80049b2 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80049c4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80049c6:	6058      	str	r0, [r3, #4]
 80049c8:	e7cc      	b.n	8004964 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 80049ca:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80049ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049d0:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80049d2:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80049d4:	4633      	mov	r3, r6
 80049d6:	e002      	b.n	80049de <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80049d8:	6899      	ldr	r1, [r3, #8]
 80049da:	428a      	cmp	r2, r1
 80049dc:	d802      	bhi.n	80049e4 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 80049de:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80049e0:	429e      	cmp	r6, r3
 80049e2:	d1f9      	bne.n	80049d8 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80049ea:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80049ec:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80049ee:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 80049f0:	68aa      	ldr	r2, [r5, #8]
 80049f2:	6883      	ldr	r3, [r0, #8]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d3ad      	bcc.n	8004954 <chMtxLockS+0x14>
 80049f8:	e7b4      	b.n	8004964 <chMtxLockS+0x24>
 80049fa:	bf00      	nop
 80049fc:	200009b0 	.word	0x200009b0

08004a00 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004a00:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8004a02:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004a06:	f7ff facb 	bl	8003fa0 <chThdSleep>
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8004a10:	4c06      	ldr	r4, [pc, #24]	; (8004a2c <thread4B+0x2c>)
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff ff94 	bl	8004940 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7fc fde9 	bl	80015f0 <chMtxUnlockS>
  chSchRescheduleS();
 8004a1e:	f7fd ff87 	bl	8002930 <chSchRescheduleS>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f383 8811 	msr	BASEPRI, r3
}
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000083c 	.word	0x2000083c

08004a30 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8004a30:	b508      	push	{r3, lr}
 8004a32:	2320      	movs	r3, #32
 8004a34:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8004a38:	f7ff ff82 	bl	8004940 <chMtxLockS>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f383 8811 	msr	BASEPRI, r3
}
 8004a42:	bd08      	pop	{r3, pc}
	...

08004a50 <chHeapAllocAligned.constprop.0>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8004a54:	4e38      	ldr	r6, [pc, #224]	; (8004b38 <chHeapAllocAligned.constprop.0+0xe8>)
 8004a56:	2800      	cmp	r0, #0
 8004a58:	bf18      	it	ne
 8004a5a:	4606      	movne	r6, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8004a5c:	f106 080c 	add.w	r8, r6, #12
 8004a60:	4640      	mov	r0, r8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004a62:	1dcf      	adds	r7, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004a64:	460d      	mov	r5, r1
  H_LOCK(heapp);
 8004a66:	f7ff ffe3 	bl	8004a30 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004a6a:	6872      	ldr	r2, [r6, #4]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004a6c:	08ff      	lsrs	r7, r7, #3
 8004a6e:	1d31      	adds	r1, r6, #4
  while (H_NEXT(qp) != NULL) {
 8004a70:	b90a      	cbnz	r2, 8004a76 <chHeapAllocAligned.constprop.0+0x26>
 8004a72:	e019      	b.n	8004aa8 <chHeapAllocAligned.constprop.0+0x58>
 8004a74:	461a      	mov	r2, r3
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004a76:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004a7a:	f102 030f 	add.w	r3, r2, #15
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004a82:	f10c 0401 	add.w	r4, ip, #1
 8004a86:	4699      	mov	r9, r3
 8004a88:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004a8c:	3b08      	subs	r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004a8e:	eba4 0009 	sub.w	r0, r4, r9
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8004a98:	d202      	bcs.n	8004aa0 <chHeapAllocAligned.constprop.0+0x50>
 8004a9a:	ebb7 0fe0 	cmp.w	r7, r0, asr #3
 8004a9e:	d913      	bls.n	8004ac8 <chHeapAllocAligned.constprop.0+0x78>
  while (H_NEXT(qp) != NULL) {
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e5      	bne.n	8004a74 <chHeapAllocAligned.constprop.0+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	f7fe f829 	bl	8002b00 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8004aae:	6833      	ldr	r3, [r6, #0]
 8004ab0:	b3bb      	cbz	r3, 8004b22 <chHeapAllocAligned.constprop.0+0xd2>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	00f8      	lsls	r0, r7, #3
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8004aba:	4681      	mov	r9, r0
 8004abc:	b108      	cbz	r0, 8004ac2 <chHeapAllocAligned.constprop.0+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8004abe:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8004ac2:	4648      	mov	r0, r9
 8004ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d818      	bhi.n	8004afe <chHeapAllocAligned.constprop.0+0xae>
        if (H_PAGES(hp) == pages) {
 8004acc:	4567      	cmp	r7, ip
 8004ace:	d02c      	beq.n	8004b2a <chHeapAllocAligned.constprop.0+0xda>
          fp = H_BLOCK(hp) + pages;
 8004ad0:	3701      	adds	r7, #1
 8004ad2:	eb02 00c7 	add.w	r0, r2, r7, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004ad6:	f100 0308 	add.w	r3, r0, #8
 8004ada:	1ae3      	subs	r3, r4, r3
 8004adc:	10db      	asrs	r3, r3, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004ade:	6814      	ldr	r4, [r2, #0]
 8004ae0:	f842 4037 	str.w	r4, [r2, r7, lsl #3]
 8004ae4:	f102 0908 	add.w	r9, r2, #8
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004ae8:	6043      	str	r3, [r0, #4]
          H_NEXT(qp) = fp;
 8004aea:	6008      	str	r0, [r1, #0]
 8004aec:	4613      	mov	r3, r2
      H_UNLOCK(heapp);
 8004aee:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 8004af0:	e9c3 6500 	strd	r6, r5, [r3]
      H_UNLOCK(heapp);
 8004af4:	f7fe f804 	bl	8002b00 <chMtxUnlock>
}
 8004af8:	4648      	mov	r0, r9
 8004afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004afe:	f102 0108 	add.w	r1, r2, #8
 8004b02:	1a59      	subs	r1, r3, r1
 8004b04:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8004b06:	4577      	cmp	r7, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004b08:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8004b0a:	d2f0      	bcs.n	8004aee <chHeapAllocAligned.constprop.0+0x9e>
          fp = H_BLOCK(ahp) + pages;
 8004b0c:	1c7c      	adds	r4, r7, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004b0e:	43f9      	mvns	r1, r7
          fp = H_BLOCK(ahp) + pages;
 8004b10:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 8004b14:	6817      	ldr	r7, [r2, #0]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004b16:	4471      	add	r1, lr
 8004b18:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8004b1a:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
          H_NEXT(hp) = fp;
 8004b1e:	6010      	str	r0, [r2, #0]
 8004b20:	e7e5      	b.n	8004aee <chHeapAllocAligned.constprop.0+0x9e>
  return NULL;
 8004b22:	4699      	mov	r9, r3
}
 8004b24:	4648      	mov	r0, r9
 8004b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          H_NEXT(qp) = H_NEXT(hp);
 8004b2a:	4691      	mov	r9, r2
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	f859 2b08 	ldr.w	r2, [r9], #8
 8004b32:	600a      	str	r2, [r1, #0]
 8004b34:	e7db      	b.n	8004aee <chHeapAllocAligned.constprop.0+0x9e>
 8004b36:	bf00      	nop
 8004b38:	20001358 	.word	0x20001358
 8004b3c:	00000000 	.word	0x00000000

08004b40 <dyn_create_object_heap>:
                                             size_t size) {
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8004b42:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8004b44:	42a1      	cmp	r1, r4
                                             size_t size) {
 8004b46:	460d      	mov	r5, r1
 8004b48:	4606      	mov	r6, r0
 8004b4a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8004b4c:	d103      	bne.n	8004b56 <dyn_create_object_heap+0x16>
 8004b4e:	e00d      	b.n	8004b6c <dyn_create_object_heap+0x2c>
    p = p->next;
 8004b50:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8004b52:	42a5      	cmp	r5, r4
 8004b54:	d00a      	beq.n	8004b6c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8004b56:	2208      	movs	r2, #8
 8004b58:	4631      	mov	r1, r6
 8004b5a:	18a0      	adds	r0, r4, r2
 8004b5c:	f005 fa0a 	bl	8009f74 <strncmp>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d1f5      	bne.n	8004b50 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8004b64:	b114      	cbz	r4, 8004b6c <dyn_create_object_heap+0x2c>
    return NULL;
 8004b66:	4604      	mov	r4, r0
}
 8004b68:	4620      	mov	r0, r4
 8004b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7ff ff6e 	bl	8004a50 <chHeapAllocAligned.constprop.0>
  if (dep == NULL) {
 8004b74:	4604      	mov	r4, r0
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d0f6      	beq.n	8004b68 <dyn_create_object_heap+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4410      	add	r0, r2
 8004b80:	f005 fa36 	bl	8009ff0 <strncpy>
  dep->next = dlp->next;
 8004b84:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8004b86:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8004b88:	e9c4 3200 	strd	r3, r2, [r4]
}
 8004b8c:	4620      	mov	r0, r4
  dlp->next = dep;
 8004b8e:	602c      	str	r4, [r5, #0]
}
 8004b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b92:	bf00      	nop
	...

08004ba0 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	4617      	mov	r7, r2
 8004ba6:	461e      	mov	r6, r3
 8004ba8:	460d      	mov	r5, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004baa:	f7ff ff51 	bl	8004a50 <chHeapAllocAligned.constprop.0>
  if (wsp == NULL) {
 8004bae:	4604      	mov	r4, r0
 8004bb0:	b1c0      	cbz	r0, 8004be4 <chThdCreateFromHeap+0x44>
  thread_descriptor_t td = {
 8004bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bb4:	9304      	str	r3, [sp, #16]
    (stkalign_t *)((uint8_t *)wsp + size),
 8004bb6:	4405      	add	r5, r0
  thread_descriptor_t td = {
 8004bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bba:	9305      	str	r3, [sp, #20]
 8004bbc:	9502      	str	r5, [sp, #8]
 8004bbe:	e9cd 7000 	strd	r7, r0, [sp]
 8004bc2:	9603      	str	r6, [sp, #12]
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8004bca:	4668      	mov	r0, sp
 8004bcc:	f7fc fba0 	bl	8001310 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8004bd6:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8004bd8:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8004bda:	f7fe f971 	bl	8002ec0 <chSchWakeupS>
 8004bde:	2300      	movs	r3, #0
 8004be0:	f383 8811 	msr	BASEPRI, r3
}
 8004be4:	4620      	mov	r0, r4
 8004be6:	b007      	add	sp, #28
 8004be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bea:	bf00      	nop
 8004bec:	0000      	movs	r0, r0
	...

08004bf0 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004bf4:	4d33      	ldr	r5, [pc, #204]	; (8004cc4 <chPipeWriteTimeout.constprop.0+0xd4>)
 8004bf6:	7d2c      	ldrb	r4, [r5, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004bf8:	b083      	sub	sp, #12
  if (pp->reset) {
 8004bfa:	b11c      	cbz	r4, 8004c04 <chPipeWriteTimeout.constprop.0+0x14>
    return (size_t)0;
 8004bfc:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8004bfe:	b003      	add	sp, #12
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	4682      	mov	sl, r0
  PW_LOCK(pp);
 8004c06:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004c0a:	f7ff ff11 	bl	8004a30 <chMtxLock>
 8004c0e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004ccc <chPipeWriteTimeout.constprop.0+0xdc>
    *trp = NULL;
 8004c12:	9401      	str	r4, [sp, #4]
 8004c14:	4657      	mov	r7, sl
  PC_LOCK(pp);
 8004c16:	f105 0920 	add.w	r9, r5, #32
 8004c1a:	e01d      	b.n	8004c58 <chPipeWriteTimeout.constprop.0+0x68>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004c1c:	f7fb fb66 	bl	80002ec <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8004c20:	6828      	ldr	r0, [r5, #0]
 8004c22:	eb08 0106 	add.w	r1, r8, r6
 8004c26:	465a      	mov	r2, fp
 8004c28:	f7fb fb60 	bl	80002ec <memcpy>
    pp->wrptr = pp->buffer + s2;
 8004c2c:	682b      	ldr	r3, [r5, #0]
  PC_UNLOCK(pp);
 8004c2e:	4648      	mov	r0, r9
    pp->wrptr = pp->buffer + s2;
 8004c30:	445b      	add	r3, fp
 8004c32:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8004c34:	f7fd ff64 	bl	8002b00 <chMtxUnlock>
      n  -= done;
 8004c38:	1b3f      	subs	r7, r7, r4
      bp += done;
 8004c3a:	44a0      	add	r8, r4
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8004c42:	69e8      	ldr	r0, [r5, #28]
    chSchWakeupS(tp, msg);
 8004c44:	2100      	movs	r1, #0
  if (*trp != NULL) {
 8004c46:	b118      	cbz	r0, 8004c50 <chPipeWriteTimeout.constprop.0+0x60>
    *trp = NULL;
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	61eb      	str	r3, [r5, #28]
    chSchWakeupS(tp, msg);
 8004c4c:	f7fe f938 	bl	8002ec0 <chSchWakeupS>
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 8004c56:	b337      	cbz	r7, 8004ca6 <chPipeWriteTimeout.constprop.0+0xb6>
  PC_LOCK(pp);
 8004c58:	4648      	mov	r0, r9
 8004c5a:	f7ff fee9 	bl	8004a30 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 8004c5e:	e9d5 4600 	ldrd	r4, r6, [r5]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8004c62:	692b      	ldr	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 8004c64:	68a8      	ldr	r0, [r5, #8]
  return (size_t)(pp->top - pp->buffer);
 8004c66:	1b34      	subs	r4, r6, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8004c68:	1ae4      	subs	r4, r4, r3
 8004c6a:	42bc      	cmp	r4, r7
 8004c6c:	bf28      	it	cs
 8004c6e:	463c      	movcs	r4, r7
 8004c70:	1a36      	subs	r6, r6, r0
  pp->cnt += n;
 8004c72:	4423      	add	r3, r4
  if (n < s1) {
 8004c74:	42b4      	cmp	r4, r6
  pp->cnt += n;
 8004c76:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8004c78:	d31c      	bcc.n	8004cb4 <chPipeWriteTimeout.constprop.0+0xc4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	4641      	mov	r1, r8
    s2 = n - s1;
 8004c7e:	eba4 0b06 	sub.w	fp, r4, r6
  else if (n > s1) {
 8004c82:	d8cb      	bhi.n	8004c1c <chPipeWriteTimeout.constprop.0+0x2c>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8004c84:	4622      	mov	r2, r4
 8004c86:	f7fb fb31 	bl	80002ec <memcpy>
    pp->wrptr = pp->buffer;
 8004c8a:	682b      	ldr	r3, [r5, #0]
 8004c8c:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8004c8e:	4648      	mov	r0, r9
 8004c90:	f7fd ff36 	bl	8002b00 <chMtxUnlock>
    if (done == (size_t)0) {
 8004c94:	2c00      	cmp	r4, #0
 8004c96:	d1cf      	bne.n	8004c38 <chPipeWriteTimeout.constprop.0+0x48>
 8004c98:	2320      	movs	r3, #32
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f384 8811 	msr	BASEPRI, r4
 8004ca2:	ebaa 0a07 	sub.w	sl, sl, r7
  PW_UNLOCK(pp);
 8004ca6:	4808      	ldr	r0, [pc, #32]	; (8004cc8 <chPipeWriteTimeout.constprop.0+0xd8>)
 8004ca8:	f7fd ff2a 	bl	8002b00 <chMtxUnlock>
 8004cac:	4650      	mov	r0, sl
}
 8004cae:	b003      	add	sp, #12
 8004cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	f7fb fb18 	bl	80002ec <memcpy>
    pp->wrptr += n;
 8004cbc:	68ab      	ldr	r3, [r5, #8]
 8004cbe:	4423      	add	r3, r4
 8004cc0:	60ab      	str	r3, [r5, #8]
 8004cc2:	e7e4      	b.n	8004c8e <chPipeWriteTimeout.constprop.0+0x9e>
 8004cc4:	2000088c 	.word	0x2000088c
 8004cc8:	200008bc 	.word	0x200008bc
 8004ccc:	0800c534 	.word	0x0800c534

08004cd0 <chPipeReadTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004cd4:	4c32      	ldr	r4, [pc, #200]	; (8004da0 <chPipeReadTimeout.constprop.0+0xd0>)
 8004cd6:	7d25      	ldrb	r5, [r4, #20]
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8004cd8:	b083      	sub	sp, #12
  if (pp->reset) {
 8004cda:	b11d      	cbz	r5, 8004ce4 <chPipeReadTimeout.constprop.0+0x14>
    return (size_t)0;
 8004cdc:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 8004cde:	b003      	add	sp, #12
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	468a      	mov	sl, r1
 8004ce6:	4680      	mov	r8, r0
  PR_LOCK(pp);
 8004ce8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8004cec:	f7ff fea0 	bl	8004a30 <chMtxLock>
 8004cf0:	4657      	mov	r7, sl
    *trp = NULL;
 8004cf2:	9501      	str	r5, [sp, #4]
  PC_LOCK(pp);
 8004cf4:	f104 0920 	add.w	r9, r4, #32
 8004cf8:	e01d      	b.n	8004d36 <chPipeReadTimeout.constprop.0+0x66>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004cfa:	f7fb faf7 	bl	80002ec <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8004cfe:	6821      	ldr	r1, [r4, #0]
 8004d00:	eb08 0006 	add.w	r0, r8, r6
 8004d04:	465a      	mov	r2, fp
 8004d06:	f7fb faf1 	bl	80002ec <memcpy>
    pp->rdptr = pp->buffer + s2;
 8004d0a:	6823      	ldr	r3, [r4, #0]
  PC_UNLOCK(pp);
 8004d0c:	4648      	mov	r0, r9
    pp->rdptr = pp->buffer + s2;
 8004d0e:	445b      	add	r3, fp
 8004d10:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 8004d12:	f7fd fef5 	bl	8002b00 <chMtxUnlock>
      n  -= done;
 8004d16:	1b7f      	subs	r7, r7, r5
      bp += done;
 8004d18:	44a8      	add	r8, r5
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8004d20:	69a0      	ldr	r0, [r4, #24]
    chSchWakeupS(tp, msg);
 8004d22:	2100      	movs	r1, #0
  if (*trp != NULL) {
 8004d24:	b118      	cbz	r0, 8004d2e <chPipeReadTimeout.constprop.0+0x5e>
    *trp = NULL;
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	61a3      	str	r3, [r4, #24]
    chSchWakeupS(tp, msg);
 8004d2a:	f7fe f8c9 	bl	8002ec0 <chSchWakeupS>
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 8004d34:	b32f      	cbz	r7, 8004d82 <chPipeReadTimeout.constprop.0+0xb2>
  PC_LOCK(pp);
 8004d36:	4648      	mov	r0, r9
 8004d38:	f7ff fe7a 	bl	8004a30 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 8004d3c:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8004d40:	6866      	ldr	r6, [r4, #4]
 8004d42:	42bb      	cmp	r3, r7
 8004d44:	461d      	mov	r5, r3
 8004d46:	eba6 0601 	sub.w	r6, r6, r1
 8004d4a:	bf28      	it	cs
 8004d4c:	463d      	movcs	r5, r7
  pp->cnt -= n;
 8004d4e:	1b5b      	subs	r3, r3, r5
  if (n < s1) {
 8004d50:	42b5      	cmp	r5, r6
  pp->cnt -= n;
 8004d52:	6123      	str	r3, [r4, #16]
  if (n < s1) {
 8004d54:	d31c      	bcc.n	8004d90 <chPipeReadTimeout.constprop.0+0xc0>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004d56:	4632      	mov	r2, r6
    s2 = n - s1;
 8004d58:	eba5 0b06 	sub.w	fp, r5, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8004d5c:	4640      	mov	r0, r8
  else if (n > s1) {
 8004d5e:	d8cc      	bhi.n	8004cfa <chPipeReadTimeout.constprop.0+0x2a>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8004d60:	462a      	mov	r2, r5
 8004d62:	f7fb fac3 	bl	80002ec <memcpy>
    pp->rdptr = pp->buffer;
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 8004d6a:	4648      	mov	r0, r9
 8004d6c:	f7fd fec8 	bl	8002b00 <chMtxUnlock>
    if (done == (size_t)0) {
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	d1d0      	bne.n	8004d16 <chPipeReadTimeout.constprop.0+0x46>
 8004d74:	2320      	movs	r3, #32
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f385 8811 	msr	BASEPRI, r5
 8004d7e:	ebaa 0a07 	sub.w	sl, sl, r7
  PR_UNLOCK(pp);
 8004d82:	4808      	ldr	r0, [pc, #32]	; (8004da4 <chPipeReadTimeout.constprop.0+0xd4>)
 8004d84:	f7fd febc 	bl	8002b00 <chMtxUnlock>
 8004d88:	4650      	mov	r0, sl
}
 8004d8a:	b003      	add	sp, #12
 8004d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8004d90:	462a      	mov	r2, r5
 8004d92:	4640      	mov	r0, r8
 8004d94:	f7fb faaa 	bl	80002ec <memcpy>
    pp->rdptr += n;
 8004d98:	68e3      	ldr	r3, [r4, #12]
 8004d9a:	442b      	add	r3, r5
 8004d9c:	60e3      	str	r3, [r4, #12]
 8004d9e:	e7e4      	b.n	8004d6a <chPipeReadTimeout.constprop.0+0x9a>
 8004da0:	2000088c 	.word	0x2000088c
 8004da4:	200008cc 	.word	0x200008cc
	...

08004db0 <oslib_test_003_002_execute>:

static void oslib_test_003_002_execute(void) {
 8004db0:	b530      	push	{r4, r5, lr}

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8004db2:	4d22      	ldr	r5, [pc, #136]	; (8004e3c <oslib_test_003_002_execute+0x8c>)
static void oslib_test_003_002_execute(void) {
 8004db4:	b085      	sub	sp, #20
  test_set_step(1);
 8004db6:	2301      	movs	r3, #1
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004db8:	2110      	movs	r1, #16
 8004dba:	4668      	mov	r0, sp
  test_set_step(1);
 8004dbc:	602b      	str	r3, [r5, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8004dbe:	f7ff ff87 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "wrong size");
 8004dc2:	fab0 f080 	clz	r0, r0
 8004dc6:	491e      	ldr	r1, [pc, #120]	; (8004e40 <oslib_test_003_002_execute+0x90>)
 8004dc8:	0940      	lsrs	r0, r0, #5
 8004dca:	f7fb ff29 	bl	8000c20 <_test_assert>
 8004dce:	b940      	cbnz	r0, 8004de2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004dd0:	4c1c      	ldr	r4, [pc, #112]	; (8004e44 <oslib_test_003_002_execute+0x94>)
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	68e3      	ldr	r3, [r4, #12]
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <oslib_test_003_002_execute+0x66>
 8004dda:	491b      	ldr	r1, [pc, #108]	; (8004e48 <oslib_test_003_002_execute+0x98>)
 8004ddc:	f7fb ff20 	bl	8000c20 <_test_assert>
 8004de0:	b108      	cbz	r0, 8004de6 <oslib_test_003_002_execute+0x36>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 8004de2:	b005      	add	sp, #20
 8004de4:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 8004de6:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004de8:	2010      	movs	r0, #16
  test_set_step(2);
 8004dea:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8004dec:	f7ff ff00 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 8004df0:	f1a0 0008 	sub.w	r0, r0, #8
 8004df4:	fab0 f080 	clz	r0, r0
 8004df8:	4911      	ldr	r1, [pc, #68]	; (8004e40 <oslib_test_003_002_execute+0x90>)
 8004dfa:	0940      	lsrs	r0, r0, #5
 8004dfc:	f7fb ff10 	bl	8000c20 <_test_assert>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d1ee      	bne.n	8004de2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004e04:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00c      	beq.n	8004e26 <oslib_test_003_002_execute+0x76>
 8004e0c:	490e      	ldr	r1, [pc, #56]	; (8004e48 <oslib_test_003_002_execute+0x98>)
 8004e0e:	f7fb ff07 	bl	8000c20 <_test_assert>
}
 8004e12:	b005      	add	sp, #20
 8004e14:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8004e16:	68a2      	ldr	r2, [r4, #8]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d1de      	bne.n	8004dda <oslib_test_003_002_execute+0x2a>
 8004e1c:	6920      	ldr	r0, [r4, #16]
 8004e1e:	fab0 f080 	clz	r0, r0
 8004e22:	0940      	lsrs	r0, r0, #5
 8004e24:	e7d9      	b.n	8004dda <oslib_test_003_002_execute+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d1ef      	bne.n	8004e0c <oslib_test_003_002_execute+0x5c>
 8004e2c:	6920      	ldr	r0, [r4, #16]
 8004e2e:	f1a0 0008 	sub.w	r0, r0, #8
 8004e32:	fab0 f080 	clz	r0, r0
 8004e36:	0940      	lsrs	r0, r0, #5
 8004e38:	e7e8      	b.n	8004e0c <oslib_test_003_002_execute+0x5c>
 8004e3a:	bf00      	nop
 8004e3c:	20001cac 	.word	0x20001cac
 8004e40:	0800aff8 	.word	0x0800aff8
 8004e44:	2000088c 	.word	0x2000088c
 8004e48:	0800b248 	.word	0x0800b248
 8004e4c:	00000000 	.word	0x00000000

08004e50 <chFactoryRegisterObject.constprop.0>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8004e54:	4807      	ldr	r0, [pc, #28]	; (8004e74 <chFactoryRegisterObject.constprop.0+0x24>)
 8004e56:	f7ff fdeb 	bl	8004a30 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 8004e5a:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <chFactoryRegisterObject.constprop.0+0x28>)
 8004e5c:	4807      	ldr	r0, [pc, #28]	; (8004e7c <chFactoryRegisterObject.constprop.0+0x2c>)
 8004e5e:	1f11      	subs	r1, r2, #4
 8004e60:	f7fd fc5e 	bl	8002720 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8004e64:	4604      	mov	r4, r0
 8004e66:	b100      	cbz	r0, 8004e6a <chFactoryRegisterObject.constprop.0+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8004e68:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 8004e6a:	4802      	ldr	r0, [pc, #8]	; (8004e74 <chFactoryRegisterObject.constprop.0+0x24>)
 8004e6c:	f7fd fe48 	bl	8002b00 <chMtxUnlock>

  return rop;
}
 8004e70:	4620      	mov	r0, r4
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	20001230 	.word	0x20001230
 8004e78:	20001244 	.word	0x20001244
 8004e7c:	0800b25c 	.word	0x0800b25c

08004e80 <chFactoryFindObject.constprop.0>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8004e80:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8004e82:	4d07      	ldr	r5, [pc, #28]	; (8004ea0 <chFactoryFindObject.constprop.0+0x20>)
 8004e84:	4628      	mov	r0, r5
 8004e86:	f7ff fdd3 	bl	8004a30 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 8004e8a:	f105 0110 	add.w	r1, r5, #16
 8004e8e:	4805      	ldr	r0, [pc, #20]	; (8004ea4 <chFactoryFindObject.constprop.0+0x24>)
 8004e90:	f7fd fc26 	bl	80026e0 <dyn_find_object>
 8004e94:	4604      	mov	r4, r0

  F_UNLOCK();
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7fd fe32 	bl	8002b00 <chMtxUnlock>

  return rop;
}
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20001230 	.word	0x20001230
 8004ea4:	0800b25c 	.word	0x0800b25c
	...

08004eb0 <chFactoryCreateBuffer.constprop.0>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8004eb0:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8004eb2:	480a      	ldr	r0, [pc, #40]	; (8004edc <chFactoryCreateBuffer.constprop.0+0x2c>)
 8004eb4:	f7ff fdbc 	bl	8004a30 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8004eb8:	4909      	ldr	r1, [pc, #36]	; (8004ee0 <chFactoryCreateBuffer.constprop.0+0x30>)
 8004eba:	480a      	ldr	r0, [pc, #40]	; (8004ee4 <chFactoryCreateBuffer.constprop.0+0x34>)
 8004ebc:	2280      	movs	r2, #128	; 0x80
 8004ebe:	f7ff fe3f 	bl	8004b40 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	b120      	cbz	r0, 8004ed0 <chFactoryCreateBuffer.constprop.0+0x20>
    /* Initializing buffer object data.*/
    memset((void *)(dbp + 1), 0, size);
 8004ec6:	2280      	movs	r2, #128	; 0x80
 8004ec8:	2100      	movs	r1, #0
 8004eca:	3010      	adds	r0, #16
 8004ecc:	f004 ff9a 	bl	8009e04 <memset>
  }

  F_UNLOCK();
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <chFactoryCreateBuffer.constprop.0+0x2c>)
 8004ed2:	f7fd fe15 	bl	8002b00 <chMtxUnlock>

  return dbp;
}
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	bf00      	nop
 8004edc:	20001230 	.word	0x20001230
 8004ee0:	20001254 	.word	0x20001254
 8004ee4:	0800b264 	.word	0x0800b264
	...

08004ef0 <chFactoryFindBuffer.constprop.0>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8004ef0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8004ef2:	4d07      	ldr	r5, [pc, #28]	; (8004f10 <chFactoryFindBuffer.constprop.0+0x20>)
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f7ff fd9b 	bl	8004a30 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 8004efa:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <chFactoryFindBuffer.constprop.0+0x24>)
 8004f00:	f7fd fbee 	bl	80026e0 <dyn_find_object>
 8004f04:	4604      	mov	r4, r0

  F_UNLOCK();
 8004f06:	4628      	mov	r0, r5
 8004f08:	f7fd fdfa 	bl	8002b00 <chMtxUnlock>

  return dbp;
}
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	20001230 	.word	0x20001230
 8004f14:	0800b264 	.word	0x0800b264
	...

08004f20 <chFactoryCreateSemaphore.constprop.0>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8004f20:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8004f22:	480a      	ldr	r0, [pc, #40]	; (8004f4c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 8004f24:	f7ff fd84 	bl	8004a30 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <chFactoryCreateSemaphore.constprop.0+0x30>)
 8004f2a:	480a      	ldr	r0, [pc, #40]	; (8004f54 <chFactoryCreateSemaphore.constprop.0+0x34>)
 8004f2c:	1f11      	subs	r1, r2, #4
 8004f2e:	f7fd fbf7 	bl	8002720 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8004f32:	4604      	mov	r4, r0
 8004f34:	b128      	cbz	r0, 8004f42 <chFactoryCreateSemaphore.constprop.0+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8004f36:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 8004f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  sp->cnt = n;
 8004f3e:	2200      	movs	r2, #0
 8004f40:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8004f42:	4802      	ldr	r0, [pc, #8]	; (8004f4c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 8004f44:	f7fd fddc 	bl	8002b00 <chMtxUnlock>

  return dsp;
}
 8004f48:	4620      	mov	r0, r4
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	20001230 	.word	0x20001230
 8004f50:	2000125c 	.word	0x2000125c
 8004f54:	0800b26c 	.word	0x0800b26c
	...

08004f60 <chFactoryFindSemaphore.constprop.0>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8004f60:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8004f62:	4d07      	ldr	r5, [pc, #28]	; (8004f80 <chFactoryFindSemaphore.constprop.0+0x20>)
 8004f64:	4628      	mov	r0, r5
 8004f66:	f7ff fd63 	bl	8004a30 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 8004f6a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <chFactoryFindSemaphore.constprop.0+0x24>)
 8004f70:	f7fd fbb6 	bl	80026e0 <dyn_find_object>
 8004f74:	4604      	mov	r4, r0

  F_UNLOCK();
 8004f76:	4628      	mov	r0, r5
 8004f78:	f7fd fdc2 	bl	8002b00 <chMtxUnlock>

  return dsp;
}
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20001230 	.word	0x20001230
 8004f84:	0800b26c 	.word	0x0800b26c
	...

08004f90 <chFactoryCreateMailbox.constprop.0>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8004f90:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8004f92:	4811      	ldr	r0, [pc, #68]	; (8004fd8 <chFactoryCreateMailbox.constprop.0+0x48>)
 8004f94:	f7ff fd4c 	bl	8004a30 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8004f98:	4910      	ldr	r1, [pc, #64]	; (8004fdc <chFactoryCreateMailbox.constprop.0+0x4c>)
 8004f9a:	4811      	ldr	r0, [pc, #68]	; (8004fe0 <chFactoryCreateMailbox.constprop.0+0x50>)
 8004f9c:	2278      	movs	r2, #120	; 0x78
 8004f9e:	f7ff fdcf 	bl	8004b40 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	b198      	cbz	r0, 8004fce <chFactoryCreateMailbox.constprop.0+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8004fa6:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 8004faa:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 8004fae:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8004fb2:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004fb6:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 8004fba:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 8004fbe:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8004fc2:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8004fc4:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8004fc6:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8004fc8:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8004fca:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 8004fce:	4802      	ldr	r0, [pc, #8]	; (8004fd8 <chFactoryCreateMailbox.constprop.0+0x48>)
 8004fd0:	f7fd fd96 	bl	8002b00 <chMtxUnlock>

  return dmp;
}
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20001230 	.word	0x20001230
 8004fdc:	2000126c 	.word	0x2000126c
 8004fe0:	0800b274 	.word	0x0800b274
	...

08004ff0 <chFactoryFindMailbox.constprop.0>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8004ff0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8004ff2:	4d07      	ldr	r5, [pc, #28]	; (8005010 <chFactoryFindMailbox.constprop.0+0x20>)
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f7ff fd1b 	bl	8004a30 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 8004ffa:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 8004ffe:	4805      	ldr	r0, [pc, #20]	; (8005014 <chFactoryFindMailbox.constprop.0+0x24>)
 8005000:	f7fd fb6e 	bl	80026e0 <dyn_find_object>
 8005004:	4604      	mov	r4, r0

  F_UNLOCK();
 8005006:	4628      	mov	r0, r5
 8005008:	f7fd fd7a 	bl	8002b00 <chMtxUnlock>

  return dmp;
}
 800500c:	4620      	mov	r0, r4
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20001230 	.word	0x20001230
 8005014:	0800b274 	.word	0x0800b274
	...

08005020 <chFactoryCreateObjectsFIFO.constprop.0>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8005020:	b570      	push	{r4, r5, r6, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005022:	4818      	ldr	r0, [pc, #96]	; (8005084 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 8005024:	f7ff fd04 	bl	8004a30 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8005028:	4917      	ldr	r1, [pc, #92]	; (8005088 <chFactoryCreateObjectsFIFO.constprop.0+0x68>)
 800502a:	4818      	ldr	r0, [pc, #96]	; (800508c <chFactoryCreateObjectsFIFO.constprop.0+0x6c>)
 800502c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005030:	f7ff fd86 	bl	8004b40 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8005034:	4604      	mov	r4, r0
 8005036:	b300      	cbz	r0, 800507a <chFactoryCreateObjectsFIFO.constprop.0+0x5a>
  mp->next = NULL;
 8005038:	2600      	movs	r6, #0
    msg_t *msgbuf = (msg_t *)(dofp + 1);

    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
                            (void *)&msgbuf[objn], msgbuf);
 800503a:	f100 0594 	add.w	r5, r0, #148	; 0x94
  mp->object_size = size;
 800503e:	2210      	movs	r2, #16
  mp->align = align;
 8005040:	2304      	movs	r3, #4
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8005042:	3010      	adds	r0, #16
 8005044:	e9c4 2308 	strd	r2, r3, [r4, #32]
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8005048:	4629      	mov	r1, r5
 800504a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  mp->next = NULL;
 800504e:	61e6      	str	r6, [r4, #28]
  mp->provider = provider;
 8005050:	62a6      	str	r6, [r4, #40]	; 0x28
 8005052:	61a6      	str	r6, [r4, #24]
 8005054:	f7fd fd34 	bl	8002ac0 <chGuardedPoolLoadArray>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8005058:	f104 0354 	add.w	r3, r4, #84	; 0x54
  chThdQueueObjectInit(&mbp->qw);
 800505c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8005060:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8005064:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8005068:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 800506c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8005070:	6325      	str	r5, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8005072:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8005074:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  mbp->buffer = buf;
 8005078:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  F_UNLOCK();
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 800507c:	f7fd fd40 	bl	8002b00 <chMtxUnlock>

  return dofp;
}
 8005080:	4620      	mov	r0, r4
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	20001230 	.word	0x20001230
 8005088:	20001270 	.word	0x20001270
 800508c:	0800b27c 	.word	0x0800b27c

08005090 <chFactoryFindObjectsFIFO.constprop.0>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8005090:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005092:	4d07      	ldr	r5, [pc, #28]	; (80050b0 <chFactoryFindObjectsFIFO.constprop.0+0x20>)
 8005094:	4628      	mov	r0, r5
 8005096:	f7ff fccb 	bl	8004a30 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800509a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800509e:	4805      	ldr	r0, [pc, #20]	; (80050b4 <chFactoryFindObjectsFIFO.constprop.0+0x24>)
 80050a0:	f7fd fb1e 	bl	80026e0 <dyn_find_object>
 80050a4:	4604      	mov	r4, r0

  F_UNLOCK();
 80050a6:	4628      	mov	r0, r5
 80050a8:	f7fd fd2a 	bl	8002b00 <chMtxUnlock>

  return dofp;
}
 80050ac:	4620      	mov	r0, r4
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	20001230 	.word	0x20001230
 80050b4:	0800b27c 	.word	0x0800b27c
	...

080050c0 <chFactoryCreatePipe.constprop.0>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 80050c0:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 80050c2:	4815      	ldr	r0, [pc, #84]	; (8005118 <chFactoryCreatePipe.constprop.0+0x58>)
 80050c4:	f7ff fcb4 	bl	8004a30 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 80050c8:	4914      	ldr	r1, [pc, #80]	; (800511c <chFactoryCreatePipe.constprop.0+0x5c>)
 80050ca:	4815      	ldr	r0, [pc, #84]	; (8005120 <chFactoryCreatePipe.constprop.0+0x60>)
 80050cc:	2270      	movs	r2, #112	; 0x70
 80050ce:	f7ff fd37 	bl	8004b40 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 80050d2:	4604      	mov	r4, r0
 80050d4:	b1d8      	cbz	r0, 800510e <chFactoryCreatePipe.constprop.0+0x4e>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 80050d6:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->cnt    = (size_t)0;
 80050da:	2300      	movs	r3, #0
  pp->top    = &buf[n];
 80050dc:	f100 0570 	add.w	r5, r0, #112	; 0x70
  pp->wrptr  = buf;
 80050e0:	e9c4 2206 	strd	r2, r2, [r4, #24]
  PC_INIT(pp);
 80050e4:	3030      	adds	r0, #48	; 0x30
  PW_INIT(pp);
 80050e6:	f104 0140 	add.w	r1, r4, #64	; 0x40
  pp->buffer = buf;
 80050ea:	6122      	str	r2, [r4, #16]
  PR_INIT(pp);
 80050ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
  pp->rtr    = NULL;
 80050f0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80050f4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 80050f8:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 80050fc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
  pp->top    = &buf[n];
 8005100:	6165      	str	r5, [r4, #20]
  pp->cnt    = (size_t)0;
 8005102:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 8005104:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 8005108:	63a3      	str	r3, [r4, #56]	; 0x38
 800510a:	64a3      	str	r3, [r4, #72]	; 0x48
 800510c:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  F_UNLOCK();
 800510e:	4802      	ldr	r0, [pc, #8]	; (8005118 <chFactoryCreatePipe.constprop.0+0x58>)
 8005110:	f7fd fcf6 	bl	8002b00 <chMtxUnlock>

  return dpp;
}
 8005114:	4620      	mov	r0, r4
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	20001230 	.word	0x20001230
 800511c:	20001274 	.word	0x20001274
 8005120:	0800b284 	.word	0x0800b284
	...

08005130 <chFactoryFindPipe.constprop.0>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8005130:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005132:	4d07      	ldr	r5, [pc, #28]	; (8005150 <chFactoryFindPipe.constprop.0+0x20>)
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff fc7b 	bl	8004a30 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800513a:	f105 0144 	add.w	r1, r5, #68	; 0x44
 800513e:	4805      	ldr	r0, [pc, #20]	; (8005154 <chFactoryFindPipe.constprop.0+0x24>)
 8005140:	f7fd face 	bl	80026e0 <dyn_find_object>
 8005144:	4604      	mov	r4, r0

  F_UNLOCK();
 8005146:	4628      	mov	r0, r5
 8005148:	f7fd fcda 	bl	8002b00 <chMtxUnlock>

  return dpp;
}
 800514c:	4620      	mov	r0, r4
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20001230 	.word	0x20001230
 8005154:	0800b284 	.word	0x0800b284
	...

08005160 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8005160:	b570      	push	{r4, r5, r6, lr}
  PC_LOCK(pp);
 8005162:	4c1f      	ldr	r4, [pc, #124]	; (80051e0 <oslib_test_003_001_execute+0x80>)
  test_set_step(1);
 8005164:	4e1f      	ldr	r6, [pc, #124]	; (80051e4 <oslib_test_003_001_execute+0x84>)
 8005166:	2501      	movs	r5, #1
static void oslib_test_003_001_execute(void) {
 8005168:	b084      	sub	sp, #16
 800516a:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 800516e:	6035      	str	r5, [r6, #0]
 8005170:	f7ff fc5e 	bl	8004a30 <chMtxLock>
  pp->wrptr = pp->buffer;
 8005174:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8005176:	7525      	strb	r5, [r4, #20]
  pp->cnt   = (size_t)0;
 8005178:	2200      	movs	r2, #0
  pp->rdptr = pp->buffer;
 800517a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800517e:	6122      	str	r2, [r4, #16]
 8005180:	2320      	movs	r3, #32
 8005182:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005186:	69a0      	ldr	r0, [r4, #24]
 8005188:	b128      	cbz	r0, 8005196 <oslib_test_003_001_execute+0x36>
    tp->u.rdymsg = msg;
 800518a:	f06f 0301 	mvn.w	r3, #1
 800518e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005190:	61a2      	str	r2, [r4, #24]
    (void) chSchReadyI(tp);
 8005192:	f7fc f935 	bl	8001400 <chSchReadyI>
  if (*trp != NULL) {
 8005196:	69e0      	ldr	r0, [r4, #28]
 8005198:	b130      	cbz	r0, 80051a8 <oslib_test_003_001_execute+0x48>
    tp->u.rdymsg = msg;
 800519a:	f06f 0301 	mvn.w	r3, #1
 800519e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61e3      	str	r3, [r4, #28]
    (void) chSchReadyI(tp);
 80051a4:	f7fc f92c 	bl	8001400 <chSchReadyI>
  chSchRescheduleS();
 80051a8:	f7fd fbc2 	bl	8002930 <chSchRescheduleS>
 80051ac:	2500      	movs	r5, #0
 80051ae:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 80051b2:	480d      	ldr	r0, [pc, #52]	; (80051e8 <oslib_test_003_001_execute+0x88>)
 80051b4:	f7fd fca4 	bl	8002b00 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	68e3      	ldr	r3, [r4, #12]
 80051bc:	4293      	cmp	r3, r2
 80051be:	d006      	beq.n	80051ce <oslib_test_003_001_execute+0x6e>
 80051c0:	4628      	mov	r0, r5
 80051c2:	490a      	ldr	r1, [pc, #40]	; (80051ec <oslib_test_003_001_execute+0x8c>)
 80051c4:	f7fb fd2c 	bl	8000c20 <_test_assert>
 80051c8:	b190      	cbz	r0, 80051f0 <oslib_test_003_001_execute+0x90>
}
 80051ca:	b004      	add	sp, #16
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80051ce:	68a2      	ldr	r2, [r4, #8]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d1f5      	bne.n	80051c0 <oslib_test_003_001_execute+0x60>
 80051d4:	6925      	ldr	r5, [r4, #16]
 80051d6:	fab5 f085 	clz	r0, r5
 80051da:	0940      	lsrs	r0, r0, #5
 80051dc:	e7f1      	b.n	80051c2 <oslib_test_003_001_execute+0x62>
 80051de:	bf00      	nop
 80051e0:	2000088c 	.word	0x2000088c
 80051e4:	20001cac 	.word	0x20001cac
 80051e8:	200008ac 	.word	0x200008ac
 80051ec:	0800b248 	.word	0x0800b248
  test_set_step(2);
 80051f0:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80051f2:	2010      	movs	r0, #16
  test_set_step(2);
 80051f4:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80051f6:	f7ff fcfb 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80051fa:	fab0 f080 	clz	r0, r0
 80051fe:	49c3      	ldr	r1, [pc, #780]	; (800550c <oslib_test_003_001_execute+0x3ac>)
 8005200:	0940      	lsrs	r0, r0, #5
 8005202:	f7fb fd0d 	bl	8000c20 <_test_assert>
 8005206:	2800      	cmp	r0, #0
 8005208:	d1df      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	68e3      	ldr	r3, [r4, #12]
 800520e:	4293      	cmp	r3, r2
 8005210:	f000 818d 	beq.w	800552e <oslib_test_003_001_execute+0x3ce>
 8005214:	49be      	ldr	r1, [pc, #760]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005216:	f7fb fd03 	bl	8000c20 <_test_assert>
 800521a:	2800      	cmp	r0, #0
 800521c:	d1d5      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(3);
 800521e:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005220:	2110      	movs	r1, #16
 8005222:	4668      	mov	r0, sp
  test_set_step(3);
 8005224:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005226:	f7ff fd53 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 800522a:	fab0 f080 	clz	r0, r0
 800522e:	49b7      	ldr	r1, [pc, #732]	; (800550c <oslib_test_003_001_execute+0x3ac>)
 8005230:	0940      	lsrs	r0, r0, #5
 8005232:	f7fb fcf5 	bl	8000c20 <_test_assert>
 8005236:	2800      	cmp	r0, #0
 8005238:	d1c7      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	68e3      	ldr	r3, [r4, #12]
 800523e:	4293      	cmp	r3, r2
 8005240:	f000 8187 	beq.w	8005552 <oslib_test_003_001_execute+0x3f2>
 8005244:	49b2      	ldr	r1, [pc, #712]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005246:	f7fb fceb 	bl	8000c20 <_test_assert>
 800524a:	2800      	cmp	r0, #0
 800524c:	d1bd      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	68e3      	ldr	r3, [r4, #12]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8005252:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005254:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005256:	4293      	cmp	r3, r2
  test_set_step(4);
 8005258:	6031      	str	r1, [r6, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800525a:	f000 8171 	beq.w	8005540 <oslib_test_003_001_execute+0x3e0>
 800525e:	49ac      	ldr	r1, [pc, #688]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005260:	f7fb fcde 	bl	8000c20 <_test_assert>
 8005264:	2800      	cmp	r0, #0
 8005266:	d1b0      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(5);
 8005268:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800526a:	2010      	movs	r0, #16
  test_set_step(5);
 800526c:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800526e:	f7ff fcbf 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005272:	f1a0 0010 	sub.w	r0, r0, #16
 8005276:	fab0 f080 	clz	r0, r0
 800527a:	49a6      	ldr	r1, [pc, #664]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 800527c:	0940      	lsrs	r0, r0, #5
 800527e:	f7fb fccf 	bl	8000c20 <_test_assert>
 8005282:	2800      	cmp	r0, #0
 8005284:	d1a1      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	68e3      	ldr	r3, [r4, #12]
 800528a:	4293      	cmp	r3, r2
 800528c:	f000 816a 	beq.w	8005564 <oslib_test_003_001_execute+0x404>
 8005290:	499f      	ldr	r1, [pc, #636]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005292:	f7fb fcc5 	bl	8000c20 <_test_assert>
 8005296:	2800      	cmp	r0, #0
 8005298:	d197      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(6);
 800529a:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800529c:	2110      	movs	r1, #16
 800529e:	4668      	mov	r0, sp
  test_set_step(6);
 80052a0:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80052a2:	f7ff fd15 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 80052a6:	f1a0 0010 	sub.w	r0, r0, #16
 80052aa:	fab0 f080 	clz	r0, r0
 80052ae:	4999      	ldr	r1, [pc, #612]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 80052b0:	0940      	lsrs	r0, r0, #5
 80052b2:	f7fb fcb5 	bl	8000c20 <_test_assert>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d187      	bne.n	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	68e3      	ldr	r3, [r4, #12]
 80052be:	4293      	cmp	r3, r2
 80052c0:	f000 815b 	beq.w	800557a <oslib_test_003_001_execute+0x41a>
 80052c4:	4992      	ldr	r1, [pc, #584]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 80052c6:	f7fb fcab 	bl	8000c20 <_test_assert>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f47f af7d 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80052d0:	4b91      	ldr	r3, [pc, #580]	; (8005518 <oslib_test_003_001_execute+0x3b8>)
 80052d2:	9a00      	ldr	r2, [sp, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	f000 8159 	beq.w	800558c <oslib_test_003_001_execute+0x42c>
 80052da:	2001      	movs	r0, #1
 80052dc:	498f      	ldr	r1, [pc, #572]	; (800551c <oslib_test_003_001_execute+0x3bc>)
 80052de:	f080 0001 	eor.w	r0, r0, #1
 80052e2:	f7fb fc9d 	bl	8000c20 <_test_assert>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f47f af6f 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(7);
 80052ec:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80052ee:	2004      	movs	r0, #4
  test_set_step(7);
 80052f0:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80052f2:	f7ff fc7d 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 80052f6:	f1a0 0004 	sub.w	r0, r0, #4
 80052fa:	fab0 f080 	clz	r0, r0
 80052fe:	4985      	ldr	r1, [pc, #532]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 8005300:	0940      	lsrs	r0, r0, #5
 8005302:	f7fb fc8d 	bl	8000c20 <_test_assert>
 8005306:	2800      	cmp	r0, #0
 8005308:	f47f af5f 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800530c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <oslib_test_003_001_execute+0x1bc>
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	4293      	cmp	r3, r2
 8005318:	f000 8153 	beq.w	80055c2 <oslib_test_003_001_execute+0x462>
 800531c:	497c      	ldr	r1, [pc, #496]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 800531e:	f7fb fc7f 	bl	8000c20 <_test_assert>
 8005322:	2800      	cmp	r0, #0
 8005324:	f47f af51 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(8);
 8005328:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800532a:	200c      	movs	r0, #12
  test_set_step(8);
 800532c:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800532e:	f7ff fc5f 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8005332:	f1a0 0e0c 	sub.w	lr, r0, #12
 8005336:	f1de 0000 	rsbs	r0, lr, #0
 800533a:	eb40 000e 	adc.w	r0, r0, lr
 800533e:	4975      	ldr	r1, [pc, #468]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 8005340:	f7fb fc6e 	bl	8000c20 <_test_assert>
 8005344:	2800      	cmp	r0, #0
 8005346:	f47f af40 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	68e3      	ldr	r3, [r4, #12]
 800534e:	4293      	cmp	r3, r2
 8005350:	f000 813c 	beq.w	80055cc <oslib_test_003_001_execute+0x46c>
 8005354:	496e      	ldr	r1, [pc, #440]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005356:	f7fb fc63 	bl	8000c20 <_test_assert>
 800535a:	2800      	cmp	r0, #0
 800535c:	f47f af35 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(9);
 8005360:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005362:	2104      	movs	r1, #4
 8005364:	4668      	mov	r0, sp
  test_set_step(9);
 8005366:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005368:	f7ff fcb2 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 800536c:	1f05      	subs	r5, r0, #4
 800536e:	4268      	negs	r0, r5
 8005370:	4168      	adcs	r0, r5
 8005372:	4968      	ldr	r1, [pc, #416]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 8005374:	f7fb fc54 	bl	8000c20 <_test_assert>
 8005378:	2800      	cmp	r0, #0
 800537a:	f47f af26 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	68e2      	ldr	r2, [r4, #12]
 8005382:	429a      	cmp	r2, r3
 8005384:	d003      	beq.n	800538e <oslib_test_003_001_execute+0x22e>
 8005386:	68a2      	ldr	r2, [r4, #8]
 8005388:	4293      	cmp	r3, r2
 800538a:	f000 8145 	beq.w	8005618 <oslib_test_003_001_execute+0x4b8>
 800538e:	4960      	ldr	r1, [pc, #384]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005390:	f7fb fc46 	bl	8000c20 <_test_assert>
 8005394:	2800      	cmp	r0, #0
 8005396:	f47f af18 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800539a:	9800      	ldr	r0, [sp, #0]
 800539c:	4b5e      	ldr	r3, [pc, #376]	; (8005518 <oslib_test_003_001_execute+0x3b8>)
 800539e:	495f      	ldr	r1, [pc, #380]	; (800551c <oslib_test_003_001_execute+0x3bc>)
 80053a0:	1ac2      	subs	r2, r0, r3
 80053a2:	4250      	negs	r0, r2
 80053a4:	4150      	adcs	r0, r2
 80053a6:	f7fb fc3b 	bl	8000c20 <_test_assert>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	f47f af0d 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(10);
 80053b0:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80053b2:	210c      	movs	r1, #12
 80053b4:	4668      	mov	r0, sp
  test_set_step(10);
 80053b6:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80053b8:	f7ff fc8a 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 80053bc:	f1a0 030c 	sub.w	r3, r0, #12
 80053c0:	4258      	negs	r0, r3
 80053c2:	4158      	adcs	r0, r3
 80053c4:	4953      	ldr	r1, [pc, #332]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 80053c6:	f7fb fc2b 	bl	8000c20 <_test_assert>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	f47f aefd 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	4293      	cmp	r3, r2
 80053d6:	f000 8105 	beq.w	80055e4 <oslib_test_003_001_execute+0x484>
 80053da:	494d      	ldr	r1, [pc, #308]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 80053dc:	f7fb fc20 	bl	8000c20 <_test_assert>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f47f aef2 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80053e6:	4669      	mov	r1, sp
 80053e8:	484d      	ldr	r0, [pc, #308]	; (8005520 <oslib_test_003_001_execute+0x3c0>)
 80053ea:	220c      	movs	r2, #12
 80053ec:	f004 fcda 	bl	8009da4 <memcmp>
 80053f0:	fab0 f080 	clz	r0, r0
 80053f4:	4949      	ldr	r1, [pc, #292]	; (800551c <oslib_test_003_001_execute+0x3bc>)
 80053f6:	0940      	lsrs	r0, r0, #5
 80053f8:	f7fb fc12 	bl	8000c20 <_test_assert>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f47f aee4 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(11);
 8005402:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 8005404:	2005      	movs	r0, #5
  test_set_step(11);
 8005406:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 8005408:	f7ff fbf2 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800540c:	f1a0 0e05 	sub.w	lr, r0, #5
 8005410:	f1de 0000 	rsbs	r0, lr, #0
 8005414:	eb40 000e 	adc.w	r0, r0, lr
 8005418:	493e      	ldr	r1, [pc, #248]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 800541a:	f7fb fc01 	bl	8000c20 <_test_assert>
 800541e:	2800      	cmp	r0, #0
 8005420:	f47f aed3 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8005424:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <oslib_test_003_001_execute+0x2d4>
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	4293      	cmp	r3, r2
 8005430:	f000 80e1 	beq.w	80055f6 <oslib_test_003_001_execute+0x496>
 8005434:	4936      	ldr	r1, [pc, #216]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 8005436:	f7fb fbf3 	bl	8000c20 <_test_assert>
 800543a:	2800      	cmp	r0, #0
 800543c:	f47f aec5 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(12);
 8005440:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005442:	2105      	movs	r1, #5
 8005444:	4668      	mov	r0, sp
  test_set_step(12);
 8005446:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005448:	f7ff fc42 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800544c:	1f45      	subs	r5, r0, #5
 800544e:	4268      	negs	r0, r5
 8005450:	4168      	adcs	r0, r5
 8005452:	4930      	ldr	r1, [pc, #192]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 8005454:	f7fb fbe4 	bl	8000c20 <_test_assert>
 8005458:	2800      	cmp	r0, #0
 800545a:	f47f aeb6 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800545e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005462:	4293      	cmp	r3, r2
 8005464:	f000 80e8 	beq.w	8005638 <oslib_test_003_001_execute+0x4d8>
 8005468:	4929      	ldr	r1, [pc, #164]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 800546a:	f7fb fbd9 	bl	8000c20 <_test_assert>
 800546e:	2800      	cmp	r0, #0
 8005470:	f47f aeab 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8005474:	4669      	mov	r1, sp
 8005476:	482a      	ldr	r0, [pc, #168]	; (8005520 <oslib_test_003_001_execute+0x3c0>)
 8005478:	2205      	movs	r2, #5
 800547a:	f004 fc93 	bl	8009da4 <memcmp>
 800547e:	fab0 f080 	clz	r0, r0
 8005482:	4926      	ldr	r1, [pc, #152]	; (800551c <oslib_test_003_001_execute+0x3bc>)
 8005484:	0940      	lsrs	r0, r0, #5
 8005486:	f7fb fbcb 	bl	8000c20 <_test_assert>
 800548a:	2800      	cmp	r0, #0
 800548c:	f47f ae9d 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(13);
 8005490:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005492:	2010      	movs	r0, #16
  test_set_step(13);
 8005494:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005496:	f7ff fbab 	bl	8004bf0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800549a:	f1a0 0110 	sub.w	r1, r0, #16
 800549e:	4248      	negs	r0, r1
 80054a0:	4148      	adcs	r0, r1
 80054a2:	491c      	ldr	r1, [pc, #112]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 80054a4:	f7fb fbbc 	bl	8000c20 <_test_assert>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	f47f ae8e 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80054ae:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f000 80b6 	beq.w	8005624 <oslib_test_003_001_execute+0x4c4>
 80054b8:	4915      	ldr	r1, [pc, #84]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 80054ba:	f7fb fbb1 	bl	8000c20 <_test_assert>
 80054be:	2800      	cmp	r0, #0
 80054c0:	f47f ae83 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
  test_set_step(14);
 80054c4:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80054c6:	2110      	movs	r1, #16
 80054c8:	4668      	mov	r0, sp
  test_set_step(14);
 80054ca:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80054cc:	f7ff fc00 	bl	8004cd0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 80054d0:	f1a0 0310 	sub.w	r3, r0, #16
 80054d4:	4258      	negs	r0, r3
 80054d6:	4158      	adcs	r0, r3
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <oslib_test_003_001_execute+0x3b4>)
 80054da:	f7fb fba1 	bl	8000c20 <_test_assert>
 80054de:	2800      	cmp	r0, #0
 80054e0:	f47f ae73 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80054e4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80054e8:	4293      	cmp	r3, r2
 80054ea:	f000 808c 	beq.w	8005606 <oslib_test_003_001_execute+0x4a6>
 80054ee:	4908      	ldr	r1, [pc, #32]	; (8005510 <oslib_test_003_001_execute+0x3b0>)
 80054f0:	f7fb fb96 	bl	8000c20 <_test_assert>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f47f ae68 	bne.w	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80054fa:	4669      	mov	r1, sp
 80054fc:	2210      	movs	r2, #16
 80054fe:	4808      	ldr	r0, [pc, #32]	; (8005520 <oslib_test_003_001_execute+0x3c0>)
 8005500:	f004 fc50 	bl	8009da4 <memcmp>
 8005504:	fab0 f080 	clz	r0, r0
 8005508:	e00c      	b.n	8005524 <oslib_test_003_001_execute+0x3c4>
 800550a:	bf00      	nop
 800550c:	0800b28c 	.word	0x0800b28c
 8005510:	0800b248 	.word	0x0800b248
 8005514:	0800aff8 	.word	0x0800aff8
 8005518:	33323130 	.word	0x33323130
 800551c:	0800b298 	.word	0x0800b298
 8005520:	0800c534 	.word	0x0800c534
 8005524:	4949      	ldr	r1, [pc, #292]	; (800564c <oslib_test_003_001_execute+0x4ec>)
 8005526:	0940      	lsrs	r0, r0, #5
 8005528:	f7fb fb7a 	bl	8000c20 <_test_assert>
  test_end_step(14);
 800552c:	e64d      	b.n	80051ca <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800552e:	68a2      	ldr	r2, [r4, #8]
 8005530:	4293      	cmp	r3, r2
 8005532:	f47f ae6f 	bne.w	8005214 <oslib_test_003_001_execute+0xb4>
 8005536:	6920      	ldr	r0, [r4, #16]
 8005538:	fab0 f080 	clz	r0, r0
 800553c:	0940      	lsrs	r0, r0, #5
 800553e:	e669      	b.n	8005214 <oslib_test_003_001_execute+0xb4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005540:	68a2      	ldr	r2, [r4, #8]
 8005542:	4293      	cmp	r3, r2
 8005544:	f47f ae8b 	bne.w	800525e <oslib_test_003_001_execute+0xfe>
 8005548:	6920      	ldr	r0, [r4, #16]
 800554a:	fab0 f080 	clz	r0, r0
 800554e:	0940      	lsrs	r0, r0, #5
 8005550:	e685      	b.n	800525e <oslib_test_003_001_execute+0xfe>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005552:	68a2      	ldr	r2, [r4, #8]
 8005554:	4293      	cmp	r3, r2
 8005556:	f47f ae75 	bne.w	8005244 <oslib_test_003_001_execute+0xe4>
 800555a:	6920      	ldr	r0, [r4, #16]
 800555c:	fab0 f080 	clz	r0, r0
 8005560:	0940      	lsrs	r0, r0, #5
 8005562:	e66f      	b.n	8005244 <oslib_test_003_001_execute+0xe4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005564:	68a2      	ldr	r2, [r4, #8]
 8005566:	4293      	cmp	r3, r2
 8005568:	f47f ae92 	bne.w	8005290 <oslib_test_003_001_execute+0x130>
 800556c:	6920      	ldr	r0, [r4, #16]
 800556e:	f1a0 0010 	sub.w	r0, r0, #16
 8005572:	fab0 f080 	clz	r0, r0
 8005576:	0940      	lsrs	r0, r0, #5
 8005578:	e68a      	b.n	8005290 <oslib_test_003_001_execute+0x130>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800557a:	68a2      	ldr	r2, [r4, #8]
 800557c:	4293      	cmp	r3, r2
 800557e:	f47f aea1 	bne.w	80052c4 <oslib_test_003_001_execute+0x164>
 8005582:	6920      	ldr	r0, [r4, #16]
 8005584:	fab0 f080 	clz	r0, r0
 8005588:	0940      	lsrs	r0, r0, #5
 800558a:	e69b      	b.n	80052c4 <oslib_test_003_001_execute+0x164>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800558c:	9a01      	ldr	r2, [sp, #4]
 800558e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005592:	429a      	cmp	r2, r3
 8005594:	f47f aea1 	bne.w	80052da <oslib_test_003_001_execute+0x17a>
 8005598:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 800559c:	9a02      	ldr	r2, [sp, #8]
 800559e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 80055a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a6:	429a      	cmp	r2, r3
 80055a8:	f47f ae97 	bne.w	80052da <oslib_test_003_001_execute+0x17a>
 80055ac:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80055b0:	9a03      	ldr	r2, [sp, #12]
 80055b2:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 80055b6:	f203 330b 	addw	r3, r3, #779	; 0x30b
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f47f ae8d 	bne.w	80052da <oslib_test_003_001_execute+0x17a>
 80055c0:	e68c      	b.n	80052dc <oslib_test_003_001_execute+0x17c>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80055c2:	6920      	ldr	r0, [r4, #16]
 80055c4:	1f03      	subs	r3, r0, #4
 80055c6:	4258      	negs	r0, r3
 80055c8:	4158      	adcs	r0, r3
 80055ca:	e6a7      	b.n	800531c <oslib_test_003_001_execute+0x1bc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80055cc:	68a2      	ldr	r2, [r4, #8]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f47f aec0 	bne.w	8005354 <oslib_test_003_001_execute+0x1f4>
 80055d4:	6920      	ldr	r0, [r4, #16]
 80055d6:	f1a0 0c10 	sub.w	ip, r0, #16
 80055da:	f1dc 0000 	rsbs	r0, ip, #0
 80055de:	eb40 000c 	adc.w	r0, r0, ip
 80055e2:	e6b7      	b.n	8005354 <oslib_test_003_001_execute+0x1f4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80055e4:	68a2      	ldr	r2, [r4, #8]
 80055e6:	4293      	cmp	r3, r2
 80055e8:	f47f aef7 	bne.w	80053da <oslib_test_003_001_execute+0x27a>
 80055ec:	6920      	ldr	r0, [r4, #16]
 80055ee:	fab0 f080 	clz	r0, r0
 80055f2:	0940      	lsrs	r0, r0, #5
 80055f4:	e6f1      	b.n	80053da <oslib_test_003_001_execute+0x27a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80055f6:	6920      	ldr	r0, [r4, #16]
 80055f8:	f1a0 0c05 	sub.w	ip, r0, #5
 80055fc:	f1dc 0000 	rsbs	r0, ip, #0
 8005600:	eb40 000c 	adc.w	r0, r0, ip
 8005604:	e716      	b.n	8005434 <oslib_test_003_001_execute+0x2d4>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	4293      	cmp	r3, r2
 800560a:	f43f af70 	beq.w	80054ee <oslib_test_003_001_execute+0x38e>
 800560e:	6920      	ldr	r0, [r4, #16]
 8005610:	fab0 f080 	clz	r0, r0
 8005614:	0940      	lsrs	r0, r0, #5
 8005616:	e76a      	b.n	80054ee <oslib_test_003_001_execute+0x38e>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8005618:	6920      	ldr	r0, [r4, #16]
 800561a:	f1a0 010c 	sub.w	r1, r0, #12
 800561e:	4248      	negs	r0, r1
 8005620:	4148      	adcs	r0, r1
 8005622:	e6b4      	b.n	800538e <oslib_test_003_001_execute+0x22e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	4293      	cmp	r3, r2
 8005628:	f43f af46 	beq.w	80054b8 <oslib_test_003_001_execute+0x358>
 800562c:	6920      	ldr	r0, [r4, #16]
 800562e:	f1a0 0210 	sub.w	r2, r0, #16
 8005632:	4250      	negs	r0, r2
 8005634:	4150      	adcs	r0, r2
 8005636:	e73f      	b.n	80054b8 <oslib_test_003_001_execute+0x358>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	4293      	cmp	r3, r2
 800563c:	f43f af14 	beq.w	8005468 <oslib_test_003_001_execute+0x308>
 8005640:	6920      	ldr	r0, [r4, #16]
 8005642:	fab0 f080 	clz	r0, r0
 8005646:	0940      	lsrs	r0, r0, #5
 8005648:	e70e      	b.n	8005468 <oslib_test_003_001_execute+0x308>
 800564a:	bf00      	nop
 800564c:	0800b298 	.word	0x0800b298

08005650 <rt_test_011_011_execute>:
static void rt_test_011_011_execute(void) {
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8005654:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80056d8 <rt_test_011_011_execute+0x88>
      chMtxLock(&mtx1);
 8005658:	4c1c      	ldr	r4, [pc, #112]	; (80056cc <rt_test_011_011_execute+0x7c>)
  test_set_step(1);
 800565a:	2301      	movs	r3, #1
 800565c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8005660:	f7fe fe2e 	bl	80042c0 <test_wait_tick>
    n = 0;
 8005664:	2500      	movs	r5, #0
    start = test_wait_tick();
 8005666:	4606      	mov	r6, r0
 8005668:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800566c:	f242 770f 	movw	r7, #9999	; 0x270f
      chMtxLock(&mtx1);
 8005670:	4620      	mov	r0, r4
 8005672:	f7ff f9dd 	bl	8004a30 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005676:	4620      	mov	r0, r4
 8005678:	f7fd fa42 	bl	8002b00 <chMtxUnlock>
      chMtxLock(&mtx1);
 800567c:	4620      	mov	r0, r4
 800567e:	f7ff f9d7 	bl	8004a30 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005682:	4620      	mov	r0, r4
 8005684:	f7fd fa3c 	bl	8002b00 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff f9d1 	bl	8004a30 <chMtxLock>
      chMtxUnlock(&mtx1);
 800568e:	4620      	mov	r0, r4
 8005690:	f7fd fa36 	bl	8002b00 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005694:	4620      	mov	r0, r4
 8005696:	f7ff f9cb 	bl	8004a30 <chMtxLock>
      chMtxUnlock(&mtx1);
 800569a:	4620      	mov	r0, r4
 800569c:	f7fd fa30 	bl	8002b00 <chMtxUnlock>
 80056a0:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80056a4:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 80056a6:	42bb      	cmp	r3, r7
      n++;
 80056a8:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80056ac:	d9e0      	bls.n	8005670 <rt_test_011_011_execute+0x20>
  test_set_step(2);
 80056ae:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80056b0:	4807      	ldr	r0, [pc, #28]	; (80056d0 <rt_test_011_011_execute+0x80>)
  test_set_step(2);
 80056b2:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80056b6:	f7fb fc1b 	bl	8000ef0 <test_print>
    test_printn(n * 4);
 80056ba:	00a8      	lsls	r0, r5, #2
 80056bc:	f7fb fb48 	bl	8000d50 <test_printn>
}
 80056c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 80056c4:	4803      	ldr	r0, [pc, #12]	; (80056d4 <rt_test_011_011_execute+0x84>)
 80056c6:	f7fb bbf3 	b.w	8000eb0 <test_println>
 80056ca:	bf00      	nop
 80056cc:	20001468 	.word	0x20001468
 80056d0:	0800b0f0 	.word	0x0800b0f0
 80056d4:	0800b2ac 	.word	0x0800b2ac
 80056d8:	20001cac 	.word	0x20001cac
 80056dc:	00000000 	.word	0x00000000

080056e0 <thread8>:
static THD_FUNCTION(thread8, p) {
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	4604      	mov	r4, r0
  chMtxLock(&m2);
 80056e4:	481b      	ldr	r0, [pc, #108]	; (8005754 <thread8+0x74>)
 80056e6:	f7ff f9a3 	bl	8004a30 <chMtxLock>
  chMtxLock(&m1);
 80056ea:	481b      	ldr	r0, [pc, #108]	; (8005758 <thread8+0x78>)
 80056ec:	f7ff f9a0 	bl	8004a30 <chMtxLock>
 80056f0:	2320      	movs	r3, #32
 80056f2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 80056f6:	4d19      	ldr	r5, [pc, #100]	; (800575c <thread8+0x7c>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 80056f8:	69ab      	ldr	r3, [r5, #24]
 80056fa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7fb ff77 	bl	80015f0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <thread8+0x80>)
 8005704:	69aa      	ldr	r2, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005706:	4619      	mov	r1, r3
 8005708:	6253      	str	r3, [r2, #36]	; 0x24
 800570a:	e003      	b.n	8005714 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800570c:	689f      	ldr	r7, [r3, #8]
 800570e:	6890      	ldr	r0, [r2, #8]
 8005710:	4287      	cmp	r7, r0
 8005712:	d302      	bcc.n	800571a <thread8+0x3a>
    cp = cp->queue.next;
 8005714:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005716:	428b      	cmp	r3, r1
 8005718:	d1f8      	bne.n	800570c <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800571a:	6859      	ldr	r1, [r3, #4]
    chSchGoSleepS(newstate);
 800571c:	2007      	movs	r0, #7
 800571e:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8005722:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	f7fd fcbb 	bl	80030a0 <chSchGoSleepS>
  return currp->u.rdymsg;
 800572a:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	3301      	adds	r3, #1
 8005730:	d002      	beq.n	8005738 <thread8+0x58>
    chMtxLockS(mp);
 8005732:	4630      	mov	r0, r6
 8005734:	f7ff f904 	bl	8004940 <chMtxLockS>
 8005738:	2300      	movs	r3, #0
 800573a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800573e:	7820      	ldrb	r0, [r4, #0]
 8005740:	f7fb fb16 	bl	8000d70 <test_emit_token>
  chMtxUnlock(&m1);
 8005744:	4804      	ldr	r0, [pc, #16]	; (8005758 <thread8+0x78>)
 8005746:	f7fd f9db 	bl	8002b00 <chMtxUnlock>
}
 800574a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 800574e:	4801      	ldr	r0, [pc, #4]	; (8005754 <thread8+0x74>)
 8005750:	f7fd b9d6 	b.w	8002b00 <chMtxUnlock>
 8005754:	2000083c 	.word	0x2000083c
 8005758:	2000082c 	.word	0x2000082c
 800575c:	200009b0 	.word	0x200009b0
 8005760:	20000800 	.word	0x20000800
	...

08005770 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8005774:	4816      	ldr	r0, [pc, #88]	; (80057d0 <thread6+0x60>)
 8005776:	f7ff f95b 	bl	8004a30 <chMtxLock>
 800577a:	2320      	movs	r3, #32
 800577c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005780:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <thread6+0x64>)
 8005782:	699c      	ldr	r4, [r3, #24]
 8005784:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8005786:	4630      	mov	r0, r6
 8005788:	f7fb ff32 	bl	80015f0 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800578c:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <thread6+0x68>)
 800578e:	6262      	str	r2, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8005790:	4613      	mov	r3, r2
 8005792:	e003      	b.n	800579c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005794:	6898      	ldr	r0, [r3, #8]
 8005796:	68a1      	ldr	r1, [r4, #8]
 8005798:	4288      	cmp	r0, r1
 800579a:	d302      	bcc.n	80057a2 <thread6+0x32>
    cp = cp->queue.next;
 800579c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800579e:	4293      	cmp	r3, r2
 80057a0:	d1f8      	bne.n	8005794 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 80057a2:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 80057a4:	2007      	movs	r0, #7
 80057a6:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80057aa:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80057ac:	605c      	str	r4, [r3, #4]
 80057ae:	f7fd fc77 	bl	80030a0 <chSchGoSleepS>
  chMtxLockS(mp);
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7ff f8c4 	bl	8004940 <chMtxLockS>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80057be:	7828      	ldrb	r0, [r5, #0]
 80057c0:	f7fb fad6 	bl	8000d70 <test_emit_token>
}
 80057c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <thread6+0x60>)
 80057ca:	f7fd b999 	b.w	8002b00 <chMtxUnlock>
 80057ce:	bf00      	nop
 80057d0:	2000082c 	.word	0x2000082c
 80057d4:	200009b0 	.word	0x200009b0
 80057d8:	20000800 	.word	0x20000800
 80057dc:	00000000 	.word	0x00000000

080057e0 <thread9>:
static THD_FUNCTION(thread9, p) {
 80057e0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 80057e2:	4d06      	ldr	r5, [pc, #24]	; (80057fc <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 80057e4:	4604      	mov	r4, r0
  chMtxLock(&m2);
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7ff f922 	bl	8004a30 <chMtxLock>
  test_emit_token(*(char *)p);
 80057ec:	7820      	ldrb	r0, [r4, #0]
 80057ee:	f7fb fabf 	bl	8000d70 <test_emit_token>
  chMtxUnlock(&m2);
 80057f2:	4628      	mov	r0, r5
}
 80057f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 80057f8:	f7fd b982 	b.w	8002b00 <chMtxUnlock>
 80057fc:	2000083c 	.word	0x2000083c

08005800 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005804:	4d42      	ldr	r5, [pc, #264]	; (8005910 <rt_test_007_004_execute+0x110>)
  test_set_step(2);
 8005806:	4e43      	ldr	r6, [pc, #268]	; (8005914 <rt_test_007_004_execute+0x114>)
  return chThdGetSelfX()->prio;
 8005808:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800580a:	4b43      	ldr	r3, [pc, #268]	; (8005918 <rt_test_007_004_execute+0x118>)
 800580c:	6894      	ldr	r4, [r2, #8]
 800580e:	4843      	ldr	r0, [pc, #268]	; (800591c <rt_test_007_004_execute+0x11c>)
 8005810:	4a43      	ldr	r2, [pc, #268]	; (8005920 <rt_test_007_004_execute+0x120>)
 8005812:	4f44      	ldr	r7, [pc, #272]	; (8005924 <rt_test_007_004_execute+0x124>)
    pa = p + 1;
 8005814:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 8005818:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800581c:	4641      	mov	r1, r8
    pb = p + 2;
 800581e:	eb04 090c 	add.w	r9, r4, ip
  test_set_step(2);
 8005822:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005826:	f7fd fb83 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800582a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800582c:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800582e:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <rt_test_007_004_execute+0x128>)
 8005830:	4a3e      	ldr	r2, [pc, #248]	; (800592c <rt_test_007_004_execute+0x12c>)
 8005832:	483f      	ldr	r0, [pc, #252]	; (8005930 <rt_test_007_004_execute+0x130>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005834:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005838:	f7fd fb7a 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 800583c:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800583e:	4602      	mov	r2, r0
    chMtxLock(&m1);
 8005840:	483c      	ldr	r0, [pc, #240]	; (8005934 <rt_test_007_004_execute+0x134>)
  test_set_step(3);
 8005842:	6033      	str	r3, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005844:	607a      	str	r2, [r7, #4]
    chMtxLock(&m1);
 8005846:	f7ff f8f3 	bl	8004a30 <chMtxLock>
 800584a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 800584c:	493a      	ldr	r1, [pc, #232]	; (8005938 <rt_test_007_004_execute+0x138>)
 800584e:	6898      	ldr	r0, [r3, #8]
 8005850:	1b00      	subs	r0, r0, r4
 8005852:	fab0 f080 	clz	r0, r0
 8005856:	0940      	lsrs	r0, r0, #5
 8005858:	f7fb f9e2 	bl	8000c20 <_test_assert>
 800585c:	b108      	cbz	r0, 8005862 <rt_test_007_004_execute+0x62>
}
 800585e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8005862:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8005864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8005868:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 800586a:	f7fe fb99 	bl	8003fa0 <chThdSleep>
 800586e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005870:	4931      	ldr	r1, [pc, #196]	; (8005938 <rt_test_007_004_execute+0x138>)
 8005872:	6898      	ldr	r0, [r3, #8]
 8005874:	eba0 0008 	sub.w	r0, r0, r8
 8005878:	fab0 f080 	clz	r0, r0
 800587c:	0940      	lsrs	r0, r0, #5
 800587e:	f7fb f9cf 	bl	8000c20 <_test_assert>
 8005882:	2800      	cmp	r0, #0
 8005884:	d1eb      	bne.n	800585e <rt_test_007_004_execute+0x5e>
  test_set_step(5);
 8005886:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8005888:	482c      	ldr	r0, [pc, #176]	; (800593c <rt_test_007_004_execute+0x13c>)
  test_set_step(5);
 800588a:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 800588c:	f7ff f8d0 	bl	8004a30 <chMtxLock>
 8005890:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005892:	4929      	ldr	r1, [pc, #164]	; (8005938 <rt_test_007_004_execute+0x138>)
 8005894:	6898      	ldr	r0, [r3, #8]
 8005896:	eba0 0008 	sub.w	r0, r0, r8
 800589a:	fab0 f080 	clz	r0, r0
 800589e:	0940      	lsrs	r0, r0, #5
 80058a0:	f7fb f9be 	bl	8000c20 <_test_assert>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1da      	bne.n	800585e <rt_test_007_004_execute+0x5e>
  test_set_step(6);
 80058a8:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 80058aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 80058ae:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 80058b0:	f7fe fb76 	bl	8003fa0 <chThdSleep>
 80058b4:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 80058b6:	4920      	ldr	r1, [pc, #128]	; (8005938 <rt_test_007_004_execute+0x138>)
 80058b8:	6898      	ldr	r0, [r3, #8]
 80058ba:	eba0 0009 	sub.w	r0, r0, r9
 80058be:	fab0 f080 	clz	r0, r0
 80058c2:	0940      	lsrs	r0, r0, #5
 80058c4:	f7fb f9ac 	bl	8000c20 <_test_assert>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d1c8      	bne.n	800585e <rt_test_007_004_execute+0x5e>
  test_set_step(7);
 80058cc:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 80058ce:	481b      	ldr	r0, [pc, #108]	; (800593c <rt_test_007_004_execute+0x13c>)
  test_set_step(7);
 80058d0:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 80058d2:	f7fd f915 	bl	8002b00 <chMtxUnlock>
 80058d6:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80058d8:	4917      	ldr	r1, [pc, #92]	; (8005938 <rt_test_007_004_execute+0x138>)
 80058da:	6898      	ldr	r0, [r3, #8]
 80058dc:	eba0 0008 	sub.w	r0, r0, r8
 80058e0:	fab0 f080 	clz	r0, r0
 80058e4:	0940      	lsrs	r0, r0, #5
 80058e6:	f7fb f99b 	bl	8000c20 <_test_assert>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d1b7      	bne.n	800585e <rt_test_007_004_execute+0x5e>
  test_set_step(8);
 80058ee:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 80058f0:	4810      	ldr	r0, [pc, #64]	; (8005934 <rt_test_007_004_execute+0x134>)
  test_set_step(8);
 80058f2:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 80058f4:	f7fd f904 	bl	8002b00 <chMtxUnlock>
 80058f8:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80058fa:	490f      	ldr	r1, [pc, #60]	; (8005938 <rt_test_007_004_execute+0x138>)
 80058fc:	6898      	ldr	r0, [r3, #8]
 80058fe:	1b00      	subs	r0, r0, r4
 8005900:	fab0 f080 	clz	r0, r0
}
 8005904:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005908:	0940      	lsrs	r0, r0, #5
 800590a:	f7fb b989 	b.w	8000c20 <_test_assert>
 800590e:	bf00      	nop
 8005910:	200009b0 	.word	0x200009b0
 8005914:	20001cac 	.word	0x20001cac
 8005918:	0800b2bc 	.word	0x0800b2bc
 800591c:	20001598 	.word	0x20001598
 8005920:	08005941 	.word	0x08005941
 8005924:	20001cc4 	.word	0x20001cc4
 8005928:	0800b2c0 	.word	0x0800b2c0
 800592c:	08004a01 	.word	0x08004a01
 8005930:	200016e0 	.word	0x200016e0
 8005934:	2000082c 	.word	0x2000082c
 8005938:	0800af14 	.word	0x0800af14
 800593c:	2000083c 	.word	0x2000083c

08005940 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005940:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8005942:	4c06      	ldr	r4, [pc, #24]	; (800595c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8005944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005948:	f7fe fb2a 	bl	8003fa0 <chThdSleep>
  chMtxLock(&m1);
 800594c:	4620      	mov	r0, r4
 800594e:	f7ff f86f 	bl	8004a30 <chMtxLock>
  chMtxUnlock(&m1);
 8005952:	4620      	mov	r0, r4
}
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8005958:	f7fd b8d2 	b.w	8002b00 <chMtxUnlock>
 800595c:	2000082c 	.word	0x2000082c

08005960 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8005960:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8005962:	4d06      	ldr	r5, [pc, #24]	; (800597c <thread1.lto_priv.2+0x1c>)
static THD_FUNCTION(thread1, p) {
 8005964:	4604      	mov	r4, r0
  chMtxLock(&m1);
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff f862 	bl	8004a30 <chMtxLock>
  test_emit_token(*(char *)p);
 800596c:	7820      	ldrb	r0, [r4, #0]
 800596e:	f7fb f9ff 	bl	8000d70 <test_emit_token>
  chMtxUnlock(&m1);
 8005972:	4628      	mov	r0, r5
}
 8005974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8005978:	f7fd b8c2 	b.w	8002b00 <chMtxUnlock>
 800597c:	2000082c 	.word	0x2000082c

08005980 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005980:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005982:	4d14      	ldr	r5, [pc, #80]	; (80059d4 <chFactoryReleaseSemaphore+0x54>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005984:	4604      	mov	r4, r0
  F_LOCK();
 8005986:	4628      	mov	r0, r5
 8005988:	f7ff f852 	bl	8004a30 <chMtxLock>
  dep->refs--;
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005992:	b99b      	cbnz	r3, 80059bc <chFactoryReleaseSemaphore+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005994:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8005998:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 800599a:	4619      	mov	r1, r3
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4293      	cmp	r3, r2
 80059a0:	d011      	beq.n	80059c6 <chFactoryReleaseSemaphore+0x46>
    if (prev->next == element) {
 80059a2:	429c      	cmp	r4, r3
 80059a4:	d1f9      	bne.n	800599a <chFactoryReleaseSemaphore+0x1a>
      prev->next = element->next;
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	600b      	str	r3, [r1, #0]
 80059aa:	2320      	movs	r3, #32
 80059ac:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80059b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	2300      	movs	r3, #0
  mp->next = php;
 80059b6:	62ec      	str	r4, [r5, #44]	; 0x2c
 80059b8:	f383 8811 	msr	BASEPRI, r3
}
 80059bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80059c0:	4804      	ldr	r0, [pc, #16]	; (80059d4 <chFactoryReleaseSemaphore+0x54>)
 80059c2:	f7fd b89d 	b.w	8002b00 <chMtxUnlock>
 80059c6:	2320      	movs	r3, #32
 80059c8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80059cc:	2300      	movs	r3, #0
 80059ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	deff      	udf	#255	; 0xff
 80059d4:	20001230 	.word	0x20001230
	...

080059e0 <oslib_test_009_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_009_003_execute(void) {
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [9.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 80059e2:	4c43      	ldr	r4, [pc, #268]	; (8005af0 <oslib_test_009_003_execute+0x110>)
 80059e4:	2501      	movs	r5, #1
 80059e6:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 80059e8:	f7ff faba 	bl	8004f60 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 80059ec:	fab0 f080 	clz	r0, r0
 80059f0:	4940      	ldr	r1, [pc, #256]	; (8005af4 <oslib_test_009_003_execute+0x114>)
 80059f2:	0940      	lsrs	r0, r0, #5
 80059f4:	f7fb f914 	bl	8000c20 <_test_assert>
 80059f8:	b100      	cbz	r0, 80059fc <oslib_test_009_003_execute+0x1c>
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
  test_end_step(6);
}
 80059fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80059fc:	2302      	movs	r3, #2
 80059fe:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8005a00:	f7ff fa8e 	bl	8004f20 <chFactoryCreateSemaphore.constprop.0>
 8005a04:	4606      	mov	r6, r0
    test_assert(dsp != NULL, "cannot create");
 8005a06:	3800      	subs	r0, #0
 8005a08:	bf18      	it	ne
 8005a0a:	2001      	movne	r0, #1
 8005a0c:	493a      	ldr	r1, [pc, #232]	; (8005af8 <oslib_test_009_003_execute+0x118>)
 8005a0e:	f7fb f907 	bl	8000c20 <_test_assert>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d1f1      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
  test_set_step(3);
 8005a16:	2303      	movs	r3, #3
 8005a18:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8005a1a:	f7ff fa81 	bl	8004f20 <chFactoryCreateSemaphore.constprop.0>
    test_assert(dsp1 == NULL, "can create");
 8005a1e:	fab0 f080 	clz	r0, r0
 8005a22:	4936      	ldr	r1, [pc, #216]	; (8005afc <oslib_test_009_003_execute+0x11c>)
 8005a24:	0940      	lsrs	r0, r0, #5
 8005a26:	f7fb f8fb 	bl	8000c20 <_test_assert>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1e5      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
  test_set_step(4);
 8005a2e:	2304      	movs	r3, #4
 8005a30:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8005a32:	f7ff fa95 	bl	8004f60 <chFactoryFindSemaphore.constprop.0>
 8005a36:	4607      	mov	r7, r0
    test_assert(dsp1 != NULL, "not found");
 8005a38:	3800      	subs	r0, #0
 8005a3a:	bf18      	it	ne
 8005a3c:	2001      	movne	r0, #1
 8005a3e:	4930      	ldr	r1, [pc, #192]	; (8005b00 <oslib_test_009_003_execute+0x120>)
 8005a40:	f7fb f8ee 	bl	8000c20 <_test_assert>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d1d8      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8005a48:	1bf0      	subs	r0, r6, r7
 8005a4a:	fab0 f080 	clz	r0, r0
 8005a4e:	492d      	ldr	r1, [pc, #180]	; (8005b04 <oslib_test_009_003_execute+0x124>)
 8005a50:	0940      	lsrs	r0, r0, #5
 8005a52:	f7fb f8e5 	bl	8000c20 <_test_assert>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d1cf      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4929      	ldr	r1, [pc, #164]	; (8005b04 <oslib_test_009_003_execute+0x124>)
 8005a5e:	f1a0 0002 	sub.w	r0, r0, #2
 8005a62:	fab0 f080 	clz	r0, r0
 8005a66:	0940      	lsrs	r0, r0, #5
 8005a68:	f7fb f8da 	bl	8000c20 <_test_assert>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1c4      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8005a70:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8005a72:	4924      	ldr	r1, [pc, #144]	; (8005b04 <oslib_test_009_003_execute+0x124>)
 8005a74:	442b      	add	r3, r5
 8005a76:	4628      	mov	r0, r5
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	f7fb f8d1 	bl	8000c20 <_test_assert>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d1bb      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	491f      	ldr	r1, [pc, #124]	; (8005b04 <oslib_test_009_003_execute+0x124>)
 8005a86:	f1a0 0003 	sub.w	r0, r0, #3
 8005a8a:	fab0 f080 	clz	r0, r0
 8005a8e:	0940      	lsrs	r0, r0, #5
 8005a90:	f7fb f8c6 	bl	8000c20 <_test_assert>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d1b0      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f7ff ff71 	bl	8005980 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4919      	ldr	r1, [pc, #100]	; (8005b08 <oslib_test_009_003_execute+0x128>)
 8005aa2:	f1a0 0002 	sub.w	r0, r0, #2
 8005aa6:	fab0 f080 	clz	r0, r0
 8005aaa:	0940      	lsrs	r0, r0, #5
 8005aac:	f7fb f8b8 	bl	8000c20 <_test_assert>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1a2      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f7ff ff63 	bl	8005980 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8005aba:	6870      	ldr	r0, [r6, #4]
 8005abc:	4912      	ldr	r1, [pc, #72]	; (8005b08 <oslib_test_009_003_execute+0x128>)
 8005abe:	1b40      	subs	r0, r0, r5
 8005ac0:	fab0 f080 	clz	r0, r0
 8005ac4:	0940      	lsrs	r0, r0, #5
 8005ac6:	f7fb f8ab 	bl	8000c20 <_test_assert>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d195      	bne.n	80059fa <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 8005ace:	4630      	mov	r0, r6
  test_set_step(5);
 8005ad0:	2305      	movs	r3, #5
 8005ad2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8005ad4:	f7ff ff54 	bl	8005980 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8005ad8:	2306      	movs	r3, #6
 8005ada:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8005adc:	f7ff fa40 	bl	8004f60 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8005ae0:	fab0 f080 	clz	r0, r0
}
 8005ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8005ae8:	4902      	ldr	r1, [pc, #8]	; (8005af4 <oslib_test_009_003_execute+0x114>)
 8005aea:	0940      	lsrs	r0, r0, #5
 8005aec:	f7fb b898 	b.w	8000c20 <_test_assert>
 8005af0:	20001cac 	.word	0x20001cac
 8005af4:	0800b2e4 	.word	0x0800b2e4
 8005af8:	0800b2c4 	.word	0x0800b2c4
 8005afc:	0800b2d4 	.word	0x0800b2d4
 8005b00:	0800b2e0 	.word	0x0800b2e0
 8005b04:	0800b2ec 	.word	0x0800b2ec
 8005b08:	0800b308 	.word	0x0800b308
 8005b0c:	00000000 	.word	0x00000000

08005b10 <oslib_test_009_003_teardown>:
static void oslib_test_009_003_teardown(void) {
 8005b10:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8005b12:	f7ff fa25 	bl	8004f60 <chFactoryFindSemaphore.constprop.0>
  if (dsp != NULL) {
 8005b16:	b140      	cbz	r0, 8005b2a <oslib_test_009_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8005b18:	6843      	ldr	r3, [r0, #4]
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	b12b      	cbz	r3, 8005b2a <oslib_test_009_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff ff2e 	bl	8005980 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f9      	bne.n	8005b1e <oslib_test_009_003_teardown+0xe>
}
 8005b2a:	bd10      	pop	{r4, pc}
 8005b2c:	0000      	movs	r0, r0
	...

08005b30 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop) {
 8005b30:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005b32:	4d14      	ldr	r5, [pc, #80]	; (8005b84 <chFactoryReleaseObject+0x54>)
void chFactoryReleaseObject(registered_object_t *rop) {
 8005b34:	4604      	mov	r4, r0
  F_LOCK();
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7fe ff7a 	bl	8004a30 <chMtxLock>
  dep->refs--;
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005b42:	b99b      	cbnz	r3, 8005b6c <chFactoryReleaseObject+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005b44:	f105 0210 	add.w	r2, r5, #16
 8005b48:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d011      	beq.n	8005b76 <chFactoryReleaseObject+0x46>
    if (prev->next == element) {
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d1f9      	bne.n	8005b4a <chFactoryReleaseObject+0x1a>
      prev->next = element->next;
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	600b      	str	r3, [r1, #0]
 8005b5a:	2320      	movs	r3, #32
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	696b      	ldr	r3, [r5, #20]
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	2300      	movs	r3, #0
  mp->next = php;
 8005b66:	616c      	str	r4, [r5, #20]
 8005b68:	f383 8811 	msr	BASEPRI, r3
}
 8005b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005b70:	4804      	ldr	r0, [pc, #16]	; (8005b84 <chFactoryReleaseObject+0x54>)
 8005b72:	f7fc bfc5 	b.w	8002b00 <chMtxUnlock>
 8005b76:	2320      	movs	r3, #32
 8005b78:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	696a      	ldr	r2, [r5, #20]
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	deff      	udf	#255	; 0xff
 8005b84:	20001230 	.word	0x20001230
	...

08005b90 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005b94:	4c50      	ldr	r4, [pc, #320]	; (8005cd8 <oslib_test_009_001_execute+0x148>)
 8005b96:	2501      	movs	r5, #1
 8005b98:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8005b9a:	f7ff f971 	bl	8004e80 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8005b9e:	fab0 f080 	clz	r0, r0
 8005ba2:	494e      	ldr	r1, [pc, #312]	; (8005cdc <oslib_test_009_001_execute+0x14c>)
 8005ba4:	0940      	lsrs	r0, r0, #5
 8005ba6:	f7fb f83b 	bl	8000c20 <_test_assert>
 8005baa:	b108      	cbz	r0, 8005bb0 <oslib_test_009_001_execute+0x20>
}
 8005bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8005bb0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bb2:	484b      	ldr	r0, [pc, #300]	; (8005ce0 <oslib_test_009_001_execute+0x150>)
  test_set_step(2);
 8005bb4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bb6:	f7ff f94b 	bl	8004e50 <chFactoryRegisterObject.constprop.0>
 8005bba:	4606      	mov	r6, r0
    test_assert(rop != NULL, "cannot register");
 8005bbc:	3800      	subs	r0, #0
 8005bbe:	bf18      	it	ne
 8005bc0:	2001      	movne	r0, #1
 8005bc2:	4948      	ldr	r1, [pc, #288]	; (8005ce4 <oslib_test_009_001_execute+0x154>)
 8005bc4:	f7fb f82c 	bl	8000c20 <_test_assert>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d1ef      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
  test_set_step(3);
 8005bcc:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bce:	4846      	ldr	r0, [pc, #280]	; (8005ce8 <oslib_test_009_001_execute+0x158>)
  test_set_step(3);
 8005bd0:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8005bd2:	f7ff f93d 	bl	8004e50 <chFactoryRegisterObject.constprop.0>
    test_assert(rop1 == NULL, "can register");
 8005bd6:	fab0 f080 	clz	r0, r0
 8005bda:	4944      	ldr	r1, [pc, #272]	; (8005cec <oslib_test_009_001_execute+0x15c>)
 8005bdc:	0940      	lsrs	r0, r0, #5
 8005bde:	f7fb f81f 	bl	8000c20 <_test_assert>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d1e2      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
  test_set_step(4);
 8005be6:	2304      	movs	r3, #4
 8005be8:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 8005bea:	f7ff f949 	bl	8004e80 <chFactoryFindObject.constprop.0>
 8005bee:	4607      	mov	r7, r0
    test_assert(rop1 != NULL, "not found");
 8005bf0:	3800      	subs	r0, #0
 8005bf2:	bf18      	it	ne
 8005bf4:	2001      	movne	r0, #1
 8005bf6:	493e      	ldr	r1, [pc, #248]	; (8005cf0 <oslib_test_009_001_execute+0x160>)
 8005bf8:	f7fb f812 	bl	8000c20 <_test_assert>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d1d5      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	493c      	ldr	r1, [pc, #240]	; (8005cf4 <oslib_test_009_001_execute+0x164>)
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	f245 58aa 	movw	r8, #21930	; 0x55aa
 8005c0a:	eba0 0008 	sub.w	r0, r0, r8
 8005c0e:	fab0 f080 	clz	r0, r0
 8005c12:	0940      	lsrs	r0, r0, #5
 8005c14:	f7fb f804 	bl	8000c20 <_test_assert>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d1c7      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8005c1c:	1bf0      	subs	r0, r6, r7
 8005c1e:	fab0 f080 	clz	r0, r0
 8005c22:	4935      	ldr	r1, [pc, #212]	; (8005cf8 <oslib_test_009_001_execute+0x168>)
 8005c24:	0940      	lsrs	r0, r0, #5
 8005c26:	f7fa fffb 	bl	8000c20 <_test_assert>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1be      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4931      	ldr	r1, [pc, #196]	; (8005cf8 <oslib_test_009_001_execute+0x168>)
 8005c32:	f1a0 0002 	sub.w	r0, r0, #2
 8005c36:	fab0 f080 	clz	r0, r0
 8005c3a:	0940      	lsrs	r0, r0, #5
 8005c3c:	f7fa fff0 	bl	8000c20 <_test_assert>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d1b3      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
 8005c44:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8005c46:	492c      	ldr	r1, [pc, #176]	; (8005cf8 <oslib_test_009_001_execute+0x168>)
 8005c48:	442b      	add	r3, r5
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	f7fa ffe7 	bl	8000c20 <_test_assert>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1aa      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4926      	ldr	r1, [pc, #152]	; (8005cf4 <oslib_test_009_001_execute+0x164>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	eba0 0008 	sub.w	r0, r0, r8
 8005c60:	fab0 f080 	clz	r0, r0
 8005c64:	0940      	lsrs	r0, r0, #5
 8005c66:	f7fa ffdb 	bl	8000c20 <_test_assert>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d19e      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4921      	ldr	r1, [pc, #132]	; (8005cf8 <oslib_test_009_001_execute+0x168>)
 8005c72:	f1a0 0003 	sub.w	r0, r0, #3
 8005c76:	fab0 f080 	clz	r0, r0
 8005c7a:	0940      	lsrs	r0, r0, #5
 8005c7c:	f7fa ffd0 	bl	8000c20 <_test_assert>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d193      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ff53 	bl	8005b30 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	491b      	ldr	r1, [pc, #108]	; (8005cfc <oslib_test_009_001_execute+0x16c>)
 8005c8e:	1e82      	subs	r2, r0, #2
 8005c90:	4250      	negs	r0, r2
 8005c92:	4150      	adcs	r0, r2
 8005c94:	f7fa ffc4 	bl	8000c20 <_test_assert>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d187      	bne.n	8005bac <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f7ff ff47 	bl	8005b30 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8005ca2:	6870      	ldr	r0, [r6, #4]
 8005ca4:	4915      	ldr	r1, [pc, #84]	; (8005cfc <oslib_test_009_001_execute+0x16c>)
 8005ca6:	1b43      	subs	r3, r0, r5
 8005ca8:	4258      	negs	r0, r3
 8005caa:	4158      	adcs	r0, r3
 8005cac:	f7fa ffb8 	bl	8000c20 <_test_assert>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	f47f af7b 	bne.w	8005bac <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 8005cb6:	4630      	mov	r0, r6
  test_set_step(5);
 8005cb8:	2305      	movs	r3, #5
 8005cba:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8005cbc:	f7ff ff38 	bl	8005b30 <chFactoryReleaseObject>
  test_set_step(6);
 8005cc0:	2306      	movs	r3, #6
 8005cc2:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8005cc4:	f7ff f8dc 	bl	8004e80 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8005cc8:	fab0 f080 	clz	r0, r0
}
 8005ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8005cd0:	4902      	ldr	r1, [pc, #8]	; (8005cdc <oslib_test_009_001_execute+0x14c>)
 8005cd2:	0940      	lsrs	r0, r0, #5
 8005cd4:	f7fa bfa4 	b.w	8000c20 <_test_assert>
 8005cd8:	20001cac 	.word	0x20001cac
 8005cdc:	0800b2e4 	.word	0x0800b2e4
 8005ce0:	20000884 	.word	0x20000884
 8005ce4:	0800b31c 	.word	0x0800b31c
 8005ce8:	20000888 	.word	0x20000888
 8005cec:	0800b32c 	.word	0x0800b32c
 8005cf0:	0800b2e0 	.word	0x0800b2e0
 8005cf4:	0800b33c 	.word	0x0800b33c
 8005cf8:	0800b2ec 	.word	0x0800b2ec
 8005cfc:	0800b308 	.word	0x0800b308

08005d00 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 8005d00:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8005d02:	f7ff f8bd 	bl	8004e80 <chFactoryFindObject.constprop.0>
  if (rop != NULL) {
 8005d06:	b140      	cbz	r0, 8005d1a <oslib_test_009_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8005d08:	6843      	ldr	r3, [r0, #4]
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	b12b      	cbz	r3, 8005d1a <oslib_test_009_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7ff ff0e 	bl	8005b30 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f9      	bne.n	8005d0e <oslib_test_009_001_teardown+0xe>
}
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	0000      	movs	r0, r0
	...

08005d20 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8005d24:	4c17      	ldr	r4, [pc, #92]	; (8005d84 <chHeapStatus+0x64>)
 8005d26:	2800      	cmp	r0, #0
 8005d28:	bf18      	it	ne
 8005d2a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8005d2c:	f104 090c 	add.w	r9, r4, #12
 8005d30:	4648      	mov	r0, r9
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005d32:	468a      	mov	sl, r1
 8005d34:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8005d36:	f7fe fe7b 	bl	8004a30 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	b1f3      	cbz	r3, 8005d7c <chHeapStatus+0x5c>
  lpages = 0U;
 8005d3e:	2500      	movs	r5, #0
  tpages = 0U;
 8005d40:	462e      	mov	r6, r5
  n = 0U;
 8005d42:	462f      	mov	r7, r5
  while (H_NEXT(qp) != NULL) {
 8005d44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d48:	42a5      	cmp	r5, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8005d4a:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 8005d4e:	4426      	add	r6, r4
    if (pages > lpages) {
 8005d50:	bf38      	it	cc
 8005d52:	4625      	movcc	r5, r4
  while (H_NEXT(qp) != NULL) {
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f5      	bne.n	8005d44 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8005d58:	f1ba 0f00 	cmp.w	sl, #0
 8005d5c:	d002      	beq.n	8005d64 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005d5e:	00f6      	lsls	r6, r6, #3
 8005d60:	f8ca 6000 	str.w	r6, [sl]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8005d64:	f1b8 0f00 	cmp.w	r8, #0
 8005d68:	d002      	beq.n	8005d70 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005d6a:	00ed      	lsls	r5, r5, #3
 8005d6c:	f8c8 5000 	str.w	r5, [r8]
  }
  H_UNLOCK(heapp);
 8005d70:	4648      	mov	r0, r9
 8005d72:	f7fc fec5 	bl	8002b00 <chMtxUnlock>

  return n;
}
 8005d76:	4638      	mov	r0, r7
 8005d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  lpages = 0U;
 8005d7c:	461d      	mov	r5, r3
  tpages = 0U;
 8005d7e:	461e      	mov	r6, r3
  n = 0U;
 8005d80:	461f      	mov	r7, r3
 8005d82:	e7e9      	b.n	8005d58 <chHeapStatus+0x38>
 8005d84:	20001358 	.word	0x20001358
	...

08005d90 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005d90:	b530      	push	{r4, r5, lr}
  if (argc > 0) {
 8005d92:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005d94:	b083      	sub	sp, #12
  if (argc > 0) {
 8005d96:	dc1f      	bgt.n	8005dd8 <cmd_mem+0x48>
  n = chHeapStatus(NULL, &total, &largest);
 8005d98:	4604      	mov	r4, r0
 8005d9a:	466a      	mov	r2, sp
 8005d9c:	a901      	add	r1, sp, #4
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f7ff ffbe 	bl	8005d20 <chHeapStatus>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <cmd_mem+0x54>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8005da6:	4910      	ldr	r1, [pc, #64]	; (8005de8 <cmd_mem+0x58>)
 8005da8:	e9d3 3200 	ldrd	r3, r2, [r3]
  n = chHeapStatus(NULL, &total, &largest);
 8005dac:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7fc f9b5 	bl	8002120 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8005db6:	462a      	mov	r2, r5
 8005db8:	490c      	ldr	r1, [pc, #48]	; (8005dec <cmd_mem+0x5c>)
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f7fc f9b0 	bl	8002120 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 8005dc0:	9a01      	ldr	r2, [sp, #4]
 8005dc2:	490b      	ldr	r1, [pc, #44]	; (8005df0 <cmd_mem+0x60>)
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7fc f9ab 	bl	8002120 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8005dca:	9a00      	ldr	r2, [sp, #0]
 8005dcc:	4909      	ldr	r1, [pc, #36]	; (8005df4 <cmd_mem+0x64>)
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f7fc f9a6 	bl	8002120 <chprintf>
}
 8005dd4:	b003      	add	sp, #12
 8005dd6:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "mem");
 8005dd8:	4a07      	ldr	r2, [pc, #28]	; (8005df8 <cmd_mem+0x68>)
 8005dda:	4908      	ldr	r1, [pc, #32]	; (8005dfc <cmd_mem+0x6c>)
 8005ddc:	f7fc f9a0 	bl	8002120 <chprintf>
}
 8005de0:	b003      	add	sp, #12
 8005de2:	bd30      	pop	{r4, r5, pc}
 8005de4:	20001350 	.word	0x20001350
 8005de8:	0800b350 	.word	0x0800b350
 8005dec:	0800b370 	.word	0x0800b370
 8005df0:	0800b388 	.word	0x0800b388
 8005df4:	0800b3a8 	.word	0x0800b3a8
 8005df8:	0800b34c 	.word	0x0800b34c
 8005dfc:	0800ad94 	.word	0x0800ad94

08005e00 <chHeapFree>:
void chHeapFree(void *p) {
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 8005e02:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005e06:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005e08:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8005e0a:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005e0e:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8005e12:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8005e14:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 8005e18:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f7fe fe08 	bl	8004a30 <chMtxLock>
  qp = &heapp->header;
 8005e20:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005e22:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005e24:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005e26:	d001      	beq.n	8005e2c <chHeapFree+0x2c>
 8005e28:	429c      	cmp	r4, r3
 8005e2a:	d902      	bls.n	8005e32 <chHeapFree+0x32>
 8005e2c:	b11a      	cbz	r2, 8005e36 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005e2e:	4294      	cmp	r4, r2
 8005e30:	d301      	bcc.n	8005e36 <chHeapFree+0x36>
    qp = H_NEXT(qp);
 8005e32:	4613      	mov	r3, r2
 8005e34:	e7f5      	b.n	8005e22 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005e36:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8005e3a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8005e3e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005e40:	1c4a      	adds	r2, r1, #1
 8005e42:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005e46:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8005e4a:	4281      	cmp	r1, r0
 8005e4c:	d00a      	beq.n	8005e64 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	1c4a      	adds	r2, r1, #1
 8005e52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005e56:	4294      	cmp	r4, r2
 8005e58:	d011      	beq.n	8005e7e <chHeapFree+0x7e>
  H_UNLOCK(heapp);
 8005e5a:	4638      	mov	r0, r7
}
 8005e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005e60:	f7fc be4e 	b.w	8002b00 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005e64:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005e68:	4402      	add	r2, r0
 8005e6a:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005e6e:	f846 1c08 	str.w	r1, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8005e72:	6859      	ldr	r1, [r3, #4]
 8005e74:	1c4a      	adds	r2, r1, #1
 8005e76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005e7a:	4294      	cmp	r4, r2
 8005e7c:	d1ed      	bne.n	8005e5a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 8005e7e:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005e82:	3201      	adds	r2, #1
 8005e84:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8005e86:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005e88:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 8005e8a:	4638      	mov	r0, r7
}
 8005e8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005e90:	f7fc be36 	b.w	8002b00 <chMtxUnlock>
	...

08005ea0 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 8005ea0:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8005ea2:	4e15      	ldr	r6, [pc, #84]	; (8005ef8 <oslib_test_008_002_execute+0x58>)
static void oslib_test_008_002_execute(void) {
 8005ea4:	b082      	sub	sp, #8
  test_set_step(1);
 8005ea6:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8005ea8:	466a      	mov	r2, sp
 8005eaa:	a901      	add	r1, sp, #4
 8005eac:	2000      	movs	r0, #0
  test_set_step(1);
 8005eae:	6033      	str	r3, [r6, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8005eb0:	f7ff ff36 	bl	8005d20 <chHeapStatus>
 8005eb4:	2110      	movs	r1, #16
 8005eb6:	4811      	ldr	r0, [pc, #68]	; (8005efc <oslib_test_008_002_execute+0x5c>)
 8005eb8:	f7fe fdca 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8005ebc:	4605      	mov	r5, r0
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 8005ebe:	3800      	subs	r0, #0
 8005ec0:	bf18      	it	ne
 8005ec2:	2001      	movne	r0, #1
 8005ec4:	490e      	ldr	r1, [pc, #56]	; (8005f00 <oslib_test_008_002_execute+0x60>)
 8005ec6:	f7fa feab 	bl	8000c20 <_test_assert>
 8005eca:	b108      	cbz	r0, 8005ed0 <oslib_test_008_002_execute+0x30>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
    chHeapFree(p1);
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff ff94 	bl	8005e00 <chHeapFree>
  test_set_step(2);
 8005ed8:	2302      	movs	r3, #2
 8005eda:	4620      	mov	r0, r4
 8005edc:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8005ee0:	6033      	str	r3, [r6, #0]
 8005ee2:	f7fe fdb5 	bl	8004a50 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 8005ee6:	fab0 f080 	clz	r0, r0
 8005eea:	4906      	ldr	r1, [pc, #24]	; (8005f04 <oslib_test_008_002_execute+0x64>)
 8005eec:	0940      	lsrs	r0, r0, #5
 8005eee:	f7fa fe97 	bl	8000c20 <_test_assert>
}
 8005ef2:	b002      	add	sp, #8
 8005ef4:	bd70      	pop	{r4, r5, r6, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20001cac 	.word	0x20001cac
 8005efc:	20001c0c 	.word	0x20001c0c
 8005f00:	0800b3c8 	.word	0x0800b3c8
 8005f04:	0800b3dc 	.word	0x0800b3dc
	...

08005f10 <oslib_test_008_001_execute>:
static void oslib_test_008_001_execute(void) {
 8005f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005f14:	4cbe      	ldr	r4, [pc, #760]	; (8006210 <oslib_test_008_001_execute+0x300>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005f16:	48bf      	ldr	r0, [pc, #764]	; (8006214 <oslib_test_008_001_execute+0x304>)
static void oslib_test_008_001_execute(void) {
 8005f18:	b084      	sub	sp, #16
  test_set_step(1);
 8005f1a:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005f1c:	4669      	mov	r1, sp
 8005f1e:	2200      	movs	r2, #0
  test_set_step(1);
 8005f20:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005f22:	f7ff fefd 	bl	8005d20 <chHeapStatus>
 8005f26:	f1a0 0001 	sub.w	r0, r0, #1
 8005f2a:	fab0 f080 	clz	r0, r0
 8005f2e:	49ba      	ldr	r1, [pc, #744]	; (8006218 <oslib_test_008_001_execute+0x308>)
 8005f30:	0940      	lsrs	r0, r0, #5
 8005f32:	f7fa fe75 	bl	8000c20 <_test_assert>
 8005f36:	b110      	cbz	r0, 8005f3e <oslib_test_008_001_execute+0x2e>
}
 8005f38:	b004      	add	sp, #16
 8005f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8005f3e:	2302      	movs	r3, #2
 8005f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f44:	48b3      	ldr	r0, [pc, #716]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8005f46:	6023      	str	r3, [r4, #0]
 8005f48:	f7fe fd82 	bl	8004a50 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 8005f4c:	fab0 f080 	clz	r0, r0
 8005f50:	49b2      	ldr	r1, [pc, #712]	; (800621c <oslib_test_008_001_execute+0x30c>)
 8005f52:	0940      	lsrs	r0, r0, #5
 8005f54:	f7fa fe64 	bl	8000c20 <_test_assert>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1ed      	bne.n	8005f38 <oslib_test_008_001_execute+0x28>
  test_set_step(3);
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	2110      	movs	r1, #16
 8005f60:	48ac      	ldr	r0, [pc, #688]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	f7fe fd74 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8005f68:	4605      	mov	r5, r0
    test_assert(p1 != NULL, "allocation failed");
 8005f6a:	3800      	subs	r0, #0
 8005f6c:	bf18      	it	ne
 8005f6e:	2001      	movne	r0, #1
 8005f70:	49ab      	ldr	r1, [pc, #684]	; (8006220 <oslib_test_008_001_execute+0x310>)
 8005f72:	f7fa fe55 	bl	8000c20 <_test_assert>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d1de      	bne.n	8005f38 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f7ff ff40 	bl	8005e00 <chHeapFree>
  test_set_step(4);
 8005f80:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005f82:	a903      	add	r1, sp, #12
 8005f84:	48a3      	ldr	r0, [pc, #652]	; (8006214 <oslib_test_008_001_execute+0x304>)
  test_set_step(4);
 8005f86:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005f88:	aa02      	add	r2, sp, #8
 8005f8a:	f7ff fec9 	bl	8005d20 <chHeapStatus>
 8005f8e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8005f90:	f1a0 0001 	sub.w	r0, r0, #1
 8005f94:	fab0 f080 	clz	r0, r0
 8005f98:	49a2      	ldr	r1, [pc, #648]	; (8006224 <oslib_test_008_001_execute+0x314>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005f9a:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 8005f9c:	0940      	lsrs	r0, r0, #5
 8005f9e:	f7fa fe3f 	bl	8000c20 <_test_assert>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d1c8      	bne.n	8005f38 <oslib_test_008_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8005fa6:	9803      	ldr	r0, [sp, #12]
 8005fa8:	499f      	ldr	r1, [pc, #636]	; (8006228 <oslib_test_008_001_execute+0x318>)
 8005faa:	280f      	cmp	r0, #15
 8005fac:	bf94      	ite	ls
 8005fae:	2000      	movls	r0, #0
 8005fb0:	2001      	movhi	r0, #1
 8005fb2:	f7fa fe35 	bl	8000c20 <_test_assert>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d1be      	bne.n	8005f38 <oslib_test_008_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 8005fba:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8005fbe:	1ac0      	subs	r0, r0, r3
 8005fc0:	fab0 f080 	clz	r0, r0
 8005fc4:	4998      	ldr	r1, [pc, #608]	; (8006228 <oslib_test_008_001_execute+0x318>)
 8005fc6:	0940      	lsrs	r0, r0, #5
 8005fc8:	f7fa fe2a 	bl	8000c20 <_test_assert>
 8005fcc:	4605      	mov	r5, r0
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1b2      	bne.n	8005f38 <oslib_test_008_001_execute+0x28>
  test_set_step(5);
 8005fd2:	2305      	movs	r3, #5
 8005fd4:	2110      	movs	r1, #16
 8005fd6:	488f      	ldr	r0, [pc, #572]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	f7fe fd39 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8005fde:	2110      	movs	r1, #16
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	488c      	ldr	r0, [pc, #560]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8005fe4:	f7fe fd34 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8005fe8:	2110      	movs	r1, #16
 8005fea:	4607      	mov	r7, r0
 8005fec:	4889      	ldr	r0, [pc, #548]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8005fee:	f7fe fd2f 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8005ff2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	f7ff ff03 	bl	8005e00 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f7ff ff00 	bl	8005e00 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff fefd 	bl	8005e00 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006006:	462a      	mov	r2, r5
 8006008:	a901      	add	r1, sp, #4
 800600a:	4882      	ldr	r0, [pc, #520]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800600c:	f7ff fe88 	bl	8005d20 <chHeapStatus>
 8006010:	f1a0 0001 	sub.w	r0, r0, #1
 8006014:	fab0 f080 	clz	r0, r0
 8006018:	497f      	ldr	r1, [pc, #508]	; (8006218 <oslib_test_008_001_execute+0x308>)
 800601a:	0940      	lsrs	r0, r0, #5
 800601c:	f7fa fe00 	bl	8000c20 <_test_assert>
 8006020:	4605      	mov	r5, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d188      	bne.n	8005f38 <oslib_test_008_001_execute+0x28>
  test_set_step(6);
 8006026:	2306      	movs	r3, #6
 8006028:	2110      	movs	r1, #16
 800602a:	487a      	ldr	r0, [pc, #488]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	f7fe fd0f 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8006032:	2110      	movs	r1, #16
 8006034:	4606      	mov	r6, r0
 8006036:	4877      	ldr	r0, [pc, #476]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006038:	f7fe fd0a 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 800603c:	2110      	movs	r1, #16
 800603e:	4607      	mov	r7, r0
 8006040:	4874      	ldr	r0, [pc, #464]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006042:	f7fe fd05 	bl	8004a50 <chHeapAllocAligned.constprop.0>
    chHeapFree(p3);                                 /* Merges forward.*/
 8006046:	f7ff fedb 	bl	8005e00 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800604a:	4638      	mov	r0, r7
 800604c:	f7ff fed8 	bl	8005e00 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8006050:	4630      	mov	r0, r6
 8006052:	f7ff fed5 	bl	8005e00 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006056:	462a      	mov	r2, r5
 8006058:	a901      	add	r1, sp, #4
 800605a:	486e      	ldr	r0, [pc, #440]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800605c:	f7ff fe60 	bl	8005d20 <chHeapStatus>
 8006060:	f1a0 0001 	sub.w	r0, r0, #1
 8006064:	fab0 f080 	clz	r0, r0
 8006068:	496b      	ldr	r1, [pc, #428]	; (8006218 <oslib_test_008_001_execute+0x308>)
 800606a:	0940      	lsrs	r0, r0, #5
 800606c:	f7fa fdd8 	bl	8000c20 <_test_assert>
 8006070:	4605      	mov	r5, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	f47f af60 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
  test_set_step(7);
 8006078:	2307      	movs	r3, #7
 800607a:	2111      	movs	r1, #17
 800607c:	4865      	ldr	r0, [pc, #404]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	f7fe fce6 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8006084:	2110      	movs	r1, #16
 8006086:	4606      	mov	r6, r0
 8006088:	4862      	ldr	r0, [pc, #392]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800608a:	f7fe fce1 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 800608e:	4603      	mov	r3, r0
    chHeapFree(p1);
 8006090:	4630      	mov	r0, r6
 8006092:	461e      	mov	r6, r3
 8006094:	f7ff feb4 	bl	8005e00 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006098:	462a      	mov	r2, r5
 800609a:	a901      	add	r1, sp, #4
 800609c:	485d      	ldr	r0, [pc, #372]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800609e:	f7ff fe3f 	bl	8005d20 <chHeapStatus>
 80060a2:	f1a0 0002 	sub.w	r0, r0, #2
 80060a6:	fab0 f080 	clz	r0, r0
 80060aa:	4960      	ldr	r1, [pc, #384]	; (800622c <oslib_test_008_001_execute+0x31c>)
 80060ac:	0940      	lsrs	r0, r0, #5
 80060ae:	f7fa fdb7 	bl	8000c20 <_test_assert>
 80060b2:	4605      	mov	r5, r0
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f47f af3f 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
 80060ba:	2110      	movs	r1, #16
 80060bc:	4855      	ldr	r0, [pc, #340]	; (8006214 <oslib_test_008_001_execute+0x304>)
 80060be:	f7fe fcc7 	bl	8004a50 <chHeapAllocAligned.constprop.0>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80060c2:	462a      	mov	r2, r5
 80060c4:	4607      	mov	r7, r0
 80060c6:	a901      	add	r1, sp, #4
 80060c8:	4852      	ldr	r0, [pc, #328]	; (8006214 <oslib_test_008_001_execute+0x304>)
 80060ca:	f7ff fe29 	bl	8005d20 <chHeapStatus>
 80060ce:	2801      	cmp	r0, #1
 80060d0:	f000 809c 	beq.w	800620c <oslib_test_008_001_execute+0x2fc>
 80060d4:	484f      	ldr	r0, [pc, #316]	; (8006214 <oslib_test_008_001_execute+0x304>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	a901      	add	r1, sp, #4
 80060da:	f7ff fe21 	bl	8005d20 <chHeapStatus>
 80060de:	f1a0 0c02 	sub.w	ip, r0, #2
 80060e2:	f1dc 0000 	rsbs	r0, ip, #0
 80060e6:	eb40 000c 	adc.w	r0, r0, ip
 80060ea:	494b      	ldr	r1, [pc, #300]	; (8006218 <oslib_test_008_001_execute+0x308>)
 80060ec:	f7fa fd98 	bl	8000c20 <_test_assert>
 80060f0:	4605      	mov	r5, r0
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f47f af20 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
    chHeapFree(p2);
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff fe81 	bl	8005e00 <chHeapFree>
    chHeapFree(p1);
 80060fe:	4638      	mov	r0, r7
 8006100:	f7ff fe7e 	bl	8005e00 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006104:	462a      	mov	r2, r5
 8006106:	a901      	add	r1, sp, #4
 8006108:	4842      	ldr	r0, [pc, #264]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800610a:	f7ff fe09 	bl	8005d20 <chHeapStatus>
 800610e:	1e46      	subs	r6, r0, #1
 8006110:	4270      	negs	r0, r6
 8006112:	4941      	ldr	r1, [pc, #260]	; (8006218 <oslib_test_008_001_execute+0x308>)
 8006114:	4170      	adcs	r0, r6
 8006116:	f7fa fd83 	bl	8000c20 <_test_assert>
 800611a:	4605      	mov	r5, r0
 800611c:	2800      	cmp	r0, #0
 800611e:	f47f af0b 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
  test_set_step(8);
 8006122:	2308      	movs	r3, #8
 8006124:	2110      	movs	r1, #16
 8006126:	483b      	ldr	r0, [pc, #236]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	f7fe fc91 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 800612e:	2110      	movs	r1, #16
 8006130:	4607      	mov	r7, r0
 8006132:	4838      	ldr	r0, [pc, #224]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006134:	f7fe fc8c 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 8006138:	4606      	mov	r6, r0
    chHeapFree(p1);
 800613a:	4638      	mov	r0, r7
 800613c:	f7ff fe60 	bl	8005e00 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006140:	462a      	mov	r2, r5
 8006142:	a901      	add	r1, sp, #4
 8006144:	4833      	ldr	r0, [pc, #204]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006146:	f7ff fdeb 	bl	8005d20 <chHeapStatus>
 800614a:	1e85      	subs	r5, r0, #2
 800614c:	4268      	negs	r0, r5
 800614e:	4168      	adcs	r0, r5
 8006150:	4936      	ldr	r1, [pc, #216]	; (800622c <oslib_test_008_001_execute+0x31c>)
 8006152:	f7fa fd65 	bl	8000c20 <_test_assert>
 8006156:	4605      	mov	r5, r0
 8006158:	2800      	cmp	r0, #0
 800615a:	f47f aeed 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
 800615e:	2120      	movs	r1, #32
 8006160:	482c      	ldr	r0, [pc, #176]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006162:	f7fe fc75 	bl	8004a50 <chHeapAllocAligned.constprop.0>
    chHeapFree(p1);
 8006166:	f7ff fe4b 	bl	8005e00 <chHeapFree>
    chHeapFree(p2);
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff fe48 	bl	8005e00 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006170:	462a      	mov	r2, r5
 8006172:	a901      	add	r1, sp, #4
 8006174:	4827      	ldr	r0, [pc, #156]	; (8006214 <oslib_test_008_001_execute+0x304>)
 8006176:	f7ff fdd3 	bl	8005d20 <chHeapStatus>
 800617a:	1e41      	subs	r1, r0, #1
 800617c:	4248      	negs	r0, r1
 800617e:	4148      	adcs	r0, r1
 8006180:	4925      	ldr	r1, [pc, #148]	; (8006218 <oslib_test_008_001_execute+0x308>)
 8006182:	f7fa fd4d 	bl	8000c20 <_test_assert>
 8006186:	4602      	mov	r2, r0
 8006188:	2800      	cmp	r0, #0
 800618a:	f47f aed5 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
  test_set_step(9);
 800618e:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006190:	a901      	add	r1, sp, #4
 8006192:	4820      	ldr	r0, [pc, #128]	; (8006214 <oslib_test_008_001_execute+0x304>)
  test_set_step(9);
 8006194:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006196:	f7ff fdc3 	bl	8005d20 <chHeapStatus>
 800619a:	9901      	ldr	r1, [sp, #4]
 800619c:	481d      	ldr	r0, [pc, #116]	; (8006214 <oslib_test_008_001_execute+0x304>)
 800619e:	f7fe fc57 	bl	8004a50 <chHeapAllocAligned.constprop.0>
 80061a2:	4606      	mov	r6, r0
    test_assert(p1 != NULL, "allocation failed");
 80061a4:	3800      	subs	r0, #0
 80061a6:	491e      	ldr	r1, [pc, #120]	; (8006220 <oslib_test_008_001_execute+0x310>)
 80061a8:	bf18      	it	ne
 80061aa:	2001      	movne	r0, #1
 80061ac:	f7fa fd38 	bl	8000c20 <_test_assert>
 80061b0:	4602      	mov	r2, r0
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f47f aec0 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 80061b8:	4601      	mov	r1, r0
 80061ba:	4816      	ldr	r0, [pc, #88]	; (8006214 <oslib_test_008_001_execute+0x304>)
 80061bc:	f7ff fdb0 	bl	8005d20 <chHeapStatus>
 80061c0:	fab0 f080 	clz	r0, r0
 80061c4:	491a      	ldr	r1, [pc, #104]	; (8006230 <oslib_test_008_001_execute+0x320>)
 80061c6:	0940      	lsrs	r0, r0, #5
 80061c8:	f7fa fd2a 	bl	8000c20 <_test_assert>
 80061cc:	4605      	mov	r5, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f47f aeb2 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 80061d4:	4630      	mov	r0, r6
 80061d6:	f7ff fe13 	bl	8005e00 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80061da:	462a      	mov	r2, r5
 80061dc:	a901      	add	r1, sp, #4
  test_set_step(10);
 80061de:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80061e0:	480c      	ldr	r0, [pc, #48]	; (8006214 <oslib_test_008_001_execute+0x304>)
  test_set_step(10);
 80061e2:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80061e4:	f7ff fd9c 	bl	8005d20 <chHeapStatus>
 80061e8:	1e42      	subs	r2, r0, #1
 80061ea:	4250      	negs	r0, r2
 80061ec:	4150      	adcs	r0, r2
 80061ee:	490a      	ldr	r1, [pc, #40]	; (8006218 <oslib_test_008_001_execute+0x308>)
 80061f0:	f7fa fd16 	bl	8000c20 <_test_assert>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f47f ae9f 	bne.w	8005f38 <oslib_test_008_001_execute+0x28>
    test_assert(n == sz, "size changed");
 80061fa:	e9dd 3000 	ldrd	r3, r0, [sp]
 80061fe:	1ac3      	subs	r3, r0, r3
 8006200:	4258      	negs	r0, r3
 8006202:	490c      	ldr	r1, [pc, #48]	; (8006234 <oslib_test_008_001_execute+0x324>)
 8006204:	4158      	adcs	r0, r3
 8006206:	f7fa fd0b 	bl	8000c20 <_test_assert>
 800620a:	e695      	b.n	8005f38 <oslib_test_008_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800620c:	2001      	movs	r0, #1
 800620e:	e76c      	b.n	80060ea <oslib_test_008_001_execute+0x1da>
 8006210:	20001cac 	.word	0x20001cac
 8006214:	20001c0c 	.word	0x20001c0c
 8006218:	0800b3f4 	.word	0x0800b3f4
 800621c:	0800b3dc 	.word	0x0800b3dc
 8006220:	0800b3c8 	.word	0x0800b3c8
 8006224:	0800b404 	.word	0x0800b404
 8006228:	0800b418 	.word	0x0800b418
 800622c:	0800b430 	.word	0x0800b430
 8006230:	0800b004 	.word	0x0800b004
 8006234:	0800b440 	.word	0x0800b440
	...

08006240 <dyn_release_object_heap.part.0>:
static void dyn_release_object_heap(dyn_element_t *dep,
 8006240:	4603      	mov	r3, r0
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006242:	4608      	mov	r0, r1
 8006244:	e001      	b.n	800624a <dyn_release_object_heap.part.0+0xa>
    if (prev->next == element) {
 8006246:	4283      	cmp	r3, r0
 8006248:	d006      	beq.n	8006258 <dyn_release_object_heap.part.0+0x18>
  while (prev->next != (dyn_element_t *)dlp) {
 800624a:	4602      	mov	r2, r0
 800624c:	6800      	ldr	r0, [r0, #0]
 800624e:	4288      	cmp	r0, r1
 8006250:	d1f9      	bne.n	8006246 <dyn_release_object_heap.part.0+0x6>
  return NULL;
 8006252:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006254:	f7ff bdd4 	b.w	8005e00 <chHeapFree>
      prev->next = element->next;
 8006258:	6803      	ldr	r3, [r0, #0]
 800625a:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800625c:	f7ff bdd0 	b.w	8005e00 <chHeapFree>

08006260 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006260:	b510      	push	{r4, lr}
 8006262:	4604      	mov	r4, r0

  F_LOCK();
 8006264:	4807      	ldr	r0, [pc, #28]	; (8006284 <chFactoryReleasePipe+0x24>)
 8006266:	f7fe fbe3 	bl	8004a30 <chMtxLock>
  dep->refs--;
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	3b01      	subs	r3, #1
 800626e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006270:	b91b      	cbnz	r3, 800627a <chFactoryReleasePipe+0x1a>
 8006272:	4905      	ldr	r1, [pc, #20]	; (8006288 <chFactoryReleasePipe+0x28>)
 8006274:	4620      	mov	r0, r4
 8006276:	f7ff ffe3 	bl	8006240 <dyn_release_object_heap.part.0>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 800627a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800627e:	4801      	ldr	r0, [pc, #4]	; (8006284 <chFactoryReleasePipe+0x24>)
 8006280:	f7fc bc3e 	b.w	8002b00 <chMtxUnlock>
 8006284:	20001230 	.word	0x20001230
 8006288:	20001274 	.word	0x20001274
 800628c:	00000000 	.word	0x00000000

08006290 <oslib_test_009_006_execute>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_009_006_execute(void) {
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 8006292:	4c43      	ldr	r4, [pc, #268]	; (80063a0 <oslib_test_009_006_execute+0x110>)
 8006294:	2501      	movs	r5, #1
 8006296:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 8006298:	f7fe ff4a 	bl	8005130 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 800629c:	fab0 f080 	clz	r0, r0
 80062a0:	4940      	ldr	r1, [pc, #256]	; (80063a4 <oslib_test_009_006_execute+0x114>)
 80062a2:	0940      	lsrs	r0, r0, #5
 80062a4:	f7fa fcbc 	bl	8000c20 <_test_assert>
 80062a8:	b100      	cbz	r0, 80062ac <oslib_test_009_006_execute+0x1c>
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 80062aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80062ac:	2302      	movs	r3, #2
 80062ae:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 80062b0:	f7fe ff06 	bl	80050c0 <chFactoryCreatePipe.constprop.0>
 80062b4:	4606      	mov	r6, r0
    test_assert(dpp != NULL, "cannot create");
 80062b6:	3800      	subs	r0, #0
 80062b8:	bf18      	it	ne
 80062ba:	2001      	movne	r0, #1
 80062bc:	493a      	ldr	r1, [pc, #232]	; (80063a8 <oslib_test_009_006_execute+0x118>)
 80062be:	f7fa fcaf 	bl	8000c20 <_test_assert>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d1f1      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
  test_set_step(3);
 80062c6:	2303      	movs	r3, #3
 80062c8:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 80062ca:	f7fe fef9 	bl	80050c0 <chFactoryCreatePipe.constprop.0>
    test_assert(dpp1 == NULL, "can create");
 80062ce:	fab0 f080 	clz	r0, r0
 80062d2:	4936      	ldr	r1, [pc, #216]	; (80063ac <oslib_test_009_006_execute+0x11c>)
 80062d4:	0940      	lsrs	r0, r0, #5
 80062d6:	f7fa fca3 	bl	8000c20 <_test_assert>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1e5      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
  test_set_step(4);
 80062de:	2304      	movs	r3, #4
 80062e0:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 80062e2:	f7fe ff25 	bl	8005130 <chFactoryFindPipe.constprop.0>
 80062e6:	4607      	mov	r7, r0
    test_assert(dpp1 != NULL, "not found");
 80062e8:	3800      	subs	r0, #0
 80062ea:	bf18      	it	ne
 80062ec:	2001      	movne	r0, #1
 80062ee:	4930      	ldr	r1, [pc, #192]	; (80063b0 <oslib_test_009_006_execute+0x120>)
 80062f0:	f7fa fc96 	bl	8000c20 <_test_assert>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1d8      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 80062f8:	1bf0      	subs	r0, r6, r7
 80062fa:	fab0 f080 	clz	r0, r0
 80062fe:	492d      	ldr	r1, [pc, #180]	; (80063b4 <oslib_test_009_006_execute+0x124>)
 8006300:	0940      	lsrs	r0, r0, #5
 8006302:	f7fa fc8d 	bl	8000c20 <_test_assert>
 8006306:	2800      	cmp	r0, #0
 8006308:	d1cf      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4929      	ldr	r1, [pc, #164]	; (80063b4 <oslib_test_009_006_execute+0x124>)
 800630e:	f1a0 0002 	sub.w	r0, r0, #2
 8006312:	fab0 f080 	clz	r0, r0
 8006316:	0940      	lsrs	r0, r0, #5
 8006318:	f7fa fc82 	bl	8000c20 <_test_assert>
 800631c:	2800      	cmp	r0, #0
 800631e:	d1c4      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
 8006320:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 8006322:	4924      	ldr	r1, [pc, #144]	; (80063b4 <oslib_test_009_006_execute+0x124>)
 8006324:	442b      	add	r3, r5
 8006326:	4628      	mov	r0, r5
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	f7fa fc79 	bl	8000c20 <_test_assert>
 800632e:	2800      	cmp	r0, #0
 8006330:	d1bb      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	491f      	ldr	r1, [pc, #124]	; (80063b4 <oslib_test_009_006_execute+0x124>)
 8006336:	f1a0 0003 	sub.w	r0, r0, #3
 800633a:	fab0 f080 	clz	r0, r0
 800633e:	0940      	lsrs	r0, r0, #5
 8006340:	f7fa fc6e 	bl	8000c20 <_test_assert>
 8006344:	2800      	cmp	r0, #0
 8006346:	d1b0      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp2);
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ff89 	bl	8006260 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4919      	ldr	r1, [pc, #100]	; (80063b8 <oslib_test_009_006_execute+0x128>)
 8006352:	f1a0 0002 	sub.w	r0, r0, #2
 8006356:	fab0 f080 	clz	r0, r0
 800635a:	0940      	lsrs	r0, r0, #5
 800635c:	f7fa fc60 	bl	8000c20 <_test_assert>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1a2      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp1);
 8006364:	4638      	mov	r0, r7
 8006366:	f7ff ff7b 	bl	8006260 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 800636a:	6870      	ldr	r0, [r6, #4]
 800636c:	4912      	ldr	r1, [pc, #72]	; (80063b8 <oslib_test_009_006_execute+0x128>)
 800636e:	1b40      	subs	r0, r0, r5
 8006370:	fab0 f080 	clz	r0, r0
 8006374:	0940      	lsrs	r0, r0, #5
 8006376:	f7fa fc53 	bl	8000c20 <_test_assert>
 800637a:	2800      	cmp	r0, #0
 800637c:	d195      	bne.n	80062aa <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp);
 800637e:	4630      	mov	r0, r6
  test_set_step(5);
 8006380:	2305      	movs	r3, #5
 8006382:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 8006384:	f7ff ff6c 	bl	8006260 <chFactoryReleasePipe>
  test_set_step(6);
 8006388:	2306      	movs	r3, #6
 800638a:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 800638c:	f7fe fed0 	bl	8005130 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 8006390:	fab0 f080 	clz	r0, r0
}
 8006394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 8006398:	4902      	ldr	r1, [pc, #8]	; (80063a4 <oslib_test_009_006_execute+0x114>)
 800639a:	0940      	lsrs	r0, r0, #5
 800639c:	f7fa bc40 	b.w	8000c20 <_test_assert>
 80063a0:	20001cac 	.word	0x20001cac
 80063a4:	0800b2e4 	.word	0x0800b2e4
 80063a8:	0800b2c4 	.word	0x0800b2c4
 80063ac:	0800b2d4 	.word	0x0800b2d4
 80063b0:	0800b2e0 	.word	0x0800b2e0
 80063b4:	0800b2ec 	.word	0x0800b2ec
 80063b8:	0800b308 	.word	0x0800b308
 80063bc:	00000000 	.word	0x00000000

080063c0 <oslib_test_009_006_teardown>:
static void oslib_test_009_006_teardown(void) {
 80063c0:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 80063c2:	f7fe feb5 	bl	8005130 <chFactoryFindPipe.constprop.0>
  if (dpp != NULL) {
 80063c6:	b140      	cbz	r0, 80063da <oslib_test_009_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
 80063c8:	6843      	ldr	r3, [r0, #4]
 80063ca:	4604      	mov	r4, r0
 80063cc:	b12b      	cbz	r3, 80063da <oslib_test_009_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7ff ff46 	bl	8006260 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f9      	bne.n	80063ce <oslib_test_009_006_teardown+0xe>
}
 80063da:	bd10      	pop	{r4, pc}
 80063dc:	0000      	movs	r0, r0
	...

080063e0 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 80063e0:	b510      	push	{r4, lr}
 80063e2:	4604      	mov	r4, r0
  F_LOCK();
 80063e4:	4807      	ldr	r0, [pc, #28]	; (8006404 <chFactoryReleaseObjectsFIFO+0x24>)
 80063e6:	f7fe fb23 	bl	8004a30 <chMtxLock>
  dep->refs--;
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80063f0:	b91b      	cbnz	r3, 80063fa <chFactoryReleaseObjectsFIFO+0x1a>
 80063f2:	4905      	ldr	r1, [pc, #20]	; (8006408 <chFactoryReleaseObjectsFIFO+0x28>)
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff ff23 	bl	8006240 <dyn_release_object_heap.part.0>
}
 80063fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80063fe:	4801      	ldr	r0, [pc, #4]	; (8006404 <chFactoryReleaseObjectsFIFO+0x24>)
 8006400:	f7fc bb7e 	b.w	8002b00 <chMtxUnlock>
 8006404:	20001230 	.word	0x20001230
 8006408:	20001270 	.word	0x20001270
 800640c:	00000000 	.word	0x00000000

08006410 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006412:	4c43      	ldr	r4, [pc, #268]	; (8006520 <oslib_test_009_005_execute+0x110>)
 8006414:	2501      	movs	r5, #1
 8006416:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8006418:	f7fe fe3a 	bl	8005090 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 800641c:	fab0 f080 	clz	r0, r0
 8006420:	4940      	ldr	r1, [pc, #256]	; (8006524 <oslib_test_009_005_execute+0x114>)
 8006422:	0940      	lsrs	r0, r0, #5
 8006424:	f7fa fbfc 	bl	8000c20 <_test_assert>
 8006428:	b100      	cbz	r0, 800642c <oslib_test_009_005_execute+0x1c>
}
 800642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800642c:	2302      	movs	r3, #2
 800642e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8006430:	f7fe fdf6 	bl	8005020 <chFactoryCreateObjectsFIFO.constprop.0>
 8006434:	4606      	mov	r6, r0
    test_assert(dofp != NULL, "cannot create");
 8006436:	3800      	subs	r0, #0
 8006438:	bf18      	it	ne
 800643a:	2001      	movne	r0, #1
 800643c:	493a      	ldr	r1, [pc, #232]	; (8006528 <oslib_test_009_005_execute+0x118>)
 800643e:	f7fa fbef 	bl	8000c20 <_test_assert>
 8006442:	2800      	cmp	r0, #0
 8006444:	d1f1      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
  test_set_step(3);
 8006446:	2303      	movs	r3, #3
 8006448:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800644a:	f7fe fde9 	bl	8005020 <chFactoryCreateObjectsFIFO.constprop.0>
    test_assert(dofp1 == NULL, "can create");
 800644e:	fab0 f080 	clz	r0, r0
 8006452:	4936      	ldr	r1, [pc, #216]	; (800652c <oslib_test_009_005_execute+0x11c>)
 8006454:	0940      	lsrs	r0, r0, #5
 8006456:	f7fa fbe3 	bl	8000c20 <_test_assert>
 800645a:	2800      	cmp	r0, #0
 800645c:	d1e5      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
  test_set_step(4);
 800645e:	2304      	movs	r3, #4
 8006460:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8006462:	f7fe fe15 	bl	8005090 <chFactoryFindObjectsFIFO.constprop.0>
 8006466:	4607      	mov	r7, r0
    test_assert(dofp1 != NULL, "not found");
 8006468:	3800      	subs	r0, #0
 800646a:	bf18      	it	ne
 800646c:	2001      	movne	r0, #1
 800646e:	4930      	ldr	r1, [pc, #192]	; (8006530 <oslib_test_009_005_execute+0x120>)
 8006470:	f7fa fbd6 	bl	8000c20 <_test_assert>
 8006474:	2800      	cmp	r0, #0
 8006476:	d1d8      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 8006478:	1bf0      	subs	r0, r6, r7
 800647a:	fab0 f080 	clz	r0, r0
 800647e:	492d      	ldr	r1, [pc, #180]	; (8006534 <oslib_test_009_005_execute+0x124>)
 8006480:	0940      	lsrs	r0, r0, #5
 8006482:	f7fa fbcd 	bl	8000c20 <_test_assert>
 8006486:	2800      	cmp	r0, #0
 8006488:	d1cf      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4929      	ldr	r1, [pc, #164]	; (8006534 <oslib_test_009_005_execute+0x124>)
 800648e:	f1a0 0002 	sub.w	r0, r0, #2
 8006492:	fab0 f080 	clz	r0, r0
 8006496:	0940      	lsrs	r0, r0, #5
 8006498:	f7fa fbc2 	bl	8000c20 <_test_assert>
 800649c:	2800      	cmp	r0, #0
 800649e:	d1c4      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
 80064a0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80064a2:	4924      	ldr	r1, [pc, #144]	; (8006534 <oslib_test_009_005_execute+0x124>)
 80064a4:	442b      	add	r3, r5
 80064a6:	4628      	mov	r0, r5
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	f7fa fbb9 	bl	8000c20 <_test_assert>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d1bb      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	491f      	ldr	r1, [pc, #124]	; (8006534 <oslib_test_009_005_execute+0x124>)
 80064b6:	f1a0 0003 	sub.w	r0, r0, #3
 80064ba:	fab0 f080 	clz	r0, r0
 80064be:	0940      	lsrs	r0, r0, #5
 80064c0:	f7fa fbae 	bl	8000c20 <_test_assert>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d1b0      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff ff89 	bl	80063e0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4919      	ldr	r1, [pc, #100]	; (8006538 <oslib_test_009_005_execute+0x128>)
 80064d2:	f1a0 0002 	sub.w	r0, r0, #2
 80064d6:	fab0 f080 	clz	r0, r0
 80064da:	0940      	lsrs	r0, r0, #5
 80064dc:	f7fa fba0 	bl	8000c20 <_test_assert>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d1a2      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ff7b 	bl	80063e0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 80064ea:	6870      	ldr	r0, [r6, #4]
 80064ec:	4912      	ldr	r1, [pc, #72]	; (8006538 <oslib_test_009_005_execute+0x128>)
 80064ee:	1b40      	subs	r0, r0, r5
 80064f0:	fab0 f080 	clz	r0, r0
 80064f4:	0940      	lsrs	r0, r0, #5
 80064f6:	f7fa fb93 	bl	8000c20 <_test_assert>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d195      	bne.n	800642a <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 80064fe:	4630      	mov	r0, r6
  test_set_step(5);
 8006500:	2305      	movs	r3, #5
 8006502:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8006504:	f7ff ff6c 	bl	80063e0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8006508:	2306      	movs	r3, #6
 800650a:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800650c:	f7fe fdc0 	bl	8005090 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 8006510:	fab0 f080 	clz	r0, r0
}
 8006514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8006518:	4902      	ldr	r1, [pc, #8]	; (8006524 <oslib_test_009_005_execute+0x114>)
 800651a:	0940      	lsrs	r0, r0, #5
 800651c:	f7fa bb80 	b.w	8000c20 <_test_assert>
 8006520:	20001cac 	.word	0x20001cac
 8006524:	0800b2e4 	.word	0x0800b2e4
 8006528:	0800b2c4 	.word	0x0800b2c4
 800652c:	0800b2d4 	.word	0x0800b2d4
 8006530:	0800b2e0 	.word	0x0800b2e0
 8006534:	0800b2ec 	.word	0x0800b2ec
 8006538:	0800b308 	.word	0x0800b308
 800653c:	00000000 	.word	0x00000000

08006540 <oslib_test_009_005_teardown>:
static void oslib_test_009_005_teardown(void) {
 8006540:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8006542:	f7fe fda5 	bl	8005090 <chFactoryFindObjectsFIFO.constprop.0>
  if (dofp != NULL) {
 8006546:	b140      	cbz	r0, 800655a <oslib_test_009_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8006548:	6843      	ldr	r3, [r0, #4]
 800654a:	4604      	mov	r4, r0
 800654c:	b12b      	cbz	r3, 800655a <oslib_test_009_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff ff46 	bl	80063e0 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8006554:	6863      	ldr	r3, [r4, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f9      	bne.n	800654e <oslib_test_009_005_teardown+0xe>
}
 800655a:	bd10      	pop	{r4, pc}
 800655c:	0000      	movs	r0, r0
	...

08006560 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006560:	b510      	push	{r4, lr}
 8006562:	4604      	mov	r4, r0
  F_LOCK();
 8006564:	4807      	ldr	r0, [pc, #28]	; (8006584 <chFactoryReleaseMailbox+0x24>)
 8006566:	f7fe fa63 	bl	8004a30 <chMtxLock>
  dep->refs--;
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	3b01      	subs	r3, #1
 800656e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006570:	b91b      	cbnz	r3, 800657a <chFactoryReleaseMailbox+0x1a>
 8006572:	4905      	ldr	r1, [pc, #20]	; (8006588 <chFactoryReleaseMailbox+0x28>)
 8006574:	4620      	mov	r0, r4
 8006576:	f7ff fe63 	bl	8006240 <dyn_release_object_heap.part.0>
}
 800657a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800657e:	4801      	ldr	r0, [pc, #4]	; (8006584 <chFactoryReleaseMailbox+0x24>)
 8006580:	f7fc babe 	b.w	8002b00 <chMtxUnlock>
 8006584:	20001230 	.word	0x20001230
 8006588:	2000126c 	.word	0x2000126c
 800658c:	00000000 	.word	0x00000000

08006590 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006592:	4c43      	ldr	r4, [pc, #268]	; (80066a0 <oslib_test_009_004_execute+0x110>)
 8006594:	2501      	movs	r5, #1
 8006596:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006598:	f7fe fd2a 	bl	8004ff0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 800659c:	fab0 f080 	clz	r0, r0
 80065a0:	4940      	ldr	r1, [pc, #256]	; (80066a4 <oslib_test_009_004_execute+0x114>)
 80065a2:	0940      	lsrs	r0, r0, #5
 80065a4:	f7fa fb3c 	bl	8000c20 <_test_assert>
 80065a8:	b100      	cbz	r0, 80065ac <oslib_test_009_004_execute+0x1c>
}
 80065aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80065ac:	2302      	movs	r3, #2
 80065ae:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 80065b0:	f7fe fcee 	bl	8004f90 <chFactoryCreateMailbox.constprop.0>
 80065b4:	4606      	mov	r6, r0
    test_assert(dmp != NULL, "cannot create");
 80065b6:	3800      	subs	r0, #0
 80065b8:	bf18      	it	ne
 80065ba:	2001      	movne	r0, #1
 80065bc:	493a      	ldr	r1, [pc, #232]	; (80066a8 <oslib_test_009_004_execute+0x118>)
 80065be:	f7fa fb2f 	bl	8000c20 <_test_assert>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d1f1      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
  test_set_step(3);
 80065c6:	2303      	movs	r3, #3
 80065c8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 80065ca:	f7fe fce1 	bl	8004f90 <chFactoryCreateMailbox.constprop.0>
    test_assert(dmp1 == NULL, "can create");
 80065ce:	fab0 f080 	clz	r0, r0
 80065d2:	4936      	ldr	r1, [pc, #216]	; (80066ac <oslib_test_009_004_execute+0x11c>)
 80065d4:	0940      	lsrs	r0, r0, #5
 80065d6:	f7fa fb23 	bl	8000c20 <_test_assert>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d1e5      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
  test_set_step(4);
 80065de:	2304      	movs	r3, #4
 80065e0:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 80065e2:	f7fe fd05 	bl	8004ff0 <chFactoryFindMailbox.constprop.0>
 80065e6:	4607      	mov	r7, r0
    test_assert(dmp1 != NULL, "not found");
 80065e8:	3800      	subs	r0, #0
 80065ea:	bf18      	it	ne
 80065ec:	2001      	movne	r0, #1
 80065ee:	4930      	ldr	r1, [pc, #192]	; (80066b0 <oslib_test_009_004_execute+0x120>)
 80065f0:	f7fa fb16 	bl	8000c20 <_test_assert>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d1d8      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 80065f8:	1bf0      	subs	r0, r6, r7
 80065fa:	fab0 f080 	clz	r0, r0
 80065fe:	492d      	ldr	r1, [pc, #180]	; (80066b4 <oslib_test_009_004_execute+0x124>)
 8006600:	0940      	lsrs	r0, r0, #5
 8006602:	f7fa fb0d 	bl	8000c20 <_test_assert>
 8006606:	2800      	cmp	r0, #0
 8006608:	d1cf      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4929      	ldr	r1, [pc, #164]	; (80066b4 <oslib_test_009_004_execute+0x124>)
 800660e:	f1a0 0002 	sub.w	r0, r0, #2
 8006612:	fab0 f080 	clz	r0, r0
 8006616:	0940      	lsrs	r0, r0, #5
 8006618:	f7fa fb02 	bl	8000c20 <_test_assert>
 800661c:	2800      	cmp	r0, #0
 800661e:	d1c4      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
 8006620:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8006622:	4924      	ldr	r1, [pc, #144]	; (80066b4 <oslib_test_009_004_execute+0x124>)
 8006624:	442b      	add	r3, r5
 8006626:	4628      	mov	r0, r5
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	f7fa faf9 	bl	8000c20 <_test_assert>
 800662e:	2800      	cmp	r0, #0
 8006630:	d1bb      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	491f      	ldr	r1, [pc, #124]	; (80066b4 <oslib_test_009_004_execute+0x124>)
 8006636:	f1a0 0003 	sub.w	r0, r0, #3
 800663a:	fab0 f080 	clz	r0, r0
 800663e:	0940      	lsrs	r0, r0, #5
 8006640:	f7fa faee 	bl	8000c20 <_test_assert>
 8006644:	2800      	cmp	r0, #0
 8006646:	d1b0      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ff89 	bl	8006560 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4919      	ldr	r1, [pc, #100]	; (80066b8 <oslib_test_009_004_execute+0x128>)
 8006652:	f1a0 0002 	sub.w	r0, r0, #2
 8006656:	fab0 f080 	clz	r0, r0
 800665a:	0940      	lsrs	r0, r0, #5
 800665c:	f7fa fae0 	bl	8000c20 <_test_assert>
 8006660:	2800      	cmp	r0, #0
 8006662:	d1a2      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8006664:	4638      	mov	r0, r7
 8006666:	f7ff ff7b 	bl	8006560 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 800666a:	6870      	ldr	r0, [r6, #4]
 800666c:	4912      	ldr	r1, [pc, #72]	; (80066b8 <oslib_test_009_004_execute+0x128>)
 800666e:	1b40      	subs	r0, r0, r5
 8006670:	fab0 f080 	clz	r0, r0
 8006674:	0940      	lsrs	r0, r0, #5
 8006676:	f7fa fad3 	bl	8000c20 <_test_assert>
 800667a:	2800      	cmp	r0, #0
 800667c:	d195      	bne.n	80065aa <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 800667e:	4630      	mov	r0, r6
  test_set_step(5);
 8006680:	2305      	movs	r3, #5
 8006682:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 8006684:	f7ff ff6c 	bl	8006560 <chFactoryReleaseMailbox>
  test_set_step(6);
 8006688:	2306      	movs	r3, #6
 800668a:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800668c:	f7fe fcb0 	bl	8004ff0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8006690:	fab0 f080 	clz	r0, r0
}
 8006694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 8006698:	4902      	ldr	r1, [pc, #8]	; (80066a4 <oslib_test_009_004_execute+0x114>)
 800669a:	0940      	lsrs	r0, r0, #5
 800669c:	f7fa bac0 	b.w	8000c20 <_test_assert>
 80066a0:	20001cac 	.word	0x20001cac
 80066a4:	0800b2e4 	.word	0x0800b2e4
 80066a8:	0800b2c4 	.word	0x0800b2c4
 80066ac:	0800b2d4 	.word	0x0800b2d4
 80066b0:	0800b2e0 	.word	0x0800b2e0
 80066b4:	0800b2ec 	.word	0x0800b2ec
 80066b8:	0800b308 	.word	0x0800b308
 80066bc:	00000000 	.word	0x00000000

080066c0 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 80066c0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 80066c2:	f7fe fc95 	bl	8004ff0 <chFactoryFindMailbox.constprop.0>
  if (dmp != NULL) {
 80066c6:	b140      	cbz	r0, 80066da <oslib_test_009_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 80066c8:	6843      	ldr	r3, [r0, #4]
 80066ca:	4604      	mov	r4, r0
 80066cc:	b12b      	cbz	r3, 80066da <oslib_test_009_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7ff ff46 	bl	8006560 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f9      	bne.n	80066ce <oslib_test_009_004_teardown+0xe>
}
 80066da:	bd10      	pop	{r4, pc}
 80066dc:	0000      	movs	r0, r0
	...

080066e0 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4604      	mov	r4, r0
  F_LOCK();
 80066e4:	4807      	ldr	r0, [pc, #28]	; (8006704 <chFactoryReleaseBuffer+0x24>)
 80066e6:	f7fe f9a3 	bl	8004a30 <chMtxLock>
  dep->refs--;
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80066f0:	b91b      	cbnz	r3, 80066fa <chFactoryReleaseBuffer+0x1a>
 80066f2:	4905      	ldr	r1, [pc, #20]	; (8006708 <chFactoryReleaseBuffer+0x28>)
 80066f4:	4620      	mov	r0, r4
 80066f6:	f7ff fda3 	bl	8006240 <dyn_release_object_heap.part.0>
}
 80066fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80066fe:	4801      	ldr	r0, [pc, #4]	; (8006704 <chFactoryReleaseBuffer+0x24>)
 8006700:	f7fc b9fe 	b.w	8002b00 <chMtxUnlock>
 8006704:	20001230 	.word	0x20001230
 8006708:	20001254 	.word	0x20001254
 800670c:	00000000 	.word	0x00000000

08006710 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006712:	4c43      	ldr	r4, [pc, #268]	; (8006820 <oslib_test_009_002_execute+0x110>)
 8006714:	2501      	movs	r5, #1
 8006716:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006718:	f7fe fbea 	bl	8004ef0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 800671c:	fab0 f080 	clz	r0, r0
 8006720:	4940      	ldr	r1, [pc, #256]	; (8006824 <oslib_test_009_002_execute+0x114>)
 8006722:	0940      	lsrs	r0, r0, #5
 8006724:	f7fa fa7c 	bl	8000c20 <_test_assert>
 8006728:	b100      	cbz	r0, 800672c <oslib_test_009_002_execute+0x1c>
}
 800672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800672c:	2302      	movs	r3, #2
 800672e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8006730:	f7fe fbbe 	bl	8004eb0 <chFactoryCreateBuffer.constprop.0>
 8006734:	4606      	mov	r6, r0
    test_assert(dbp != NULL, "cannot create");
 8006736:	3800      	subs	r0, #0
 8006738:	bf18      	it	ne
 800673a:	2001      	movne	r0, #1
 800673c:	493a      	ldr	r1, [pc, #232]	; (8006828 <oslib_test_009_002_execute+0x118>)
 800673e:	f7fa fa6f 	bl	8000c20 <_test_assert>
 8006742:	2800      	cmp	r0, #0
 8006744:	d1f1      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
  test_set_step(3);
 8006746:	2303      	movs	r3, #3
 8006748:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800674a:	f7fe fbb1 	bl	8004eb0 <chFactoryCreateBuffer.constprop.0>
    test_assert(dbp1 == NULL, "can create");
 800674e:	fab0 f080 	clz	r0, r0
 8006752:	4936      	ldr	r1, [pc, #216]	; (800682c <oslib_test_009_002_execute+0x11c>)
 8006754:	0940      	lsrs	r0, r0, #5
 8006756:	f7fa fa63 	bl	8000c20 <_test_assert>
 800675a:	2800      	cmp	r0, #0
 800675c:	d1e5      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
  test_set_step(4);
 800675e:	2304      	movs	r3, #4
 8006760:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8006762:	f7fe fbc5 	bl	8004ef0 <chFactoryFindBuffer.constprop.0>
 8006766:	4607      	mov	r7, r0
    test_assert(dbp1 != NULL, "not found");
 8006768:	3800      	subs	r0, #0
 800676a:	bf18      	it	ne
 800676c:	2001      	movne	r0, #1
 800676e:	4930      	ldr	r1, [pc, #192]	; (8006830 <oslib_test_009_002_execute+0x120>)
 8006770:	f7fa fa56 	bl	8000c20 <_test_assert>
 8006774:	2800      	cmp	r0, #0
 8006776:	d1d8      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8006778:	1bf0      	subs	r0, r6, r7
 800677a:	fab0 f080 	clz	r0, r0
 800677e:	492d      	ldr	r1, [pc, #180]	; (8006834 <oslib_test_009_002_execute+0x124>)
 8006780:	0940      	lsrs	r0, r0, #5
 8006782:	f7fa fa4d 	bl	8000c20 <_test_assert>
 8006786:	2800      	cmp	r0, #0
 8006788:	d1cf      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4929      	ldr	r1, [pc, #164]	; (8006834 <oslib_test_009_002_execute+0x124>)
 800678e:	f1a0 0002 	sub.w	r0, r0, #2
 8006792:	fab0 f080 	clz	r0, r0
 8006796:	0940      	lsrs	r0, r0, #5
 8006798:	f7fa fa42 	bl	8000c20 <_test_assert>
 800679c:	2800      	cmp	r0, #0
 800679e:	d1c4      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
 80067a0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 80067a2:	4924      	ldr	r1, [pc, #144]	; (8006834 <oslib_test_009_002_execute+0x124>)
 80067a4:	442b      	add	r3, r5
 80067a6:	4628      	mov	r0, r5
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	f7fa fa39 	bl	8000c20 <_test_assert>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1bb      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	491f      	ldr	r1, [pc, #124]	; (8006834 <oslib_test_009_002_execute+0x124>)
 80067b6:	f1a0 0003 	sub.w	r0, r0, #3
 80067ba:	fab0 f080 	clz	r0, r0
 80067be:	0940      	lsrs	r0, r0, #5
 80067c0:	f7fa fa2e 	bl	8000c20 <_test_assert>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1b0      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7ff ff89 	bl	80066e0 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4919      	ldr	r1, [pc, #100]	; (8006838 <oslib_test_009_002_execute+0x128>)
 80067d2:	f1a0 0002 	sub.w	r0, r0, #2
 80067d6:	fab0 f080 	clz	r0, r0
 80067da:	0940      	lsrs	r0, r0, #5
 80067dc:	f7fa fa20 	bl	8000c20 <_test_assert>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d1a2      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7ff ff7b 	bl	80066e0 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 80067ea:	6870      	ldr	r0, [r6, #4]
 80067ec:	4912      	ldr	r1, [pc, #72]	; (8006838 <oslib_test_009_002_execute+0x128>)
 80067ee:	1b40      	subs	r0, r0, r5
 80067f0:	fab0 f080 	clz	r0, r0
 80067f4:	0940      	lsrs	r0, r0, #5
 80067f6:	f7fa fa13 	bl	8000c20 <_test_assert>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d195      	bne.n	800672a <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 80067fe:	4630      	mov	r0, r6
  test_set_step(5);
 8006800:	2305      	movs	r3, #5
 8006802:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8006804:	f7ff ff6c 	bl	80066e0 <chFactoryReleaseBuffer>
  test_set_step(6);
 8006808:	2306      	movs	r3, #6
 800680a:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800680c:	f7fe fb70 	bl	8004ef0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006810:	fab0 f080 	clz	r0, r0
}
 8006814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8006818:	4902      	ldr	r1, [pc, #8]	; (8006824 <oslib_test_009_002_execute+0x114>)
 800681a:	0940      	lsrs	r0, r0, #5
 800681c:	f7fa ba00 	b.w	8000c20 <_test_assert>
 8006820:	20001cac 	.word	0x20001cac
 8006824:	0800b2e4 	.word	0x0800b2e4
 8006828:	0800b2c4 	.word	0x0800b2c4
 800682c:	0800b2d4 	.word	0x0800b2d4
 8006830:	0800b2e0 	.word	0x0800b2e0
 8006834:	0800b2ec 	.word	0x0800b2ec
 8006838:	0800b308 	.word	0x0800b308
 800683c:	00000000 	.word	0x00000000

08006840 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 8006840:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8006842:	f7fe fb55 	bl	8004ef0 <chFactoryFindBuffer.constprop.0>
  if (dbp != NULL) {
 8006846:	b140      	cbz	r0, 800685a <oslib_test_009_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8006848:	6843      	ldr	r3, [r0, #4]
 800684a:	4604      	mov	r4, r0
 800684c:	b12b      	cbz	r3, 800685a <oslib_test_009_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff ff46 	bl	80066e0 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f9      	bne.n	800684e <oslib_test_009_002_teardown+0xe>
}
 800685a:	bd10      	pop	{r4, pc}
 800685c:	0000      	movs	r0, r0
	...

08006860 <chThdRelease>:
 8006860:	2220      	movs	r2, #32
 8006862:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8006866:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800686a:	3b01      	subs	r3, #1
 800686c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8006870:	6a03      	ldr	r3, [r0, #32]
 8006872:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006876:	2b0f      	cmp	r3, #15
 8006878:	d003      	beq.n	8006882 <chThdRelease+0x22>
 800687a:	2300      	movs	r3, #0
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	4770      	bx	lr
    REG_REMOVE(tp);
 8006882:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 8006886:	b410      	push	{r4}
    REG_REMOVE(tp);
 8006888:	6119      	str	r1, [r3, #16]
 800688a:	6904      	ldr	r4, [r0, #16]
 800688c:	2100      	movs	r1, #0
 800688e:	6163      	str	r3, [r4, #20]
 8006890:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8006894:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d00d      	beq.n	80068bc <chThdRelease+0x5c>
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d001      	beq.n	80068a8 <chThdRelease+0x48>
}
 80068a4:	bc10      	pop	{r4}
 80068a6:	4770      	bx	lr
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80068a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068aa:	69c0      	ldr	r0, [r0, #28]
 80068ac:	f382 8811 	msr	BASEPRI, r2
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	6002      	str	r2, [r0, #0]
  mp->next = php;
 80068b4:	6018      	str	r0, [r3, #0]
 80068b6:	f381 8811 	msr	BASEPRI, r1
 80068ba:	e7f3      	b.n	80068a4 <chThdRelease+0x44>
      chHeapFree(chThdGetWorkingAreaX(tp));
 80068bc:	69c0      	ldr	r0, [r0, #28]
}
 80068be:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 80068c0:	f7ff ba9e 	b.w	8005e00 <chHeapFree>
	...

080068d0 <rt_test_011_006_execute>:
static void rt_test_011_006_execute(void) {
 80068d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80068d4:	4b17      	ldr	r3, [pc, #92]	; (8006934 <rt_test_011_006_execute+0x64>)
  test_set_step(1);
 80068d6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8006944 <rt_test_011_006_execute+0x74>
  return chThdGetSelfX()->prio;
 80068da:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80068dc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8006948 <rt_test_011_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 80068e0:	689e      	ldr	r6, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80068e2:	4f15      	ldr	r7, [pc, #84]	; (8006938 <rt_test_011_006_execute+0x68>)
  test_set_step(1);
 80068e4:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 80068e6:	441e      	add	r6, r3
  test_set_step(1);
 80068e8:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80068ec:	f7fd fce8 	bl	80042c0 <test_wait_tick>
    n = 0;
 80068f0:	2400      	movs	r4, #0
    start = test_wait_tick();
 80068f2:	4605      	mov	r5, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80068f4:	2300      	movs	r3, #0
 80068f6:	4642      	mov	r2, r8
 80068f8:	4631      	mov	r1, r6
 80068fa:	4638      	mov	r0, r7
 80068fc:	f7fc fb18 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8006900:	f7ff ffae 	bl	8006860 <chThdRelease>
 8006904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006908:	f242 720f 	movw	r2, #9999	; 0x270f
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	1b5b      	subs	r3, r3, r5
 8006910:	4293      	cmp	r3, r2
      n++;
 8006912:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006916:	d9ed      	bls.n	80068f4 <rt_test_011_006_execute+0x24>
  test_set_step(2);
 8006918:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800691a:	4808      	ldr	r0, [pc, #32]	; (800693c <rt_test_011_006_execute+0x6c>)
  test_set_step(2);
 800691c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8006920:	f7fa fae6 	bl	8000ef0 <test_print>
    test_printn(n);
 8006924:	4620      	mov	r0, r4
 8006926:	f7fa fa13 	bl	8000d50 <test_printn>
}
 800692a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 800692e:	4804      	ldr	r0, [pc, #16]	; (8006940 <rt_test_011_006_execute+0x70>)
 8006930:	f7fa babe 	b.w	8000eb0 <test_println>
 8006934:	200009b0 	.word	0x200009b0
 8006938:	20001598 	.word	0x20001598
 800693c:	0800b0f0 	.word	0x0800b0f0
 8006940:	0800b450 	.word	0x0800b450
 8006944:	20001cac 	.word	0x20001cac
 8006948:	08009381 	.word	0x08009381
 800694c:	00000000 	.word	0x00000000

08006950 <cmd_threads>:
  if (argc > 0) {
 8006950:	2900      	cmp	r1, #0
 8006952:	dc4e      	bgt.n	80069f2 <cmd_threads+0xa2>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8006958:	4928      	ldr	r1, [pc, #160]	; (80069fc <cmd_threads+0xac>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800695a:	b089      	sub	sp, #36	; 0x24
 800695c:	4605      	mov	r5, r0
 800695e:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8006960:	f7fb fbde 	bl	8002120 <chprintf>
 8006964:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8006968:	4f25      	ldr	r7, [pc, #148]	; (8006a00 <cmd_threads+0xb0>)
 800696a:	693c      	ldr	r4, [r7, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 800696c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006970:	3301      	adds	r3, #1
 8006972:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8006976:	2300      	movs	r3, #0
 8006978:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
 800697c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8006a0c <cmd_threads+0xbc>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8006980:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006a10 <cmd_threads+0xc0>
 8006984:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006a14 <cmd_threads+0xc4>
 8006988:	9607      	str	r6, [sp, #28]
 800698a:	e00a      	b.n	80069a2 <cmd_threads+0x52>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 800698c:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 8006990:	3301      	adds	r3, #1
 8006992:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 8006996:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800699a:	4620      	mov	r0, r4
 800699c:	f7ff ff60 	bl	8006860 <chThdRelease>
 80069a0:	465c      	mov	r4, fp
    uint32_t stklimit = (uint32_t)tp->wabase;
 80069a2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 80069a6:	f894 c020 	ldrb.w	ip, [r4, #32]
 80069aa:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80069ae:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 80069b2:	68a6      	ldr	r6, [r4, #8]
 80069b4:	68e3      	ldr	r3, [r4, #12]
 80069b6:	9602      	str	r6, [sp, #8]
 80069b8:	2900      	cmp	r1, #0
 80069ba:	bf08      	it	eq
 80069bc:	4649      	moveq	r1, r9
 80069be:	3801      	subs	r0, #1
 80069c0:	e9cd c103 	strd	ip, r1, [sp, #12]
 80069c4:	9001      	str	r0, [sp, #4]
 80069c6:	9400      	str	r4, [sp, #0]
 80069c8:	4641      	mov	r1, r8
 80069ca:	4628      	mov	r0, r5
 80069cc:	f7fb fba8 	bl	8002120 <chprintf>
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	f383 8811 	msr	BASEPRI, r3
  ntp = tp->newer;
 80069d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 80069da:	45bb      	cmp	fp, r7
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	d1d4      	bne.n	800698c <cmd_threads+0x3c>
 80069e2:	f382 8811 	msr	BASEPRI, r2
  chThdRelease(tp);
 80069e6:	4620      	mov	r0, r4
}
 80069e8:	b009      	add	sp, #36	; 0x24
 80069ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ee:	f7ff bf37 	b.w	8006860 <chThdRelease>
    shellUsage(chp, "threads");
 80069f2:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <cmd_threads+0xb4>)
 80069f4:	4904      	ldr	r1, [pc, #16]	; (8006a08 <cmd_threads+0xb8>)
 80069f6:	f7fb bb93 	b.w	8002120 <chprintf>
 80069fa:	bf00      	nop
 80069fc:	0800b45c 	.word	0x0800b45c
 8006a00:	200009b0 	.word	0x200009b0
 8006a04:	0800be10 	.word	0x0800be10
 8006a08:	0800ad94 	.word	0x0800ad94
 8006a0c:	0800c9f8 	.word	0x0800c9f8
 8006a10:	0800b820 	.word	0x0800b820
 8006a14:	0800b49c 	.word	0x0800b49c
	...

08006a20 <chSemWaitS.part.0>:
msg_t chSemWaitS(semaphore_t *sp) {
 8006a20:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8006a22:	4c07      	ldr	r4, [pc, #28]	; (8006a40 <chSemWaitS.part.0+0x20>)
 8006a24:	69a2      	ldr	r2, [r4, #24]
 8006a26:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8006a28:	6841      	ldr	r1, [r0, #4]
msg_t chSemWaitS(semaphore_t *sp) {
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8006a30:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 8006a32:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	f7fc fb33 	bl	80030a0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8006a3a:	69a3      	ldr	r3, [r4, #24]
}
 8006a3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	200009b0 	.word	0x200009b0
	...

08006a50 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	2320      	movs	r3, #32
 8006a56:	b082      	sub	sp, #8
 8006a58:	4604      	mov	r4, r0
 8006a5a:	f383 8811 	msr	BASEPRI, r3
  objp = hash_get_s(ocp, group, key);
 8006a5e:	4d3a      	ldr	r5, [pc, #232]	; (8006b48 <chCacheGetObject.constprop.0+0xf8>)
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 8006a60:	e9d5 3100 	ldrd	r3, r1, [r5]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4003      	ands	r3, r0
 8006a68:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  objp = hhp->hash_next;
 8006a6c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
  while (objp != (oc_object_t *)hhp) {
 8006a70:	428a      	cmp	r2, r1
 8006a72:	d103      	bne.n	8006a7c <chCacheGetObject.constprop.0+0x2c>
 8006a74:	e01c      	b.n	8006ab0 <chCacheGetObject.constprop.0+0x60>
    objp = objp->hash_next;
 8006a76:	6809      	ldr	r1, [r1, #0]
  while (objp != (oc_object_t *)hhp) {
 8006a78:	428a      	cmp	r2, r1
 8006a7a:	d019      	beq.n	8006ab0 <chCacheGetObject.constprop.0+0x60>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 8006a7c:	694b      	ldr	r3, [r1, #20]
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d1f9      	bne.n	8006a76 <chCacheGetObject.constprop.0+0x26>
 8006a82:	690b      	ldr	r3, [r1, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f6      	bne.n	8006a76 <chCacheGetObject.constprop.0+0x26>
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8006a88:	6a0b      	ldr	r3, [r1, #32]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dd39      	ble.n	8006b02 <chCacheGetObject.constprop.0+0xb2>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8006a8e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LRU_REMOVE(objp);
 8006a90:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
  sp->cnt--;
 8006a94:	3b01      	subs	r3, #1
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8006a96:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 8006a9a:	60a0      	str	r0, [r4, #8]
 8006a9c:	60c4      	str	r4, [r0, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8006a9e:	e9c1 3208 	strd	r3, r2, [r1, #32]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f383 8811 	msr	BASEPRI, r3
}
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	b002      	add	sp, #8
 8006aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab0:	4f26      	ldr	r7, [pc, #152]	; (8006b4c <chCacheGetObject.constprop.0+0xfc>)
 8006ab2:	2600      	movs	r6, #0
    (void) ocp->writef(ocp, objp, true);
 8006ab4:	f1a7 0830 	sub.w	r8, r7, #48	; 0x30
 8006ab8:	e01a      	b.n	8006af0 <chCacheGetObject.constprop.0+0xa0>
    objp = ocp->lru.lru_prev;
 8006aba:	6a29      	ldr	r1, [r5, #32]
    LRU_REMOVE(objp);
 8006abc:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8006ac0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8006ac2:	6a0b      	ldr	r3, [r1, #32]
    LRU_REMOVE(objp);
 8006ac4:	f8cc 0008 	str.w	r0, [ip, #8]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	f8c0 c00c 	str.w	ip, [r0, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8006ace:	f022 0001 	bic.w	r0, r2, #1
 8006ad2:	e9c1 3008 	strd	r3, r0, [r1, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8006ad6:	06d0      	lsls	r0, r2, #27
 8006ad8:	d51c      	bpl.n	8006b14 <chCacheGetObject.constprop.0+0xc4>
 8006ada:	f386 8811 	msr	BASEPRI, r6
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 8006ade:	2322      	movs	r3, #34	; 0x22
 8006ae0:	624b      	str	r3, [r1, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4798      	blx	r3
 8006aea:	2320      	movs	r3, #32
 8006aec:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8006af0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006af2:	3b01      	subs	r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	63ab      	str	r3, [r5, #56]	; 0x38
 8006af8:	dadf      	bge.n	8006aba <chCacheGetObject.constprop.0+0x6a>
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ff90 	bl	8006a20 <chSemWaitS.part.0>
 8006b00:	e7db      	b.n	8006aba <chCacheGetObject.constprop.0+0x6a>
 8006b02:	3b01      	subs	r3, #1
 8006b04:	620b      	str	r3, [r1, #32]
 8006b06:	f101 0018 	add.w	r0, r1, #24
 8006b0a:	9101      	str	r1, [sp, #4]
 8006b0c:	f7ff ff88 	bl	8006a20 <chSemWaitS.part.0>
 8006b10:	9901      	ldr	r1, [sp, #4]
 8006b12:	e7c6      	b.n	8006aa2 <chCacheGetObject.constprop.0+0x52>
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8006b14:	0793      	lsls	r3, r2, #30
 8006b16:	d504      	bpl.n	8006b22 <chCacheGetObject.constprop.0+0xd2>
        HASH_REMOVE(objp);
 8006b18:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	680a      	ldr	r2, [r1, #0]
 8006b20:	6053      	str	r3, [r2, #4]
    HASH_INSERT(ocp, objp, group, key);
 8006b22:	e9d5 3200 	ldrd	r3, r2, [r5]
 8006b26:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 8006b28:	614c      	str	r4, [r1, #20]
    HASH_INSERT(ocp, objp, group, key);
 8006b2a:	401c      	ands	r4, r3
 8006b2c:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 8006b30:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 8006b34:	6048      	str	r0, [r1, #4]
    objp->obj_group = group;
 8006b36:	2500      	movs	r5, #0
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8006b38:	200a      	movs	r0, #10
    HASH_INSERT(ocp, objp, group, key);
 8006b3a:	600b      	str	r3, [r1, #0]
    objp->obj_group = group;
 8006b3c:	610d      	str	r5, [r1, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8006b3e:	6248      	str	r0, [r1, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 8006b40:	6059      	str	r1, [r3, #4]
 8006b42:	f842 1034 	str.w	r1, [r2, r4, lsl #3]
 8006b46:	e7ac      	b.n	8006aa2 <chCacheGetObject.constprop.0+0x52>
 8006b48:	2000096c 	.word	0x2000096c
 8006b4c:	2000099c 	.word	0x2000099c

08006b50 <oslib_test_006_001_execute>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8006b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tqp->next = (thread_t *)tqp;
 8006b54:	4ecc      	ldr	r6, [pc, #816]	; (8006e88 <oslib_test_006_001_execute+0x338>)
  ocp->objvp            = objvp;
 8006b56:	49cd      	ldr	r1, [pc, #820]	; (8006e8c <oslib_test_006_001_execute+0x33c>)
 8006b58:	6131      	str	r1, [r6, #16]
  ocp->hashn            = hashn;
 8006b5a:	2108      	movs	r1, #8
 8006b5c:	6031      	str	r1, [r6, #0]
 8006b5e:	f106 0130 	add.w	r1, r6, #48	; 0x30
  sp->cnt = n;
 8006b62:	2001      	movs	r0, #1
  tqp->prev = (thread_t *)tqp;
 8006b64:	e9c6 110c 	strd	r1, r1, [r6, #48]	; 0x30
  ocp->lru.hash_next    = NULL;
 8006b68:	2100      	movs	r1, #0
  ocp->hashp            = hashp;
 8006b6a:	4ac9      	ldr	r2, [pc, #804]	; (8006e90 <oslib_test_006_001_execute+0x340>)
 8006b6c:	62f0      	str	r0, [r6, #44]	; 0x2c
  ocp->lru.hash_prev    = NULL;
 8006b6e:	e9c6 1105 	strd	r1, r1, [r6, #20]
  tqp->next = (thread_t *)tqp;
 8006b72:	f106 0024 	add.w	r0, r6, #36	; 0x24
  ocp->writef           = writef;
 8006b76:	4bc7      	ldr	r3, [pc, #796]	; (8006e94 <oslib_test_006_001_execute+0x344>)
  ocp->readf            = readf;
 8006b78:	4cc7      	ldr	r4, [pc, #796]	; (8006e98 <oslib_test_006_001_execute+0x348>)
  ocp->writef           = writef;
 8006b7a:	6433      	str	r3, [r6, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 8006b7c:	e9c6 0009 	strd	r0, r0, [r6, #36]	; 0x24
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8006b80:	f106 0714 	add.w	r7, r6, #20
 8006b84:	2004      	movs	r0, #4
 8006b86:	4613      	mov	r3, r2
  ocp->hashp            = hashp;
 8006b88:	6072      	str	r2, [r6, #4]
  ocp->readf            = readf;
 8006b8a:	63f4      	str	r4, [r6, #60]	; 0x3c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8006b8c:	6237      	str	r7, [r6, #32]
 8006b8e:	3240      	adds	r2, #64	; 0x40
 8006b90:	63b0      	str	r0, [r6, #56]	; 0x38
  ocp->objn             = objn;
 8006b92:	60b0      	str	r0, [r6, #8]
    hashp->hash_prev = (oc_object_t *)hashp;
 8006b94:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8006b98:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d1fa      	bne.n	8006b94 <oslib_test_006_001_execute+0x44>
 8006b9e:	4bbb      	ldr	r3, [pc, #748]	; (8006e8c <oslib_test_006_001_execute+0x33c>)
 8006ba0:	49be      	ldr	r1, [pc, #760]	; (8006e9c <oslib_test_006_001_execute+0x34c>)
 8006ba2:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8006ba6:	2501      	movs	r5, #1
    objp->obj_group = 0U;
 8006ba8:	2200      	movs	r2, #0
 8006baa:	e000      	b.n	8006bae <oslib_test_006_001_execute+0x5e>
  } while (objn > (ucnt_t)0);
 8006bac:	4603      	mov	r3, r0
    objvp = (void *)((uint8_t *)objvp + objsz);
 8006bae:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006bb2:	f103 0418 	add.w	r4, r3, #24
  } while (objn > (ucnt_t)0);
 8006bb6:	4560      	cmp	r0, ip
    LRU_INSERT_HEAD(ocp, objp);
 8006bb8:	e9c3 1702 	strd	r1, r7, [r3, #8]
 8006bbc:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8006bc0:	621d      	str	r5, [r3, #32]
 8006bc2:	60cb      	str	r3, [r1, #12]
    objp->obj_key   = 0U;
 8006bc4:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 8006bc8:	e9c3 5209 	strd	r5, r2, [r3, #36]	; 0x24
 8006bcc:	4619      	mov	r1, r3
  } while (objn > (ucnt_t)0);
 8006bce:	d1ed      	bne.n	8006bac <oslib_test_006_001_execute+0x5c>
 8006bd0:	4bb3      	ldr	r3, [pc, #716]	; (8006ea0 <oslib_test_006_001_execute+0x350>)
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8006bd2:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8006ec0 <oslib_test_006_001_execute+0x370>
 8006bd6:	61f3      	str	r3, [r6, #28]
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006bd8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006eac <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8006bdc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8006ec4 <oslib_test_006_001_execute+0x374>
  chCacheReleaseObjectI(ocp, objp);
 8006be0:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8006e88 <oslib_test_006_001_execute+0x338>
  test_set_step(2);
 8006be4:	2302      	movs	r3, #2
 8006be6:	f8cb 3000 	str.w	r3, [fp]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8006bea:	2700      	movs	r7, #0
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff ff2f 	bl	8006a50 <chCacheGetObject.constprop.0>
 8006bf2:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006bf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006bfc:	f7fa f810 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8006c00:	4641      	mov	r1, r8
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f040 813d 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8006c08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c0a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006c0e:	f7fa f807 	bl	8000c20 <_test_assert>
 8006c12:	2320      	movs	r3, #32
 8006c14:	4605      	mov	r5, r0
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f040 8133 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	4621      	mov	r1, r4
 8006c22:	4650      	mov	r0, sl
 8006c24:	f7fa fd1c 	bl	8001660 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8006c28:	f7fb fe82 	bl	8002930 <chSchRescheduleS>
 8006c2c:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8006c30:	3701      	adds	r7, #1
 8006c32:	2f08      	cmp	r7, #8
 8006c34:	d1da      	bne.n	8006bec <oslib_test_006_001_execute+0x9c>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8006c36:	499b      	ldr	r1, [pc, #620]	; (8006ea4 <oslib_test_006_001_execute+0x354>)
 8006c38:	489b      	ldr	r0, [pc, #620]	; (8006ea8 <oslib_test_006_001_execute+0x358>)
 8006c3a:	f7fa f971 	bl	8000f20 <_test_assert_sequence>
 8006c3e:	4605      	mov	r5, r0
 8006c40:	2800      	cmp	r0, #0
 8006c42:	f040 811e 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 8006c46:	2303      	movs	r3, #3
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006c48:	4f98      	ldr	r7, [pc, #608]	; (8006eac <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006c4a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8006ebc <oslib_test_006_001_execute+0x36c>
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 8006c4e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8006e88 <oslib_test_006_001_execute+0x338>
  test_set_step(3);
 8006c52:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7ff fefa 	bl	8006a50 <chCacheGetObject.constprop.0>
 8006c5c:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006c5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006c60:	4639      	mov	r1, r7
 8006c62:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006c66:	f7f9 ffdb 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006c6a:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f040 8108 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006c72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006c78:	f7f9 ffd2 	bl	8000c20 <_test_assert>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4640      	mov	r0, r8
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	f040 80fd 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8006c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8006c8a:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8006c8e:	f043 0308 	orr.w	r3, r3, #8
 8006c92:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8006c94:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, false);

      test_assert(error == false, "returned error");
 8006c96:	f080 0001 	eor.w	r0, r0, #1
 8006c9a:	4985      	ldr	r1, [pc, #532]	; (8006eb0 <oslib_test_006_001_execute+0x360>)
 8006c9c:	b2c0      	uxtb	r0, r0
 8006c9e:	f7f9 ffbf 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006ca2:	4639      	mov	r1, r7
      test_assert(error == false, "returned error");
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f040 80ec 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006caa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006cac:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006cb0:	f7f9 ffb6 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006cb4:	497f      	ldr	r1, [pc, #508]	; (8006eb4 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f040 80e3 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006cbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006cbe:	f080 0008 	eor.w	r0, r0, #8
 8006cc2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006cc6:	f7f9 ffab 	bl	8000c20 <_test_assert>
 8006cca:	2320      	movs	r3, #32
 8006ccc:	4682      	mov	sl, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f040 80d7 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
 8006cd4:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4640      	mov	r0, r8
 8006cdc:	f7fa fcc0 	bl	8001660 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8006ce0:	f7fb fe26 	bl	8002930 <chSchRescheduleS>
 8006ce4:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8006ce8:	3501      	adds	r5, #1
 8006cea:	2d08      	cmp	r5, #8
 8006cec:	d1b3      	bne.n	8006c56 <oslib_test_006_001_execute+0x106>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8006cee:	496d      	ldr	r1, [pc, #436]	; (8006ea4 <oslib_test_006_001_execute+0x354>)
 8006cf0:	4871      	ldr	r0, [pc, #452]	; (8006eb8 <oslib_test_006_001_execute+0x368>)
 8006cf2:	f7fa f915 	bl	8000f20 <_test_assert_sequence>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f040 80c2 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 8006cfe:	2304      	movs	r3, #4
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006d00:	4f6a      	ldr	r7, [pc, #424]	; (8006eac <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006d02:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8006ebc <oslib_test_006_001_execute+0x36c>
 8006d06:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8006e88 <oslib_test_006_001_execute+0x338>
  test_set_step(4);
 8006d0a:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7ff fe9e 	bl	8006a50 <chCacheGetObject.constprop.0>
 8006d14:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006d16:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006d18:	4639      	mov	r1, r7
 8006d1a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006d1e:	f7f9 ff7f 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006d22:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006d24:	2800      	cmp	r0, #0
 8006d26:	f040 80ac 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d2c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006d30:	f7f9 ff76 	bl	8000c20 <_test_assert>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2201      	movs	r2, #1
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 80a0 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8006d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8006d44:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8006d48:	f043 0308 	orr.w	r3, r3, #8
 8006d4c:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8006d4e:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, true);

      test_assert(error == false, "returned error");
 8006d50:	f080 0001 	eor.w	r0, r0, #1
 8006d54:	4956      	ldr	r1, [pc, #344]	; (8006eb0 <oslib_test_006_001_execute+0x360>)
 8006d56:	b2c0      	uxtb	r0, r0
 8006d58:	f7f9 ff62 	bl	8000c20 <_test_assert>
 8006d5c:	4603      	mov	r3, r0

      objp = chCacheGetObject(&cache1, 0U, i);
 8006d5e:	4628      	mov	r0, r5
      test_assert(error == false, "returned error");
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 808e 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      objp = chCacheGetObject(&cache1, 0U, i);
 8006d66:	f7ff fe73 	bl	8006a50 <chCacheGetObject.constprop.0>
 8006d6a:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006d6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006d74:	f7f9 ff54 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006d78:	494e      	ldr	r1, [pc, #312]	; (8006eb4 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f040 8081 	bne.w	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006d80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d82:	f080 0008 	eor.w	r0, r0, #8
 8006d86:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006d8a:	f7f9 ff49 	bl	8000c20 <_test_assert>
 8006d8e:	2320      	movs	r3, #32
 8006d90:	4682      	mov	sl, r0
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d175      	bne.n	8006e82 <oslib_test_006_001_execute+0x332>
 8006d96:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	f7fa fc5f 	bl	8001660 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8006da2:	f7fb fdc5 	bl	8002930 <chSchRescheduleS>
 8006da6:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8006daa:	3501      	adds	r5, #1
 8006dac:	2d08      	cmp	r5, #8
 8006dae:	d1ae      	bne.n	8006d0e <oslib_test_006_001_execute+0x1be>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8006db0:	493c      	ldr	r1, [pc, #240]	; (8006ea4 <oslib_test_006_001_execute+0x354>)
 8006db2:	4841      	ldr	r0, [pc, #260]	; (8006eb8 <oslib_test_006_001_execute+0x368>)
 8006db4:	f7fa f8b4 	bl	8000f20 <_test_assert_sequence>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d162      	bne.n	8006e82 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 8006dbc:	2305      	movs	r3, #5
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006dbe:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8006eac <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006dc2:	4f3c      	ldr	r7, [pc, #240]	; (8006eb4 <oslib_test_006_001_execute+0x364>)
  chCacheReleaseObjectI(ocp, objp);
 8006dc4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006e88 <oslib_test_006_001_execute+0x338>
  test_set_step(5);
 8006dc8:	f8cb 3000 	str.w	r3, [fp]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8006dcc:	2604      	movs	r6, #4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff fe3e 	bl	8006a50 <chCacheGetObject.constprop.0>
 8006dd4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006dd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006dd8:	4641      	mov	r1, r8
 8006dda:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006dde:	f7f9 ff1f 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006de2:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d14c      	bne.n	8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8006de8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dea:	f080 0008 	eor.w	r0, r0, #8
 8006dee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006df2:	f7f9 ff15 	bl	8000c20 <_test_assert>
 8006df6:	2320      	movs	r3, #32
 8006df8:	4605      	mov	r5, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d141      	bne.n	8006e82 <oslib_test_006_001_execute+0x332>
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	4621      	mov	r1, r4
 8006e04:	4648      	mov	r0, r9
 8006e06:	f7fa fc2b 	bl	8001660 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8006e0a:	f7fb fd91 	bl	8002930 <chSchRescheduleS>
 8006e0e:	f385 8811 	msr	BASEPRI, r5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8006e12:	3601      	adds	r6, #1
 8006e14:	2e08      	cmp	r6, #8
 8006e16:	d1da      	bne.n	8006dce <oslib_test_006_001_execute+0x27e>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8006e18:	4922      	ldr	r1, [pc, #136]	; (8006ea4 <oslib_test_006_001_execute+0x354>)
 8006e1a:	4823      	ldr	r0, [pc, #140]	; (8006ea8 <oslib_test_006_001_execute+0x358>)
 8006e1c:	f7fa f880 	bl	8000f20 <_test_assert_sequence>
 8006e20:	4604      	mov	r4, r0
 8006e22:	bb70      	cbnz	r0, 8006e82 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 8006e24:	2306      	movs	r3, #6
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006e26:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006eac <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006e2a:	4f24      	ldr	r7, [pc, #144]	; (8006ebc <oslib_test_006_001_execute+0x36c>)
  chCacheReleaseObjectI(ocp, objp);
 8006e2c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006e88 <oslib_test_006_001_execute+0x338>
  test_set_step(6);
 8006e30:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fe0b 	bl	8006a50 <chCacheGetObject.constprop.0>
 8006e3a:	4605      	mov	r5, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006e3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006e3e:	4641      	mov	r1, r8
 8006e40:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006e44:	f7f9 feec 	bl	8000c20 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006e48:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8006e4a:	b9d0      	cbnz	r0, 8006e82 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8006e4c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e4e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8006e52:	f7f9 fee5 	bl	8000c20 <_test_assert>
 8006e56:	2320      	movs	r3, #32
 8006e58:	4606      	mov	r6, r0
 8006e5a:	b990      	cbnz	r0, 8006e82 <oslib_test_006_001_execute+0x332>
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	4629      	mov	r1, r5
 8006e62:	4648      	mov	r0, r9
 8006e64:	f7fa fbfc 	bl	8001660 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8006e68:	f7fb fd62 	bl	8002930 <chSchRescheduleS>
 8006e6c:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < NUM_OBJECTS; i++) {
 8006e70:	3401      	adds	r4, #1
 8006e72:	2c04      	cmp	r4, #4
 8006e74:	d1de      	bne.n	8006e34 <oslib_test_006_001_execute+0x2e4>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8006e76:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 8006e7a:	490a      	ldr	r1, [pc, #40]	; (8006ea4 <oslib_test_006_001_execute+0x354>)
 8006e7c:	480a      	ldr	r0, [pc, #40]	; (8006ea8 <oslib_test_006_001_execute+0x358>)
 8006e7e:	f7fa b84f 	b.w	8000f20 <_test_assert_sequence>
}
 8006e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	bf00      	nop
 8006e88:	2000096c 	.word	0x2000096c
 8006e8c:	20001478 	.word	0x20001478
 8006e90:	20001378 	.word	0x20001378
 8006e94:	08000da1 	.word	0x08000da1
 8006e98:	08002a11 	.word	0x08002a11
 8006e9c:	20000980 	.word	0x20000980
 8006ea0:	2000152c 	.word	0x2000152c
 8006ea4:	0800b4e8 	.word	0x0800b4e8
 8006ea8:	0800b820 	.word	0x0800b820
 8006eac:	0800b4c4 	.word	0x0800b4c4
 8006eb0:	0800b4fc 	.word	0x0800b4fc
 8006eb4:	0800b50c 	.word	0x0800b50c
 8006eb8:	0800b518 	.word	0x0800b518
 8006ebc:	0800b510 	.word	0x0800b510
 8006ec0:	20001cac 	.word	0x20001cac
 8006ec4:	0800b4d0 	.word	0x0800b4d0
	...

08006ed0 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 8006ed0:	b508      	push	{r3, lr}
 8006ed2:	2320      	movs	r3, #32
 8006ed4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8006ed8:	6883      	ldr	r3, [r0, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	6083      	str	r3, [r0, #8]
 8006ee0:	db04      	blt.n	8006eec <chSemWait+0x1c>
  return MSG_OK;
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f383 8811 	msr	BASEPRI, r3
}
 8006eea:	bd08      	pop	{r3, pc}
 8006eec:	f7ff fd98 	bl	8006a20 <chSemWaitS.part.0>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	bd08      	pop	{r3, pc}
	...

08006f00 <rt_test_011_010_execute>:
static void rt_test_011_010_execute(void) {
 8006f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006f04:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8006f88 <rt_test_011_010_execute+0x88>
      chSemWait(&sem1);
 8006f08:	4c1c      	ldr	r4, [pc, #112]	; (8006f7c <rt_test_011_010_execute+0x7c>)
  test_set_step(1);
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8006f10:	f7fd f9d6 	bl	80042c0 <test_wait_tick>
    n = 0;
 8006f14:	2500      	movs	r5, #0
    start = test_wait_tick();
 8006f16:	4606      	mov	r6, r0
 8006f18:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006f1c:	f242 770f 	movw	r7, #9999	; 0x270f
      chSemWait(&sem1);
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7ff ffd5 	bl	8006ed0 <chSemWait>
      chSemSignal(&sem1);
 8006f26:	4620      	mov	r0, r4
 8006f28:	f7fc f88a 	bl	8003040 <chSemSignal>
      chSemWait(&sem1);
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7ff ffcf 	bl	8006ed0 <chSemWait>
      chSemSignal(&sem1);
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7fc f884 	bl	8003040 <chSemSignal>
      chSemWait(&sem1);
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff ffc9 	bl	8006ed0 <chSemWait>
      chSemSignal(&sem1);
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7fc f87e 	bl	8003040 <chSemSignal>
      chSemWait(&sem1);
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7ff ffc3 	bl	8006ed0 <chSemWait>
      chSemSignal(&sem1);
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7fc f878 	bl	8003040 <chSemSignal>
 8006f50:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006f54:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8006f56:	42bb      	cmp	r3, r7
      n++;
 8006f58:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006f5c:	d9e0      	bls.n	8006f20 <rt_test_011_010_execute+0x20>
  test_set_step(2);
 8006f5e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006f60:	4807      	ldr	r0, [pc, #28]	; (8006f80 <rt_test_011_010_execute+0x80>)
  test_set_step(2);
 8006f62:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8006f66:	f7f9 ffc3 	bl	8000ef0 <test_print>
    test_printn(n * 4);
 8006f6a:	00a8      	lsls	r0, r5, #2
 8006f6c:	f7f9 fef0 	bl	8000d50 <test_printn>
}
 8006f70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 8006f74:	4803      	ldr	r0, [pc, #12]	; (8006f84 <rt_test_011_010_execute+0x84>)
 8006f76:	f7f9 bf9b 	b.w	8000eb0 <test_println>
 8006f7a:	bf00      	nop
 8006f7c:	20001584 	.word	0x20001584
 8006f80:	0800b0f0 	.word	0x0800b0f0
 8006f84:	0800b524 	.word	0x0800b524
 8006f88:	20001cac 	.word	0x20001cac
 8006f8c:	00000000 	.word	0x00000000

08006f90 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8006f90:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8006f92:	4c08      	ldr	r4, [pc, #32]	; (8006fb4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8006f94:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8006f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f9a:	075a      	lsls	r2, r3, #29
 8006f9c:	d408      	bmi.n	8006fb0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 8006f9e:	4d06      	ldr	r5, [pc, #24]	; (8006fb8 <bmk_thread7+0x28>)
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f7ff ff95 	bl	8006ed0 <chSemWait>
 8006fa6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8006fa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006fac:	075b      	lsls	r3, r3, #29
 8006fae:	d5f7      	bpl.n	8006fa0 <bmk_thread7+0x10>
}
 8006fb0:	bd38      	pop	{r3, r4, r5, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200009b0 	.word	0x200009b0
 8006fb8:	20001584 	.word	0x20001584
 8006fbc:	00000000 	.word	0x00000000

08006fc0 <rt_test_006_006_execute>:

static void rt_test_006_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_006_execute(void) {
 8006fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8006fc4:	4e61      	ldr	r6, [pc, #388]	; (800714c <rt_test_006_006_execute+0x18c>)
static void rt_test_006_006_execute(void) {
 8006fc6:	b084      	sub	sp, #16
  test_set_step(1);
 8006fc8:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 8006fca:	ad01      	add	r5, sp, #4
  sp->cnt = n;
 8006fcc:	f04f 0800 	mov.w	r8, #0
  tqp->prev = (thread_t *)tqp;
 8006fd0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8006fd4:	6033      	str	r3, [r6, #0]
 8006fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fda:	2720      	movs	r7, #32
 8006fdc:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8006fe0:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8006fe2:	495b      	ldr	r1, [pc, #364]	; (8007150 <rt_test_006_006_execute+0x190>)
 8006fe4:	4540      	cmp	r0, r8
 8006fe6:	bfcc      	ite	gt
 8006fe8:	2000      	movgt	r0, #0
 8006fea:	2001      	movle	r0, #1
 8006fec:	f7f9 fe18 	bl	8000c20 <_test_assert>
 8006ff0:	b120      	cbz	r0, 8006ffc <rt_test_006_006_execute+0x3c>
 8006ff2:	f388 8811 	msr	BASEPRI, r8
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
}
 8006ff6:	b004      	add	sp, #16
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8007002:	2302      	movs	r3, #2
  chSemResetWithMessage(sp, n, MSG_RESET);
 8007004:	4601      	mov	r1, r0
 8007006:	4628      	mov	r0, r5
 8007008:	6033      	str	r3, [r6, #0]
 800700a:	f7fb fca1 	bl	8002950 <chSemResetWithMessage.constprop.0>
 800700e:	f387 8811 	msr	BASEPRI, r7
 8007012:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8007014:	494e      	ldr	r1, [pc, #312]	; (8007150 <rt_test_006_006_execute+0x190>)
 8007016:	2800      	cmp	r0, #0
 8007018:	bfcc      	ite	gt
 800701a:	2000      	movgt	r0, #0
 800701c:	2001      	movle	r0, #1
 800701e:	f7f9 fdff 	bl	8000c20 <_test_assert>
 8007022:	4680      	mov	r8, r0
 8007024:	2800      	cmp	r0, #0
 8007026:	d172      	bne.n	800710e <rt_test_006_006_execute+0x14e>
 8007028:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 800702c:	4b49      	ldr	r3, [pc, #292]	; (8007154 <rt_test_006_006_execute+0x194>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800702e:	4a4a      	ldr	r2, [pc, #296]	; (8007158 <rt_test_006_006_execute+0x198>)
  return chThdGetSelfX()->prio;
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	484a      	ldr	r0, [pc, #296]	; (800715c <rt_test_006_006_execute+0x19c>)
 8007034:	6899      	ldr	r1, [r3, #8]
  test_set_step(3);
 8007036:	2403      	movs	r4, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8007038:	462b      	mov	r3, r5
 800703a:	3901      	subs	r1, #1
  test_set_step(3);
 800703c:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800703e:	f7fb ff77 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007042:	4a47      	ldr	r2, [pc, #284]	; (8007160 <rt_test_006_006_execute+0x1a0>)
 8007044:	4601      	mov	r1, r0
  test_set_step(4);
 8007046:	2304      	movs	r3, #4
  return chSemWait(&bsp->sem);
 8007048:	4628      	mov	r0, r5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800704a:	6011      	str	r1, [r2, #0]
  test_set_step(4);
 800704c:	6033      	str	r3, [r6, #0]
 800704e:	f7ff ff3f 	bl	8006ed0 <chSemWait>
 8007052:	4604      	mov	r4, r0
 8007054:	f387 8811 	msr	BASEPRI, r7
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8007058:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800705a:	493d      	ldr	r1, [pc, #244]	; (8007150 <rt_test_006_006_execute+0x190>)
 800705c:	2800      	cmp	r0, #0
 800705e:	bfcc      	ite	gt
 8007060:	2000      	movgt	r0, #0
 8007062:	2001      	movle	r0, #1
 8007064:	f7f9 fddc 	bl	8000c20 <_test_assert>
 8007068:	2800      	cmp	r0, #0
 800706a:	d1c2      	bne.n	8006ff2 <rt_test_006_006_execute+0x32>
 800706c:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8007070:	fab4 f084 	clz	r0, r4
 8007074:	493b      	ldr	r1, [pc, #236]	; (8007164 <rt_test_006_006_execute+0x1a4>)
 8007076:	0940      	lsrs	r0, r0, #5
 8007078:	f7f9 fdd2 	bl	8000c20 <_test_assert>
 800707c:	2800      	cmp	r0, #0
 800707e:	d1ba      	bne.n	8006ff6 <rt_test_006_006_execute+0x36>
  test_set_step(5);
 8007080:	2305      	movs	r3, #5
 8007082:	6033      	str	r3, [r6, #0]
 8007084:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd44      	ble.n	8007118 <rt_test_006_006_execute+0x158>
  chSchRescheduleS();
 800708e:	f7fb fc4f 	bl	8002930 <chSchRescheduleS>
 8007092:	f04f 0800 	mov.w	r8, #0
 8007096:	f388 8811 	msr	BASEPRI, r8
 800709a:	2720      	movs	r7, #32
 800709c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 80070a0:	9803      	ldr	r0, [sp, #12]
 80070a2:	4931      	ldr	r1, [pc, #196]	; (8007168 <rt_test_006_006_execute+0x1a8>)
 80070a4:	4540      	cmp	r0, r8
 80070a6:	bfd4      	ite	le
 80070a8:	2000      	movle	r0, #0
 80070aa:	2001      	movgt	r0, #1
 80070ac:	f7f9 fdb8 	bl	8000c20 <_test_assert>
 80070b0:	4604      	mov	r4, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d19d      	bne.n	8006ff2 <rt_test_006_006_execute+0x32>
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80070be:	9803      	ldr	r0, [sp, #12]
 80070c0:	492a      	ldr	r1, [pc, #168]	; (800716c <rt_test_006_006_execute+0x1ac>)
 80070c2:	f1a0 0001 	sub.w	r0, r0, #1
 80070c6:	fab0 f080 	clz	r0, r0
 80070ca:	0940      	lsrs	r0, r0, #5
 80070cc:	f7f9 fda8 	bl	8000c20 <_test_assert>
 80070d0:	b9e8      	cbnz	r0, 800710e <rt_test_006_006_execute+0x14e>
 80070d2:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80070d6:	2306      	movs	r3, #6
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dd2f      	ble.n	8007144 <rt_test_006_006_execute+0x184>
  chSchRescheduleS();
 80070e4:	f7fb fc24 	bl	8002930 <chSchRescheduleS>
 80070e8:	2500      	movs	r5, #0
 80070ea:	f385 8811 	msr	BASEPRI, r5
 80070ee:	2620      	movs	r6, #32
 80070f0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80070f4:	9803      	ldr	r0, [sp, #12]
 80070f6:	491e      	ldr	r1, [pc, #120]	; (8007170 <rt_test_006_006_execute+0x1b0>)
 80070f8:	42a8      	cmp	r0, r5
 80070fa:	bfd4      	ite	le
 80070fc:	2000      	movle	r0, #0
 80070fe:	2001      	movgt	r0, #1
 8007100:	f7f9 fd8e 	bl	8000c20 <_test_assert>
 8007104:	4604      	mov	r4, r0
 8007106:	b158      	cbz	r0, 8007120 <rt_test_006_006_execute+0x160>
 8007108:	f385 8811 	msr	BASEPRI, r5
 800710c:	e773      	b.n	8006ff6 <rt_test_006_006_execute+0x36>
 800710e:	f384 8811 	msr	BASEPRI, r4
}
 8007112:	b004      	add	sp, #16
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSemSignalI(&bsp->sem);
 8007118:	4628      	mov	r0, r5
 800711a:	f7fa fa91 	bl	8001640 <chSemSignalI>
 800711e:	e7b6      	b.n	800708e <rt_test_006_006_execute+0xce>
 8007120:	f380 8811 	msr	BASEPRI, r0
 8007124:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8007128:	9803      	ldr	r0, [sp, #12]
 800712a:	4910      	ldr	r1, [pc, #64]	; (800716c <rt_test_006_006_execute+0x1ac>)
 800712c:	f1a0 0001 	sub.w	r0, r0, #1
 8007130:	fab0 f080 	clz	r0, r0
 8007134:	0940      	lsrs	r0, r0, #5
 8007136:	f7f9 fd73 	bl	8000c20 <_test_assert>
 800713a:	2800      	cmp	r0, #0
 800713c:	d1e7      	bne.n	800710e <rt_test_006_006_execute+0x14e>
 800713e:	f380 8811 	msr	BASEPRI, r0
  test_end_step(6);
 8007142:	e758      	b.n	8006ff6 <rt_test_006_006_execute+0x36>
 8007144:	4628      	mov	r0, r5
 8007146:	f7fa fa7b 	bl	8001640 <chSemSignalI>
 800714a:	e7cb      	b.n	80070e4 <rt_test_006_006_execute+0x124>
 800714c:	20001cac 	.word	0x20001cac
 8007150:	0800b534 	.word	0x0800b534
 8007154:	200009b0 	.word	0x200009b0
 8007158:	08002a51 	.word	0x08002a51
 800715c:	20001598 	.word	0x20001598
 8007160:	20001cc4 	.word	0x20001cc4
 8007164:	0800b540 	.word	0x0800b540
 8007168:	0800b554 	.word	0x0800b554
 800716c:	0800b560 	.word	0x0800b560
 8007170:	0800b538 	.word	0x0800b538
	...

08007180 <thread3>:
static THD_FUNCTION(thread3, p) {
 8007180:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8007182:	4c04      	ldr	r4, [pc, #16]	; (8007194 <thread3+0x14>)
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff fea3 	bl	8006ed0 <chSemWait>
  chSemSignal(&sem1);
 800718a:	4620      	mov	r0, r4
}
 800718c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8007190:	f7fb bf56 	b.w	8003040 <chSemSignal>
 8007194:	20001578 	.word	0x20001578
	...

080071a0 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 80071a4:	4803      	ldr	r0, [pc, #12]	; (80071b4 <thread1.lto_priv.1+0x14>)
 80071a6:	f7ff fe93 	bl	8006ed0 <chSemWait>
  test_emit_token(*(char *)p);
 80071aa:	7820      	ldrb	r0, [r4, #0]
}
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80071b0:	f7f9 bdde 	b.w	8000d70 <test_emit_token>
 80071b4:	20001578 	.word	0x20001578
	...

080071c0 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 80071c4:	4c2a      	ldr	r4, [pc, #168]	; (8007270 <rt_test_006_001_execute+0xb0>)
  test_set_step(1);
 80071c6:	4f2b      	ldr	r7, [pc, #172]	; (8007274 <rt_test_006_001_execute+0xb4>)
 80071c8:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 80071ca:	4620      	mov	r0, r4
  test_set_step(1);
 80071cc:	603b      	str	r3, [r7, #0]
    msg = chSemWait(&sem1);
 80071ce:	f7ff fe7f 	bl	8006ed0 <chSemWait>
 80071d2:	2620      	movs	r6, #32
 80071d4:	4605      	mov	r5, r0
 80071d6:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 80071da:	68a0      	ldr	r0, [r4, #8]
 80071dc:	4926      	ldr	r1, [pc, #152]	; (8007278 <rt_test_006_001_execute+0xb8>)
 80071de:	fab0 f080 	clz	r0, r0
 80071e2:	0940      	lsrs	r0, r0, #5
 80071e4:	f7f9 fd1c 	bl	8000c20 <_test_assert>
 80071e8:	b120      	cbz	r0, 80071f4 <rt_test_006_001_execute+0x34>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f383 8811 	msr	BASEPRI, r3
}
 80071f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 80071f8:	fab5 f085 	clz	r0, r5
 80071fc:	491f      	ldr	r1, [pc, #124]	; (800727c <rt_test_006_001_execute+0xbc>)
 80071fe:	0940      	lsrs	r0, r0, #5
 8007200:	f7f9 fd0e 	bl	8000c20 <_test_assert>
 8007204:	4605      	mov	r5, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	d1f2      	bne.n	80071f0 <rt_test_006_001_execute+0x30>
  test_set_step(2);
 800720a:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 800720e:	4620      	mov	r0, r4
  test_set_step(2);
 8007210:	f8c7 9000 	str.w	r9, [r7]
    chSemSignal(&sem1);
 8007214:	f7fb ff14 	bl	8003040 <chSemSignal>
 8007218:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 800721c:	68a0      	ldr	r0, [r4, #8]
 800721e:	4916      	ldr	r1, [pc, #88]	; (8007278 <rt_test_006_001_execute+0xb8>)
 8007220:	f1a0 0001 	sub.w	r0, r0, #1
 8007224:	fab0 f080 	clz	r0, r0
 8007228:	0940      	lsrs	r0, r0, #5
 800722a:	f7f9 fcf9 	bl	8000c20 <_test_assert>
 800722e:	4680      	mov	r8, r0
 8007230:	b118      	cbz	r0, 800723a <rt_test_006_001_execute+0x7a>
 8007232:	f385 8811 	msr	BASEPRI, r5
}
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800723e:	2303      	movs	r3, #3
 8007240:	4649      	mov	r1, r9
 8007242:	4620      	mov	r0, r4
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	f7fb fb83 	bl	8002950 <chSemResetWithMessage.constprop.0>
 800724a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800724e:	68a0      	ldr	r0, [r4, #8]
 8007250:	4909      	ldr	r1, [pc, #36]	; (8007278 <rt_test_006_001_execute+0xb8>)
 8007252:	f1a0 0002 	sub.w	r0, r0, #2
 8007256:	fab0 f080 	clz	r0, r0
 800725a:	0940      	lsrs	r0, r0, #5
 800725c:	f7f9 fce0 	bl	8000c20 <_test_assert>
 8007260:	b910      	cbnz	r0, 8007268 <rt_test_006_001_execute+0xa8>
 8007262:	f380 8811 	msr	BASEPRI, r0
  test_end_step(3);
 8007266:	e7c3      	b.n	80071f0 <rt_test_006_001_execute+0x30>
 8007268:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800726c:	e7c0      	b.n	80071f0 <rt_test_006_001_execute+0x30>
 800726e:	bf00      	nop
 8007270:	20001578 	.word	0x20001578
 8007274:	20001cac 	.word	0x20001cac
 8007278:	0800b574 	.word	0x0800b574
 800727c:	0800b588 	.word	0x0800b588

08007280 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4604      	mov	r4, r0
 8007284:	2320      	movs	r3, #32
 8007286:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800728a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800728e:	2b0f      	cmp	r3, #15
 8007290:	d007      	beq.n	80072a2 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8007294:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007296:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8007298:	2009      	movs	r0, #9
 800729a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800729c:	62a3      	str	r3, [r4, #40]	; 0x28
 800729e:	f7fb feff 	bl	80030a0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 80072a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072a4:	2300      	movs	r3, #0
 80072a6:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff fad8 	bl	8006860 <chThdRelease>
}
 80072b0:	4628      	mov	r0, r5
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	200009b0 	.word	0x200009b0
	...

080072c0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80072c0:	4bb9      	ldr	r3, [pc, #740]	; (80075a8 <main+0x2e8>)
  PWR->CR |= PWR_CR_DBP;
 80072c2:	48ba      	ldr	r0, [pc, #744]	; (80075ac <main+0x2ec>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	ea6f 5242 	mvn.w	r2, r2, lsl #21
 80072ca:	ea6f 5252 	mvn.w	r2, r2, lsr #21
  chSysInit();

//  palSetLineMode(LINE_ARD_D0, PAL_MODE_INPUT);

      palSetLine(LINE_LED_GREEN);
      chThdSleepMilliseconds(2000);
 80072ce:	b580      	push	{r7, lr}
 80072d0:	611a      	str	r2, [r3, #16]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80072d8:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80072da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80072de:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	615c      	str	r4, [r3, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	6959      	ldr	r1, [r3, #20]
 80072e8:	615a      	str	r2, [r3, #20]
 80072ea:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80072ec:	6a19      	ldr	r1, [r3, #32]
 80072ee:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 80072f2:	6219      	str	r1, [r3, #32]
 80072f4:	6a19      	ldr	r1, [r3, #32]
 80072f6:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80072fa:	6219      	str	r1, [r3, #32]
 80072fc:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 80072fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007300:	625c      	str	r4, [r3, #36]	; 0x24
 8007302:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007304:	625a      	str	r2, [r3, #36]	; 0x24
 8007306:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8007308:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800730a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800730e:	6419      	str	r1, [r3, #64]	; 0x40
 8007310:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007312:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007316:	6619      	str	r1, [r3, #96]	; 0x60
 8007318:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800731a:	6801      	ldr	r1, [r0, #0]
 800731c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007320:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8007322:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007324:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8007328:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800732c:	b088      	sub	sp, #32
 800732e:	d003      	beq.n	8007338 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8007330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007334:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8007336:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8007338:	4c9c      	ldr	r4, [pc, #624]	; (80075ac <main+0x2ec>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800733a:	4a9d      	ldr	r2, [pc, #628]	; (80075b0 <main+0x2f0>)
 800733c:	6860      	ldr	r0, [r4, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 800733e:	4d9d      	ldr	r5, [pc, #628]	; (80075b4 <main+0x2f4>)
 8007340:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 8007600 <main+0x340>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8007344:	4998      	ldr	r1, [pc, #608]	; (80075a8 <main+0x2e8>)
 8007346:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007348:	2740      	movs	r7, #64	; 0x40
 800734a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800734e:	6060      	str	r0, [r4, #4]
 8007350:	2680      	movs	r6, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007352:	f882 3306 	strb.w	r3, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007356:	f44f 7080 	mov.w	r0, #256	; 0x100
 800735a:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800735e:	6017      	str	r7, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007360:	f44f 7700 	mov.w	r7, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007364:	f882 3307 	strb.w	r3, [r2, #775]	; 0x307
 8007368:	462c      	mov	r4, r5
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800736a:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800736e:	6016      	str	r6, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007370:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007374:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007378:	6010      	str	r0, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800737a:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800737e:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007382:	6017      	str	r7, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007384:	f44f 6780 	mov.w	r7, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007388:	f882 330a 	strb.w	r3, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800738c:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007390:	6017      	str	r7, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007392:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007396:	f882 3317 	strb.w	r3, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800739a:	f8c2 7180 	str.w	r7, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800739e:	6017      	str	r7, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80073a0:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073a4:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073a8:	6050      	str	r0, [r2, #4]
 80073aa:	f844 cb04 	str.w	ip, [r4], #4
  esp->next = (event_listener_t *)esp;
 80073ae:	606c      	str	r4, [r5, #4]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80073b0:	f105 0454 	add.w	r4, r5, #84	; 0x54
  iqp->q_counter = 0;
 80073b4:	2300      	movs	r3, #0
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80073b6:	2701      	movs	r7, #1
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80073b8:	f105 0064 	add.w	r0, r5, #100	; 0x64
  iqp->q_wrptr   = bp;
 80073bc:	e9c5 4408 	strd	r4, r4, [r5, #32]
  tqp->next = (thread_t *)tqp;
 80073c0:	f105 0c0c 	add.w	ip, r5, #12
  iqp->q_buffer  = bp;
 80073c4:	61ac      	str	r4, [r5, #24]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80073c6:	2410      	movs	r4, #16
  tqp->prev = (thread_t *)tqp;
 80073c8:	e9c5 cc03 	strd	ip, ip, [r5, #12]
 80073cc:	722f      	strb	r7, [r5, #8]
  iqp->q_counter = 0;
 80073ce:	616b      	str	r3, [r5, #20]
  iqp->q_top     = bp + size;
 80073d0:	61e8      	str	r0, [r5, #28]
  oqp->q_counter = size;
 80073d2:	63ac      	str	r4, [r5, #56]	; 0x38
 80073d4:	6c0c      	ldr	r4, [r1, #64]	; 0x40
  oqp->q_buffer  = bp;
 80073d6:	63e8      	str	r0, [r5, #60]	; 0x3c
 80073d8:	433c      	orrs	r4, r7
 80073da:	640c      	str	r4, [r1, #64]	; 0x40
 80073dc:	6e0c      	ldr	r4, [r1, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80073de:	f8df c224 	ldr.w	ip, [pc, #548]	; 8007604 <main+0x344>
  oqp->q_rdptr   = bp;
 80073e2:	64a8      	str	r0, [r5, #72]	; 0x48
  ST_ENABLE_CLOCK();
 80073e4:	433c      	orrs	r4, r7
 80073e6:	660c      	str	r4, [r1, #96]	; 0x60
 80073e8:	6e09      	ldr	r1, [r1, #96]	; 0x60
  ST_ENABLE_STOP();
 80073ea:	f8dc 1008 	ldr.w	r1, [ip, #8]
  oqp->q_wrptr   = bp;
 80073ee:	6468      	str	r0, [r5, #68]	; 0x44
 80073f0:	4339      	orrs	r1, r7
  iqp->q_link    = link;
 80073f2:	e9c5 350a 	strd	r3, r5, [r5, #40]	; 0x28
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80073f6:	652d      	str	r5, [r5, #80]	; 0x50
 80073f8:	f8cc 1008 	str.w	r1, [ip, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80073fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  tqp->next = (thread_t *)tqp;
 8007400:	4c6d      	ldr	r4, [pc, #436]	; (80075b8 <main+0x2f8>)
 8007402:	f242 3027 	movw	r0, #8999	; 0x2327
 8007406:	6288      	str	r0, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8007408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800740c:	62c8      	str	r0, [r1, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 800740e:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCMR1  = 0;
 8007410:	618b      	str	r3, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8007412:	634b      	str	r3, [r1, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8007414:	60cb      	str	r3, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 8007416:	604b      	str	r3, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007418:	614f      	str	r7, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800741a:	600f      	str	r7, [r1, #0]
  oqp->q_notify  = onfy;
 800741c:	4967      	ldr	r1, [pc, #412]	; (80075bc <main+0x2fc>)
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 800741e:	4f68      	ldr	r7, [pc, #416]	; (80075c0 <main+0x300>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007420:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  oqp->q_top     = bp + size;
 8007424:	f105 0c74 	add.w	ip, r5, #116	; 0x74
  oqp->q_notify  = onfy;
 8007428:	64e9      	str	r1, [r5, #76]	; 0x4c
 800742a:	676f      	str	r7, [r5, #116]	; 0x74
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800742c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  tqp->next = (thread_t *)tqp;
 8007430:	f105 0130 	add.w	r1, r5, #48	; 0x30
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8007434:	4f63      	ldr	r7, [pc, #396]	; (80075c4 <main+0x304>)
  oqp->q_top     = bp + size;
 8007436:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
 800743a:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
 800743e:	6329      	str	r1, [r5, #48]	; 0x30
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007440:	6016      	str	r6, [r2, #0]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8007442:	f104 0638 	add.w	r6, r4, #56	; 0x38
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007446:	f104 021c 	add.w	r2, r4, #28
 800744a:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 800744c:	6369      	str	r1, [r5, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 800744e:	60a3      	str	r3, [r4, #8]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8007450:	e9c4 4404 	strd	r4, r4, [r4, #16]
 8007454:	e9c4 760c 	strd	r7, r6, [r4, #48]	; 0x30
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8007458:	e9c4 2207 	strd	r2, r2, [r4, #28]
  ch.vtlist.delta = (sysinterval_t)-1;
 800745c:	6260      	str	r0, [r4, #36]	; 0x24
  ch.vtlist.lasttime = (systime_t)0;
 800745e:	62a3      	str	r3, [r4, #40]	; 0x28
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8007460:	1cda      	adds	r2, r3, #3
 8007462:	eb04 1202 	add.w	r2, r4, r2, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8007466:	3301      	adds	r3, #1
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8007468:	7a11      	ldrb	r1, [r2, #8]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 800746a:	2b80      	cmp	r3, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 800746c:	f36f 0102 	bfc	r1, #0, #3
 8007470:	7211      	strb	r1, [r2, #8]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8007472:	d1f5      	bne.n	8007460 <main+0x1a0>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007474:	4954      	ldr	r1, [pc, #336]	; (80075c8 <main+0x308>)
  tqp->next = (thread_t *)tqp;
 8007476:	4b55      	ldr	r3, [pc, #340]	; (80075cc <main+0x30c>)
 8007478:	4a55      	ldr	r2, [pc, #340]	; (80075d0 <main+0x310>)
 800747a:	600a      	str	r2, [r1, #0]
 800747c:	f101 020c 	add.w	r2, r1, #12
  tqp->prev = (thread_t *)tqp;
 8007480:	e9c1 2203 	strd	r2, r2, [r1, #12]
  dlp->next = (dyn_element_t *)dlp;
 8007484:	f103 0210 	add.w	r2, r3, #16
 8007488:	611a      	str	r2, [r3, #16]
  mp->object_size = size;
 800748a:	2214      	movs	r2, #20
 800748c:	619a      	str	r2, [r3, #24]
 800748e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8007492:	625a      	str	r2, [r3, #36]	; 0x24
 8007494:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007498:	629a      	str	r2, [r3, #40]	; 0x28
 800749a:	221c      	movs	r2, #28
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
 800749e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80074a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80074a4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
 80074aa:	f103 0244 	add.w	r2, r3, #68	; 0x44
  tmp->cumulative = (rttime_t)0;
 80074ae:	2600      	movs	r6, #0
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
 80074b2:	2700      	movs	r7, #0
  H_NEXT(&default_heap.header) = NULL;
 80074b4:	2200      	movs	r2, #0
  ch_memcore.basemem = __heap_base__;
 80074b6:	4847      	ldr	r0, [pc, #284]	; (80075d4 <main+0x314>)
 80074b8:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 80074ba:	615a      	str	r2, [r3, #20]
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80074be:	e9cd 6706 	strd	r6, r7, [sp, #24]
  H_PAGES(&default_heap.header) = 0;
 80074c2:	e9c1 2201 	strd	r2, r2, [r1, #4]
  mp->align = align;
 80074c6:	2604      	movs	r6, #4
  tmp->last       = (rtcnt_t)0;
 80074c8:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80074cc:	614a      	str	r2, [r1, #20]
  ch.tm.offset = (rtcnt_t)0;
 80074ce:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
  tmp->n          = (ucnt_t)0;
 80074d2:	9205      	str	r2, [sp, #20]
  mp->provider = provider;
 80074d4:	4a40      	ldr	r2, [pc, #256]	; (80075d8 <main+0x318>)
 80074d6:	621a      	str	r2, [r3, #32]
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
 80074da:	e9c3 3300 	strd	r3, r3, [r3]
  mp->align = align;
 80074de:	61de      	str	r6, [r3, #28]
 80074e0:	635e      	str	r6, [r3, #52]	; 0x34
 80074e2:	4b3e      	ldr	r3, [pc, #248]	; (80075dc <main+0x31c>)
  ch_memcore.topmem  = __heap_end__;
 80074e4:	4a3e      	ldr	r2, [pc, #248]	; (80075e0 <main+0x320>)
  ch_memcore.basemem = __heap_base__;
 80074e6:	6003      	str	r3, [r0, #0]
  tmp->best       = (rtcnt_t)-1;
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ch_memcore.topmem  = __heap_end__;
 80074ec:	6042      	str	r2, [r0, #4]
 80074ee:	9302      	str	r3, [sp, #8]
    chTMStartMeasurementX(&tm);
 80074f0:	a802      	add	r0, sp, #8
 80074f2:	f7f9 ff05 	bl	8001300 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80074f6:	a802      	add	r0, sp, #8
 80074f8:	f7f9 feda 	bl	80012b0 <chTMStopMeasurementX>
  } while (i > 0U);
 80074fc:	3e01      	subs	r6, #1
 80074fe:	d1f7      	bne.n	80074f0 <main+0x230>
  REG_INSERT(tp);
 8007500:	6962      	ldr	r2, [r4, #20]
 8007502:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <main+0x324>)
  ch.tm.offset = tm.best;
 8007504:	9902      	ldr	r1, [sp, #8]
 8007506:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
  tp->prio      = prio;
 800750a:	2780      	movs	r7, #128	; 0x80
  tp->refs      = (trefs_t)1;
 800750c:	2101      	movs	r1, #1
  tp->name      = name;
 800750e:	4836      	ldr	r0, [pc, #216]	; (80075e8 <main+0x328>)
  REG_INSERT(tp);
 8007510:	f8c4 284c 	str.w	r2, [r4, #2124]	; 0x84c
  tp->name      = name;
 8007514:	f8c4 0850 	str.w	r0, [r4, #2128]	; 0x850
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007518:	f884 6859 	strb.w	r6, [r4, #2137]	; 0x859
  tp->mtxlist   = NULL;
 800751c:	f8c4 6870 	str.w	r6, [r4, #2160]	; 0x870
  tp->epending  = (eventmask_t)0;
 8007520:	f8c4 686c 	str.w	r6, [r4, #2156]	; 0x86c
  REG_INSERT(tp);
 8007524:	f8c4 4848 	str.w	r4, [r4, #2120]	; 0x848
  tp->prio      = prio;
 8007528:	f8c4 7840 	str.w	r7, [r4, #2112]	; 0x840
  tp->realprio  = prio;
 800752c:	f8c4 7874 	str.w	r7, [r4, #2164]	; 0x874
  tp->refs      = (trefs_t)1;
 8007530:	f884 185a 	strb.w	r1, [r4, #2138]	; 0x85a
  tlp->next = (thread_t *)tlp;
 8007534:	f103 0028 	add.w	r0, r3, #40	; 0x28
  REG_INSERT(tp);
 8007538:	6113      	str	r3, [r2, #16]
  tqp->next = (thread_t *)tqp;
 800753a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800753e:	e9c4 3305 	strd	r3, r3, [r4, #20]
  currp->state = CH_STATE_CURRENT;
 8007542:	f884 1858 	strb.w	r1, [r4, #2136]	; 0x858
  currp->wabase = NULL;
 8007546:	f8c4 6854 	str.w	r6, [r4, #2132]	; 0x854
  tlp->next = (thread_t *)tlp;
 800754a:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
  tqp->next = (thread_t *)tqp;
 800754e:	f8c4 2864 	str.w	r2, [r4, #2148]	; 0x864
  tqp->prev = (thread_t *)tqp;
 8007552:	f8c4 2868 	str.w	r2, [r4, #2152]	; 0x868
 8007556:	2420      	movs	r4, #32
 8007558:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800755c:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <main+0x32c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8007560:	4a23      	ldr	r2, [pc, #140]	; (80075f0 <main+0x330>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007562:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007564:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8007568:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800756a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 800756e:	430a      	orrs	r2, r1
 8007570:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007578:	491e      	ldr	r1, [pc, #120]	; (80075f4 <main+0x334>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800757a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800757e:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007580:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007582:	2010      	movs	r0, #16
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	600a      	str	r2, [r1, #0]
 800758a:	77d8      	strb	r0, [r3, #31]
 800758c:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007590:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 8007594:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 8007596:	4818      	ldr	r0, [pc, #96]	; (80075f8 <main+0x338>)
 8007598:	f7fb fd72 	bl	8003080 <chThdCreate>
 800759c:	4b17      	ldr	r3, [pc, #92]	; (80075fc <main+0x33c>)
 800759e:	601b      	str	r3, [r3, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80075a0:	f384 8811 	msr	BASEPRI, r4
 80075a4:	e030      	b.n	8007608 <main+0x348>
 80075a6:	bf00      	nop
 80075a8:	40023800 	.word	0x40023800
 80075ac:	40007000 	.word	0x40007000
 80075b0:	e000e100 	.word	0xe000e100
 80075b4:	200008e0 	.word	0x200008e0
 80075b8:	200009b0 	.word	0x200009b0
 80075bc:	080098f1 	.word	0x080098f1
 80075c0:	40004800 	.word	0x40004800
 80075c4:	0080ffff 	.word	0x0080ffff
 80075c8:	20001358 	.word	0x20001358
 80075cc:	20001230 	.word	0x20001230
 80075d0:	080007a1 	.word	0x080007a1
 80075d4:	20001350 	.word	0x20001350
 80075d8:	08000ff1 	.word	0x08000ff1
 80075dc:	200024f0 	.word	0x200024f0
 80075e0:	20060000 	.word	0x20060000
 80075e4:	200011e8 	.word	0x200011e8
 80075e8:	0800c29c 	.word	0x0800c29c
 80075ec:	e000ed00 	.word	0xe000ed00
 80075f0:	05fa0300 	.word	0x05fa0300
 80075f4:	e0001000 	.word	0xe0001000
 80075f8:	0800c2c8 	.word	0x0800c2c8
 80075fc:	20001590 	.word	0x20001590
 8007600:	0800ca38 	.word	0x0800ca38
 8007604:	e0042000 	.word	0xe0042000
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007608:	7a2b      	ldrb	r3, [r5, #8]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d110      	bne.n	8007630 <main+0x370>
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(true);
 800760e:	4b2b      	ldr	r3, [pc, #172]	; (80076bc <main+0x3fc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007610:	4a2b      	ldr	r2, [pc, #172]	; (80076c0 <main+0x400>)
 8007612:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007614:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8007618:	6419      	str	r1, [r3, #64]	; 0x40
 800761a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800761c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8007620:	6619      	str	r1, [r3, #96]	; 0x60
 8007622:	21c0      	movs	r1, #192	; 0xc0
 8007624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007626:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800762a:	f8c2 7184 	str.w	r7, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800762e:	6057      	str	r7, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8007630:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <main+0x404>)
 8007634:	429a      	cmp	r2, r3
 8007636:	d03d      	beq.n	80076b4 <main+0x3f4>
 8007638:	4823      	ldr	r0, [pc, #140]	; (80076c8 <main+0x408>)
    fck = STM32_PCLK2 / config->speed;
 800763a:	f240 4393 	movw	r3, #1171	; 0x493
 800763e:	f640 1127 	movw	r1, #2343	; 0x927
 8007642:	4282      	cmp	r2, r0
 8007644:	bf08      	it	eq
 8007646:	460b      	moveq	r3, r1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007648:	2640      	movs	r6, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800764a:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800764c:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8007650:	2400      	movs	r4, #0
  u->BRR = fck;
 8007652:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007654:	6116      	str	r6, [r2, #16]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8007656:	2302      	movs	r3, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007658:	6151      	str	r1, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800765a:	60d0      	str	r0, [r2, #12]
    sdp->rxmask = 0xFF;
 800765c:	21ff      	movs	r1, #255	; 0xff
  u->SR = 0;
 800765e:	6014      	str	r4, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8007660:	6810      	ldr	r0, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8007662:	6852      	ldr	r2, [r2, #4]
    sdp->rxmask = 0xFF;
 8007664:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
 8007668:	722b      	strb	r3, [r5, #8]
 800766a:	f384 8811 	msr	BASEPRI, r4

        /* Checking the button status. */
        if (palReadLine(LINE_ARD_D0) == PAL_HIGH) {
          /* Button is pressed: turning the LED on. */
          palSetLine(LINE_LED_GREEN);
        }
 800766e:	4a17      	ldr	r2, [pc, #92]	; (80076cc <main+0x40c>)
 8007670:	4817      	ldr	r0, [pc, #92]	; (80076d0 <main+0x410>)
 8007672:	4e18      	ldr	r6, [pc, #96]	; (80076d4 <main+0x414>)
 8007674:	4d18      	ldr	r5, [pc, #96]	; (80076d8 <main+0x418>)
 8007676:	4623      	mov	r3, r4
 8007678:	218a      	movs	r1, #138	; 0x8a
 800767a:	f7fb fc59 	bl	8002f30 <chThdCreateStatic.constprop.0>
        else {
          /* Button is released: turning the LED off. */
 800767e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007682:	f7fc fc8d 	bl	8003fa0 <chThdSleep>
          palClearLine(LINE_LED_GREEN);
 8007686:	4623      	mov	r3, r4
 8007688:	4a14      	ldr	r2, [pc, #80]	; (80076dc <main+0x41c>)
 800768a:	4815      	ldr	r0, [pc, #84]	; (80076e0 <main+0x420>)
        chThdSleepMilliseconds(500);
      }
}
 800768c:	4c15      	ldr	r4, [pc, #84]	; (80076e4 <main+0x424>)
          palClearLine(LINE_LED_GREEN);
 800768e:	218a      	movs	r1, #138	; 0x8a
 8007690:	f7fb fc4e 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007694:	2381      	movs	r3, #129	; 0x81
 8007696:	4622      	mov	r2, r4
 8007698:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800769c:	e9cd 5600 	strd	r5, r6, [sp]
 80076a0:	2000      	movs	r0, #0
 80076a2:	f7fd fa7d 	bl	8004ba0 <chThdCreateFromHeap>
 80076a6:	f7ff fdeb 	bl	8007280 <chThdWait>
 80076aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80076ae:	f7fc fc77 	bl	8003fa0 <chThdSleep>
 80076b2:	e7ef      	b.n	8007694 <main+0x3d4>
    fck = STM32_PCLK2 / config->speed;
 80076b4:	f640 1327 	movw	r3, #2343	; 0x927
 80076b8:	e7c6      	b.n	8007648 <main+0x388>
 80076ba:	bf00      	nop
 80076bc:	40023800 	.word	0x40023800
 80076c0:	e000e100 	.word	0xe000e100
 80076c4:	40011000 	.word	0x40011000
 80076c8:	40011400 	.word	0x40011400
 80076cc:	08003fc1 	.word	0x08003fc1
 80076d0:	20002260 	.word	0x20002260
 80076d4:	0800c9b0 	.word	0x0800c9b0
 80076d8:	08009091 	.word	0x08009091
 80076dc:	08004011 	.word	0x08004011
 80076e0:	200023a8 	.word	0x200023a8
 80076e4:	0800b5a0 	.word	0x0800b5a0
	...

080076f0 <oslib_test_005_001_execute>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 80076f0:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 80076f2:	4a4d      	ldr	r2, [pc, #308]	; (8007828 <oslib_test_005_001_execute+0x138>)
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
  {
    thread_descriptor_t td = {
 80076f4:	4b4d      	ldr	r3, [pc, #308]	; (800782c <oslib_test_005_001_execute+0x13c>)
  return chThdGetSelfX()->prio;
 80076f6:	6992      	ldr	r2, [r2, #24]
 80076f8:	494d      	ldr	r1, [pc, #308]	; (8007830 <oslib_test_005_001_execute+0x140>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 80076fa:	6892      	ldr	r2, [r2, #8]
  test_set_step(1);
 80076fc:	4c4d      	ldr	r4, [pc, #308]	; (8007834 <oslib_test_005_001_execute+0x144>)
    thread_descriptor_t td = {
 80076fe:	4d4e      	ldr	r5, [pc, #312]	; (8007838 <oslib_test_005_001_execute+0x148>)
static void oslib_test_005_001_execute(void) {
 8007700:	b08a      	sub	sp, #40	; 0x28
      .prio  = chThdGetPriorityX() + 1,
 8007702:	3201      	adds	r2, #1
    thread_descriptor_t td = {
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	9207      	str	r2, [sp, #28]
 8007708:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800770c:	2200      	movs	r2, #0
  test_set_step(1);
 800770e:	2601      	movs	r6, #1
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 8007710:	a804      	add	r0, sp, #16
    thread_descriptor_t td = {
 8007712:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8007716:	9306      	str	r3, [sp, #24]
 8007718:	9504      	str	r5, [sp, #16]
  test_set_step(1);
 800771a:	6026      	str	r6, [r4, #0]
    tp = chThdCreate(&td);
 800771c:	f7fb fcb0 	bl	8003080 <chThdCreate>
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8007720:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8007722:	4946      	ldr	r1, [pc, #280]	; (800783c <oslib_test_005_001_execute+0x14c>)
 8007724:	4a46      	ldr	r2, [pc, #280]	; (8007840 <oslib_test_005_001_execute+0x150>)
 8007726:	6023      	str	r3, [r4, #0]
    tp = chThdCreate(&td);
 8007728:	4605      	mov	r5, r0
 800772a:	f7fd f8f1 	bl	8004910 <chDelegateCallVeneer>
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
    test_assert(retval == 0x55AA, "invalid return value");
 800772e:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8007732:	1ac0      	subs	r0, r0, r3
 8007734:	fab0 f080 	clz	r0, r0
 8007738:	4942      	ldr	r1, [pc, #264]	; (8007844 <oslib_test_005_001_execute+0x154>)
 800773a:	0940      	lsrs	r0, r0, #5
 800773c:	f7f9 fa70 	bl	8000c20 <_test_assert>
 8007740:	b108      	cbz	r0, 8007746 <oslib_test_005_001_execute+0x56>
  {
    msg_t msg = chThdWait(tp);
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8007742:	b00a      	add	sp, #40	; 0x28
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 8007746:	4940      	ldr	r1, [pc, #256]	; (8007848 <oslib_test_005_001_execute+0x158>)
 8007748:	4a40      	ldr	r2, [pc, #256]	; (800784c <oslib_test_005_001_execute+0x15c>)
 800774a:	2341      	movs	r3, #65	; 0x41
 800774c:	4628      	mov	r0, r5
 800774e:	f7fd f8df 	bl	8004910 <chDelegateCallVeneer>
    test_assert(retval == (int)'A', "invalid return value");
 8007752:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
 8007756:	fab0 f080 	clz	r0, r0
 800775a:	493a      	ldr	r1, [pc, #232]	; (8007844 <oslib_test_005_001_execute+0x154>)
 800775c:	0940      	lsrs	r0, r0, #5
 800775e:	f7f9 fa5f 	bl	8000c20 <_test_assert>
 8007762:	2800      	cmp	r0, #0
 8007764:	d1ed      	bne.n	8007742 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 8007766:	2343      	movs	r3, #67	; 0x43
 8007768:	4939      	ldr	r1, [pc, #228]	; (8007850 <oslib_test_005_001_execute+0x160>)
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4a39      	ldr	r2, [pc, #228]	; (8007854 <oslib_test_005_001_execute+0x164>)
 800776e:	2342      	movs	r3, #66	; 0x42
 8007770:	4628      	mov	r0, r5
 8007772:	f7fd f8cd 	bl	8004910 <chDelegateCallVeneer>
    test_assert(retval == (int)'B', "invalid return value");
 8007776:	f1a0 0042 	sub.w	r0, r0, #66	; 0x42
 800777a:	fab0 f080 	clz	r0, r0
 800777e:	4931      	ldr	r1, [pc, #196]	; (8007844 <oslib_test_005_001_execute+0x154>)
 8007780:	0940      	lsrs	r0, r0, #5
 8007782:	f7f9 fa4d 	bl	8000c20 <_test_assert>
 8007786:	2800      	cmp	r0, #0
 8007788:	d1db      	bne.n	8007742 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 800778a:	2345      	movs	r3, #69	; 0x45
 800778c:	2246      	movs	r2, #70	; 0x46
 800778e:	e9cd 3200 	strd	r3, r2, [sp]
 8007792:	4931      	ldr	r1, [pc, #196]	; (8007858 <oslib_test_005_001_execute+0x168>)
 8007794:	4a31      	ldr	r2, [pc, #196]	; (800785c <oslib_test_005_001_execute+0x16c>)
 8007796:	2344      	movs	r3, #68	; 0x44
 8007798:	4628      	mov	r0, r5
 800779a:	f7fd f8b9 	bl	8004910 <chDelegateCallVeneer>
    test_assert(retval == (int)'D', "invalid return value");
 800779e:	f1a0 0044 	sub.w	r0, r0, #68	; 0x44
 80077a2:	fab0 f080 	clz	r0, r0
 80077a6:	4927      	ldr	r1, [pc, #156]	; (8007844 <oslib_test_005_001_execute+0x154>)
 80077a8:	0940      	lsrs	r0, r0, #5
 80077aa:	f7f9 fa39 	bl	8000c20 <_test_assert>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d1c7      	bne.n	8007742 <oslib_test_005_001_execute+0x52>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 80077b2:	2148      	movs	r1, #72	; 0x48
 80077b4:	2249      	movs	r2, #73	; 0x49
 80077b6:	234a      	movs	r3, #74	; 0x4a
 80077b8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80077bc:	4628      	mov	r0, r5
 80077be:	4928      	ldr	r1, [pc, #160]	; (8007860 <oslib_test_005_001_execute+0x170>)
 80077c0:	4a28      	ldr	r2, [pc, #160]	; (8007864 <oslib_test_005_001_execute+0x174>)
 80077c2:	2347      	movs	r3, #71	; 0x47
 80077c4:	f7fd f8a4 	bl	8004910 <chDelegateCallVeneer>
    test_assert(retval == (int)'G', "invalid return value");
 80077c8:	f1a0 0047 	sub.w	r0, r0, #71	; 0x47
 80077cc:	fab0 f080 	clz	r0, r0
 80077d0:	491c      	ldr	r1, [pc, #112]	; (8007844 <oslib_test_005_001_execute+0x154>)
 80077d2:	0940      	lsrs	r0, r0, #5
 80077d4:	f7f9 fa24 	bl	8000c20 <_test_assert>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d1b2      	bne.n	8007742 <oslib_test_005_001_execute+0x52>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 80077dc:	4917      	ldr	r1, [pc, #92]	; (800783c <oslib_test_005_001_execute+0x14c>)
 80077de:	4a22      	ldr	r2, [pc, #136]	; (8007868 <oslib_test_005_001_execute+0x178>)
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7fd f895 	bl	8004910 <chDelegateCallVeneer>
    test_assert(retval == 0xAA55, "invalid return value");
 80077e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077ea:	1ac0      	subs	r0, r0, r3
 80077ec:	fab0 f080 	clz	r0, r0
 80077f0:	4914      	ldr	r1, [pc, #80]	; (8007844 <oslib_test_005_001_execute+0x154>)
 80077f2:	0940      	lsrs	r0, r0, #5
 80077f4:	f7f9 fa14 	bl	8000c20 <_test_assert>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d1a2      	bne.n	8007742 <oslib_test_005_001_execute+0x52>
    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 80077fc:	491b      	ldr	r1, [pc, #108]	; (800786c <oslib_test_005_001_execute+0x17c>)
 80077fe:	481c      	ldr	r0, [pc, #112]	; (8007870 <oslib_test_005_001_execute+0x180>)
 8007800:	f7f9 fb8e 	bl	8000f20 <_test_assert_sequence>
 8007804:	2800      	cmp	r0, #0
 8007806:	d19c      	bne.n	8007742 <oslib_test_005_001_execute+0x52>
  test_set_step(3);
 8007808:	2303      	movs	r3, #3
    msg_t msg = chThdWait(tp);
 800780a:	4628      	mov	r0, r5
  test_set_step(3);
 800780c:	6023      	str	r3, [r4, #0]
    msg_t msg = chThdWait(tp);
 800780e:	f7ff fd37 	bl	8007280 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 8007812:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8007816:	1ac0      	subs	r0, r0, r3
 8007818:	fab0 f080 	clz	r0, r0
 800781c:	4915      	ldr	r1, [pc, #84]	; (8007874 <oslib_test_005_001_execute+0x184>)
 800781e:	0940      	lsrs	r0, r0, #5
 8007820:	f7f9 f9fe 	bl	8000c20 <_test_assert>
  test_end_step(3);
 8007824:	e78d      	b.n	8007742 <oslib_test_005_001_execute+0x52>
 8007826:	bf00      	nop
 8007828:	200009b0 	.word	0x200009b0
 800782c:	20002098 	.word	0x20002098
 8007830:	08009331 	.word	0x08009331
 8007834:	20001cac 	.word	0x20001cac
 8007838:	0800b5a8 	.word	0x0800b5a8
 800783c:	08000881 	.word	0x08000881
 8007840:	08000db1 	.word	0x08000db1
 8007844:	0800b5b4 	.word	0x0800b5b4
 8007848:	08000891 	.word	0x08000891
 800784c:	08000dc1 	.word	0x08000dc1
 8007850:	080008b1 	.word	0x080008b1
 8007854:	08000dd1 	.word	0x08000dd1
 8007858:	080008d1 	.word	0x080008d1
 800785c:	08000df1 	.word	0x08000df1
 8007860:	080008f1 	.word	0x080008f1
 8007864:	08000e11 	.word	0x08000e11
 8007868:	08000e41 	.word	0x08000e41
 800786c:	0800b4e8 	.word	0x0800b4e8
 8007870:	0800b5cc 	.word	0x0800b5cc
 8007874:	0800b5dc 	.word	0x0800b5dc
	...

08007880 <oslib_test_004_001_execute>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 8007880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  mp->next = NULL;
 8007884:	4c47      	ldr	r4, [pc, #284]	; (80079a4 <oslib_test_004_001_execute+0x124>)
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 8007886:	4f48      	ldr	r7, [pc, #288]	; (80079a8 <oslib_test_004_001_execute+0x128>)
  return ch.rlist.current;
 8007888:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80079d4 <oslib_test_004_001_execute+0x154>
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 800788c:	4947      	ldr	r1, [pc, #284]	; (80079ac <oslib_test_004_001_execute+0x12c>)
  tqp->next = (thread_t *)tqp;
 800788e:	6024      	str	r4, [r4, #0]
 8007890:	2500      	movs	r5, #0
  mp->align = align;
 8007892:	2204      	movs	r2, #4
  mp->object_size = size;
 8007894:	2308      	movs	r3, #8
static void oslib_test_004_001_execute(void) {
 8007896:	b08c      	sub	sp, #48	; 0x30
 8007898:	4620      	mov	r0, r4
 800789a:	6123      	str	r3, [r4, #16]
  mp->next = NULL;
 800789c:	60e5      	str	r5, [r4, #12]
  test_set_step(1);
 800789e:	2301      	movs	r3, #1
  mp->provider = provider;
 80078a0:	61a5      	str	r5, [r4, #24]
 80078a2:	60a5      	str	r5, [r4, #8]
  mp->align = align;
 80078a4:	6162      	str	r2, [r4, #20]
  tqp->prev = (thread_t *)tqp;
 80078a6:	6064      	str	r4, [r4, #4]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	f7fb f909 	bl	8002ac0 <chGuardedPoolLoadArray>
  return chThdGetSelfX()->prio;
 80078ae:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80078b2:	4b3f      	ldr	r3, [pc, #252]	; (80079b0 <oslib_test_004_001_execute+0x130>)
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 80078b4:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td1 = {
 80078b6:	493f      	ldr	r1, [pc, #252]	; (80079b4 <oslib_test_004_001_execute+0x134>)
 80078b8:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
 80078ba:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->top    = &buf[n];
 80078be:	3310      	adds	r3, #16
      .prio  = chThdGetPriorityX() - 1,
 80078c0:	3a01      	subs	r2, #1
 80078c2:	6223      	str	r3, [r4, #32]
  test_set_step(2);
 80078c4:	2302      	movs	r3, #2
    thread_descriptor_t td1 = {
 80078c6:	f501 70e4 	add.w	r0, r1, #456	; 0x1c8
  test_set_step(2);
 80078ca:	603b      	str	r3, [r7, #0]
    thread_descriptor_t td1 = {
 80078cc:	9209      	str	r2, [sp, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 80078ce:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80078d2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80078d6:	f8df c100 	ldr.w	ip, [pc, #256]	; 80079d8 <oslib_test_004_001_execute+0x158>
 80078da:	4e37      	ldr	r6, [pc, #220]	; (80079b8 <oslib_test_004_001_execute+0x138>)
  mbp->cnt    = (size_t)0;
 80078dc:	62e5      	str	r5, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 80078de:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
 80078e2:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  mbp->reset  = false;
 80078e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80078ea:	9008      	str	r0, [sp, #32]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 80078ec:	a806      	add	r0, sp, #24
    thread_descriptor_t td1 = {
 80078ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80078f0:	9107      	str	r1, [sp, #28]
 80078f2:	f8cd c018 	str.w	ip, [sp, #24]
 80078f6:	960a      	str	r6, [sp, #40]	; 0x28
    tp1 = chThdCreate(&td1);
 80078f8:	f7fb fbc2 	bl	8003080 <chThdCreate>
 80078fc:	f8d8 3018 	ldr.w	r3, [r8, #24]

    thread_descriptor_t td2 = {
 8007900:	4a2e      	ldr	r2, [pc, #184]	; (80079bc <oslib_test_004_001_execute+0x13c>)
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8007902:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 8007904:	492e      	ldr	r1, [pc, #184]	; (80079c0 <oslib_test_004_001_execute+0x140>)
 8007906:	9505      	str	r5, [sp, #20]
      .prio  = chThdGetPriorityX() - 2,
 8007908:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 800790a:	f502 75e4 	add.w	r5, r2, #456	; 0x1c8
    tp1 = chThdCreate(&td1);
 800790e:	4681      	mov	r9, r0
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 8007910:	4668      	mov	r0, sp
    thread_descriptor_t td2 = {
 8007912:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	9604      	str	r6, [sp, #16]
 800791a:	9100      	str	r1, [sp, #0]
    tp2 = chThdCreate(&td2);
 800791c:	f7fb fbb0 	bl	8003080 <chThdCreate>
 8007920:	4e28      	ldr	r6, [pc, #160]	; (80079c4 <oslib_test_004_001_execute+0x144>)
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 8007922:	2303      	movs	r3, #3
    tp2 = chThdCreate(&td2);
 8007924:	4680      	mov	r8, r0
  test_set_step(3);
 8007926:	603b      	str	r3, [r7, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007928:	f104 051c 	add.w	r5, r4, #28
 800792c:	f04f 0a61 	mov.w	sl, #97	; 0x61
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007934:	4620      	mov	r0, r4
 8007936:	f7fb fdd3 	bl	80034e0 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800793a:	2200      	movs	r2, #0
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
      jdp->jobarg  = (void *)('a' + i);
 800793c:	e9c0 6a00 	strd	r6, sl, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007940:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007942:	f10a 0a01 	add.w	sl, sl, #1
 8007946:	4628      	mov	r0, r5
 8007948:	f7fb ff4a 	bl	80037e0 <chMBPostTimeout>
    for (i = 0; i < 8; i++) {
 800794c:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 8007950:	d1ee      	bne.n	8007930 <oslib_test_004_001_execute+0xb0>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 8007952:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007958:	4812      	ldr	r0, [pc, #72]	; (80079a4 <oslib_test_004_001_execute+0x124>)
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	f7fb fdc0 	bl	80034e0 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 8007960:	2400      	movs	r4, #0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007962:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 8007964:	e9c0 4400 	strd	r4, r4, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007968:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800796a:	4817      	ldr	r0, [pc, #92]	; (80079c8 <oslib_test_004_001_execute+0x148>)
 800796c:	f7fb ff38 	bl	80037e0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8007970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007974:	480b      	ldr	r0, [pc, #44]	; (80079a4 <oslib_test_004_001_execute+0x124>)
 8007976:	f7fb fdb3 	bl	80034e0 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800797a:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800797c:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 800797e:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007982:	4811      	ldr	r0, [pc, #68]	; (80079c8 <oslib_test_004_001_execute+0x148>)
 8007984:	f7fb ff2c 	bl	80037e0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 8007988:	4648      	mov	r0, r9
 800798a:	f7ff fc79 	bl	8007280 <chThdWait>
    (void) chThdWait(tp2);
 800798e:	4640      	mov	r0, r8
 8007990:	f7ff fc76 	bl	8007280 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8007994:	490d      	ldr	r1, [pc, #52]	; (80079cc <oslib_test_004_001_execute+0x14c>)
 8007996:	480e      	ldr	r0, [pc, #56]	; (80079d0 <oslib_test_004_001_execute+0x150>)
 8007998:	f7f9 fac2 	bl	8000f20 <_test_assert_sequence>
  }
  test_end_step(4);
}
 800799c:	b00c      	add	sp, #48	; 0x30
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	bf00      	nop
 80079a4:	200013f4 	.word	0x200013f4
 80079a8:	20001cac 	.word	0x20001cac
 80079ac:	200013d4 	.word	0x200013d4
 80079b0:	20001458 	.word	0x20001458
 80079b4:	20001d08 	.word	0x20001d08
 80079b8:	08003791 	.word	0x08003791
 80079bc:	20001ed0 	.word	0x20001ed0
 80079c0:	0800b5fc 	.word	0x0800b5fc
 80079c4:	08004061 	.word	0x08004061
 80079c8:	20001410 	.word	0x20001410
 80079cc:	0800b4e8 	.word	0x0800b4e8
 80079d0:	0800b518 	.word	0x0800b518
 80079d4:	200009b0 	.word	0x200009b0
 80079d8:	0800b5f0 	.word	0x0800b5f0
 80079dc:	00000000 	.word	0x00000000

080079e0 <rt_test_011_005_execute>:
static void rt_test_011_005_execute(void) {
 80079e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <rt_test_011_005_execute+0x64>)
  test_set_step(1);
 80079e6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8007a54 <rt_test_011_005_execute+0x74>
  return chThdGetSelfX()->prio;
 80079ea:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80079ec:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007a58 <rt_test_011_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 80079f0:	689e      	ldr	r6, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80079f2:	4f15      	ldr	r7, [pc, #84]	; (8007a48 <rt_test_011_005_execute+0x68>)
  test_set_step(1);
 80079f4:	2301      	movs	r3, #1
 80079f6:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80079fa:	f7fc fc61 	bl	80042c0 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 80079fe:	3e01      	subs	r6, #1
    start = test_wait_tick();
 8007a00:	4605      	mov	r5, r0
    n = 0;
 8007a02:	2400      	movs	r4, #0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007a04:	2300      	movs	r3, #0
 8007a06:	4642      	mov	r2, r8
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f7fb fa90 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007a10:	f7ff fc36 	bl	8007280 <chThdWait>
 8007a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8007a18:	f242 720f 	movw	r2, #9999	; 0x270f
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	1b5b      	subs	r3, r3, r5
 8007a20:	4293      	cmp	r3, r2
      n++;
 8007a22:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8007a26:	d9ed      	bls.n	8007a04 <rt_test_011_005_execute+0x24>
  test_set_step(2);
 8007a28:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <rt_test_011_005_execute+0x6c>)
  test_set_step(2);
 8007a2c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8007a30:	f7f9 fa5e 	bl	8000ef0 <test_print>
    test_printn(n);
 8007a34:	4620      	mov	r0, r4
 8007a36:	f7f9 f98b 	bl	8000d50 <test_printn>
}
 8007a3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8007a3e:	4804      	ldr	r0, [pc, #16]	; (8007a50 <rt_test_011_005_execute+0x70>)
 8007a40:	f7f9 ba36 	b.w	8000eb0 <test_println>
 8007a44:	200009b0 	.word	0x200009b0
 8007a48:	20001598 	.word	0x20001598
 8007a4c:	0800b0f0 	.word	0x0800b0f0
 8007a50:	0800b450 	.word	0x0800b450
 8007a54:	20001cac 	.word	0x20001cac
 8007a58:	08009381 	.word	0x08009381
 8007a5c:	00000000 	.word	0x00000000

08007a60 <test_wait_threads>:
void test_wait_threads(void) {
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4c07      	ldr	r4, [pc, #28]	; (8007a80 <test_wait_threads+0x20>)
      threads[i] = NULL;
 8007a64:	2600      	movs	r6, #0
 8007a66:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8007a6a:	f854 0b04 	ldr.w	r0, [r4], #4
 8007a6e:	b118      	cbz	r0, 8007a78 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8007a70:	f7ff fc06 	bl	8007280 <chThdWait>
      threads[i] = NULL;
 8007a74:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8007a78:	42ac      	cmp	r4, r5
 8007a7a:	d1f6      	bne.n	8007a6a <test_wait_threads+0xa>
}
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
 8007a7e:	bf00      	nop
 8007a80:	20001cc4 	.word	0x20001cc4
	...

08007a90 <rt_test_011_008_execute>:
static void rt_test_011_008_execute(void) {
 8007a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007a94:	4f2c      	ldr	r7, [pc, #176]	; (8007b48 <rt_test_011_008_execute+0xb8>)
  test_set_step(1);
 8007a96:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007b60 <rt_test_011_008_execute+0xd0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007a9a:	4e2c      	ldr	r6, [pc, #176]	; (8007b4c <rt_test_011_008_execute+0xbc>)
 8007a9c:	4d2c      	ldr	r5, [pc, #176]	; (8007b50 <rt_test_011_008_execute+0xc0>)
 8007a9e:	4c2d      	ldr	r4, [pc, #180]	; (8007b54 <rt_test_011_008_execute+0xc4>)
static void rt_test_011_008_execute(void) {
 8007aa0:	b082      	sub	sp, #8
  test_set_step(1);
 8007aa2:	2201      	movs	r2, #1
    n = 0;
 8007aa4:	2300      	movs	r3, #0
  test_set_step(1);
 8007aa6:	f8c8 2000 	str.w	r2, [r8]
    n = 0;
 8007aaa:	9301      	str	r3, [sp, #4]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007aac:	f7fc fc08 	bl	80042c0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	6899      	ldr	r1, [r3, #8]
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	ab01      	add	r3, sp, #4
 8007ab8:	3901      	subs	r1, #1
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7fb fa38 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007ac4:	6899      	ldr	r1, [r3, #8]
 8007ac6:	4632      	mov	r2, r6
 8007ac8:	ab01      	add	r3, sp, #4
 8007aca:	3901      	subs	r1, #1
 8007acc:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007ad0:	f7fb fa2e 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007ad8:	6899      	ldr	r1, [r3, #8]
 8007ada:	4632      	mov	r2, r6
 8007adc:	ab01      	add	r3, sp, #4
 8007ade:	3901      	subs	r1, #1
 8007ae0:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007ae4:	f7fb fa24 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007aec:	6899      	ldr	r1, [r3, #8]
 8007aee:	4632      	mov	r2, r6
 8007af0:	ab01      	add	r3, sp, #4
 8007af2:	3901      	subs	r1, #1
 8007af4:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007af8:	f7fb fa1a 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007b00:	6899      	ldr	r1, [r3, #8]
 8007b02:	4632      	mov	r2, r6
 8007b04:	3901      	subs	r1, #1
 8007b06:	ab01      	add	r3, sp, #4
 8007b08:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8007b0c:	f7fb fa10 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007b10:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007b12:	4602      	mov	r2, r0
    chThdSleepSeconds(1);
 8007b14:	f242 7010 	movw	r0, #10000	; 0x2710
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007b18:	6122      	str	r2, [r4, #16]
  test_set_step(2);
 8007b1a:	f8c8 3000 	str.w	r3, [r8]
    chThdSleepSeconds(1);
 8007b1e:	f7fc fa3f 	bl	8003fa0 <chThdSleep>
    test_terminate_threads();
 8007b22:	f7f9 f8c5 	bl	8000cb0 <test_terminate_threads>
    test_wait_threads();
 8007b26:	f7ff ff9b 	bl	8007a60 <test_wait_threads>
  test_set_step(3);
 8007b2a:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8007b2c:	480a      	ldr	r0, [pc, #40]	; (8007b58 <rt_test_011_008_execute+0xc8>)
  test_set_step(3);
 8007b2e:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8007b32:	f7f9 f9dd 	bl	8000ef0 <test_print>
    test_printn(n);
 8007b36:	9801      	ldr	r0, [sp, #4]
 8007b38:	f7f9 f90a 	bl	8000d50 <test_printn>
    test_println(" ctxswc/S");
 8007b3c:	4807      	ldr	r0, [pc, #28]	; (8007b5c <rt_test_011_008_execute+0xcc>)
 8007b3e:	f7f9 f9b7 	bl	8000eb0 <test_println>
}
 8007b42:	b002      	add	sp, #8
 8007b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b48:	200009b0 	.word	0x200009b0
 8007b4c:	080028b1 	.word	0x080028b1
 8007b50:	20001598 	.word	0x20001598
 8007b54:	20001cc4 	.word	0x20001cc4
 8007b58:	0800b0f0 	.word	0x0800b0f0
 8007b5c:	0800b608 	.word	0x0800b608
 8007b60:	20001cac 	.word	0x20001cac
	...

08007b70 <rt_test_011_007_execute>:
static void rt_test_011_007_execute(void) {
 8007b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007b74:	4d35      	ldr	r5, [pc, #212]	; (8007c4c <rt_test_011_007_execute+0xdc>)
  test_set_step(1);
 8007b76:	4f36      	ldr	r7, [pc, #216]	; (8007c50 <rt_test_011_007_execute+0xe0>)
  return chThdGetSelfX()->prio;
 8007b78:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8007b7a:	4a36      	ldr	r2, [pc, #216]	; (8007c54 <rt_test_011_007_execute+0xe4>)
 8007b7c:	6899      	ldr	r1, [r3, #8]
 8007b7e:	4836      	ldr	r0, [pc, #216]	; (8007c58 <rt_test_011_007_execute+0xe8>)
 8007b80:	4c36      	ldr	r4, [pc, #216]	; (8007c5c <rt_test_011_007_execute+0xec>)
 8007b82:	4e37      	ldr	r6, [pc, #220]	; (8007c60 <rt_test_011_007_execute+0xf0>)
  test_set_step(1);
 8007b84:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8007b86:	3105      	adds	r1, #5
  test_set_step(1);
 8007b88:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f7fb f9d0 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007b90:	69a9      	ldr	r1, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8007b92:	4a30      	ldr	r2, [pc, #192]	; (8007c54 <rt_test_011_007_execute+0xe4>)
 8007b94:	6889      	ldr	r1, [r1, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8007b96:	4603      	mov	r3, r0
 8007b98:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8007b9a:	3104      	adds	r1, #4
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4831      	ldr	r0, [pc, #196]	; (8007c64 <rt_test_011_007_execute+0xf4>)
 8007ba0:	f7fb f9c6 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007ba4:	69a9      	ldr	r1, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8007ba6:	4a2b      	ldr	r2, [pc, #172]	; (8007c54 <rt_test_011_007_execute+0xe4>)
 8007ba8:	6889      	ldr	r1, [r1, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8007baa:	4603      	mov	r3, r0
 8007bac:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8007bae:	3103      	adds	r1, #3
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	482d      	ldr	r0, [pc, #180]	; (8007c68 <rt_test_011_007_execute+0xf8>)
 8007bb4:	f7fb f9bc 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007bb8:	69a9      	ldr	r1, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007bba:	4a26      	ldr	r2, [pc, #152]	; (8007c54 <rt_test_011_007_execute+0xe4>)
 8007bbc:	6889      	ldr	r1, [r1, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007bc2:	3102      	adds	r1, #2
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4829      	ldr	r0, [pc, #164]	; (8007c6c <rt_test_011_007_execute+0xfc>)
 8007bc8:	f7fb f9b2 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007bcc:	69a9      	ldr	r1, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007bce:	4a21      	ldr	r2, [pc, #132]	; (8007c54 <rt_test_011_007_execute+0xe4>)
 8007bd0:	6889      	ldr	r1, [r1, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007bd6:	3101      	adds	r1, #1
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4825      	ldr	r0, [pc, #148]	; (8007c70 <rt_test_011_007_execute+0x100>)
 8007bdc:	f7fb f9a8 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007be0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007be2:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007be4:	603b      	str	r3, [r7, #0]
    start = test_wait_tick();
 8007be6:	f7fc fb6b 	bl	80042c0 <test_wait_tick>
    n = 0;
 8007bea:	2400      	movs	r4, #0
    start = test_wait_tick();
 8007bec:	4605      	mov	r5, r0
 8007bee:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7fa feab 	bl	8002950 <chSemResetWithMessage.constprop.0>
 8007bfa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8007bfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8007c02:	1b5b      	subs	r3, r3, r5
 8007c04:	4293      	cmp	r3, r2
      n++;
 8007c06:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8007c0a:	d9f2      	bls.n	8007bf2 <rt_test_011_007_execute+0x82>
  test_set_step(3);
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	603b      	str	r3, [r7, #0]
    test_terminate_threads();
 8007c10:	f7f9 f84e 	bl	8000cb0 <test_terminate_threads>
 8007c14:	2100      	movs	r1, #0
 8007c16:	4812      	ldr	r0, [pc, #72]	; (8007c60 <rt_test_011_007_execute+0xf0>)
 8007c18:	f7fa fe9a 	bl	8002950 <chSemResetWithMessage.constprop.0>
    test_wait_threads();
 8007c1c:	f7ff ff20 	bl	8007a60 <test_wait_threads>
  test_set_step(4);
 8007c20:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007c22:	4814      	ldr	r0, [pc, #80]	; (8007c74 <rt_test_011_007_execute+0x104>)
  test_set_step(4);
 8007c24:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8007c26:	f7f9 f963 	bl	8000ef0 <test_print>
    test_printn(n);
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7f9 f890 	bl	8000d50 <test_printn>
    test_printn(n * 6);
 8007c30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 8007c34:	4810      	ldr	r0, [pc, #64]	; (8007c78 <rt_test_011_007_execute+0x108>)
 8007c36:	f7f9 f95b 	bl	8000ef0 <test_print>
    test_printn(n * 6);
 8007c3a:	0060      	lsls	r0, r4, #1
 8007c3c:	f7f9 f888 	bl	8000d50 <test_printn>
}
 8007c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8007c44:	480d      	ldr	r0, [pc, #52]	; (8007c7c <rt_test_011_007_execute+0x10c>)
 8007c46:	f7f9 b933 	b.w	8000eb0 <test_println>
 8007c4a:	bf00      	nop
 8007c4c:	200009b0 	.word	0x200009b0
 8007c50:	20001cac 	.word	0x20001cac
 8007c54:	08006f91 	.word	0x08006f91
 8007c58:	20001598 	.word	0x20001598
 8007c5c:	20001cc4 	.word	0x20001cc4
 8007c60:	20001584 	.word	0x20001584
 8007c64:	200016e0 	.word	0x200016e0
 8007c68:	20001828 	.word	0x20001828
 8007c6c:	20001970 	.word	0x20001970
 8007c70:	20001ab8 	.word	0x20001ab8
 8007c74:	0800b0f0 	.word	0x0800b0f0
 8007c78:	0800b614 	.word	0x0800b614
 8007c7c:	0800b608 	.word	0x0800b608

08007c80 <rt_test_011_004_execute>:
  return ch.rlist.current;
 8007c80:	4b2b      	ldr	r3, [pc, #172]	; (8007d30 <rt_test_011_004_execute+0xb0>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007c82:	4a2c      	ldr	r2, [pc, #176]	; (8007d34 <rt_test_011_004_execute+0xb4>)
  return chThdGetSelfX()->prio;
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	482c      	ldr	r0, [pc, #176]	; (8007d38 <rt_test_011_004_execute+0xb8>)
 8007c88:	6899      	ldr	r1, [r3, #8]
static void rt_test_011_004_execute(void) {
 8007c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8007c8e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007d48 <rt_test_011_004_execute+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007c92:	3101      	adds	r1, #1
  test_set_step(1);
 8007c94:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007c96:	2300      	movs	r3, #0
  test_set_step(1);
 8007c98:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007c9c:	f7fb f948 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007ca0:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <rt_test_011_004_execute+0xbc>)
  test_set_step(2);
 8007ca2:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007ca8:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8007cac:	f7fc fb08 	bl	80042c0 <test_wait_tick>
    n = 0;
 8007cb0:	2500      	movs	r5, #0
    start = test_wait_tick();
 8007cb2:	4606      	mov	r6, r0
      chSchWakeupS(tp, MSG_OK);
 8007cb4:	462f      	mov	r7, r5
 8007cb6:	f04f 0820 	mov.w	r8, #32
 8007cba:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8007cbe:	f388 8811 	msr	BASEPRI, r8
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f7fb f8fb 	bl	8002ec0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007cca:	4620      	mov	r0, r4
 8007ccc:	2100      	movs	r1, #0
 8007cce:	f7fb f8f7 	bl	8002ec0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f7fb f8f3 	bl	8002ec0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007cda:	4620      	mov	r0, r4
 8007cdc:	2100      	movs	r1, #0
 8007cde:	f7fb f8ef 	bl	8002ec0 <chSchWakeupS>
 8007ce2:	f387 8811 	msr	BASEPRI, r7
 8007ce6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8007cea:	f242 720f 	movw	r2, #9999	; 0x270f
 8007cee:	1b9b      	subs	r3, r3, r6
 8007cf0:	4293      	cmp	r3, r2
      n += 4;
 8007cf2:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8007cf6:	d9e2      	bls.n	8007cbe <rt_test_011_004_execute+0x3e>
  test_set_step(3);
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	f8ca 3000 	str.w	r3, [sl]
 8007cfe:	f388 8811 	msr	BASEPRI, r8
    chSchWakeupS(tp, MSG_TIMEOUT);
 8007d02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7fb f8da 	bl	8002ec0 <chSchWakeupS>
 8007d0c:	f387 8811 	msr	BASEPRI, r7
    test_wait_threads();
 8007d10:	f7ff fea6 	bl	8007a60 <test_wait_threads>
  test_set_step(4);
 8007d14:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007d16:	480a      	ldr	r0, [pc, #40]	; (8007d40 <rt_test_011_004_execute+0xc0>)
  test_set_step(4);
 8007d18:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8007d1c:	f7f9 f8e8 	bl	8000ef0 <test_print>
    test_printn(n * 2);
 8007d20:	0068      	lsls	r0, r5, #1
 8007d22:	f7f9 f815 	bl	8000d50 <test_printn>
}
 8007d26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 8007d2a:	4806      	ldr	r0, [pc, #24]	; (8007d44 <rt_test_011_004_execute+0xc4>)
 8007d2c:	f7f9 b8c0 	b.w	8000eb0 <test_println>
 8007d30:	200009b0 	.word	0x200009b0
 8007d34:	080032a1 	.word	0x080032a1
 8007d38:	20001598 	.word	0x20001598
 8007d3c:	20001cc4 	.word	0x20001cc4
 8007d40:	0800b0f0 	.word	0x0800b0f0
 8007d44:	0800b608 	.word	0x0800b608
 8007d48:	20001cac 	.word	0x20001cac
 8007d4c:	00000000 	.word	0x00000000

08007d50 <rt_test_011_003_execute>:
static void rt_test_011_003_execute(void) {
 8007d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007d54:	4e2d      	ldr	r6, [pc, #180]	; (8007e0c <rt_test_011_003_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007d56:	4d2e      	ldr	r5, [pc, #184]	; (8007e10 <rt_test_011_003_execute+0xc0>)
  return chThdGetSelfX()->prio;
 8007d58:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 8007d5a:	4f2e      	ldr	r7, [pc, #184]	; (8007e14 <rt_test_011_003_execute+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007d5c:	6899      	ldr	r1, [r3, #8]
 8007d5e:	4a2e      	ldr	r2, [pc, #184]	; (8007e18 <rt_test_011_003_execute+0xc8>)
 8007d60:	4c2e      	ldr	r4, [pc, #184]	; (8007e1c <rt_test_011_003_execute+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007d62:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007e2c <rt_test_011_003_execute+0xdc>
  test_set_step(1);
 8007d66:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007d6a:	3101      	adds	r1, #1
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	2300      	movs	r3, #0
  test_set_step(1);
 8007d70:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007d74:	f7fb f8dc 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007d78:	69b3      	ldr	r3, [r6, #24]
 8007d7a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007d7c:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 8007d7e:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007d82:	4642      	mov	r2, r8
 8007d84:	3902      	subs	r1, #2
 8007d86:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007d8a:	2300      	movs	r3, #0
  test_set_step(2);
 8007d8c:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007d90:	f7fb f8ce 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007d94:	69b3      	ldr	r3, [r6, #24]
 8007d96:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8007d98:	6899      	ldr	r1, [r3, #8]
 8007d9a:	4642      	mov	r2, r8
 8007d9c:	3903      	subs	r1, #3
 8007d9e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007da2:	2300      	movs	r3, #0
 8007da4:	f7fb f8c4 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007da8:	69b3      	ldr	r3, [r6, #24]
 8007daa:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8007dac:	6899      	ldr	r1, [r3, #8]
 8007dae:	4642      	mov	r2, r8
 8007db0:	3904      	subs	r1, #4
 8007db2:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007db6:	2300      	movs	r3, #0
 8007db8:	f7fb f8ba 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007dbc:	69b3      	ldr	r3, [r6, #24]
 8007dbe:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007dc0:	6899      	ldr	r1, [r3, #8]
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	3905      	subs	r1, #5
 8007dc6:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f7fb f8b0 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8007dd0:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007dd2:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 8007dd4:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007dd6:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 8007dd8:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8007dda:	f7fc fd61 	bl	80048a0 <msg_loop_test>
 8007dde:	4604      	mov	r4, r0
    test_wait_threads();
 8007de0:	f7ff fe3e 	bl	8007a60 <test_wait_threads>
  test_set_step(4);
 8007de4:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007de6:	480e      	ldr	r0, [pc, #56]	; (8007e20 <rt_test_011_003_execute+0xd0>)
  test_set_step(4);
 8007de8:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8007dea:	f7f9 f881 	bl	8000ef0 <test_print>
    test_printn(n);
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7f8 ffae 	bl	8000d50 <test_printn>
    test_print(" msgs/S, ");
 8007df4:	480b      	ldr	r0, [pc, #44]	; (8007e24 <rt_test_011_003_execute+0xd4>)
 8007df6:	f7f9 f87b 	bl	8000ef0 <test_print>
    test_printn(n << 1);
 8007dfa:	0060      	lsls	r0, r4, #1
 8007dfc:	f7f8 ffa8 	bl	8000d50 <test_printn>
}
 8007e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8007e04:	4808      	ldr	r0, [pc, #32]	; (8007e28 <rt_test_011_003_execute+0xd8>)
 8007e06:	f7f9 b853 	b.w	8000eb0 <test_println>
 8007e0a:	bf00      	nop
 8007e0c:	200009b0 	.word	0x200009b0
 8007e10:	20001598 	.word	0x20001598
 8007e14:	20001cac 	.word	0x20001cac
 8007e18:	08004831 	.word	0x08004831
 8007e1c:	20001cc4 	.word	0x20001cc4
 8007e20:	0800b0f0 	.word	0x0800b0f0
 8007e24:	0800b628 	.word	0x0800b628
 8007e28:	0800b608 	.word	0x0800b608
 8007e2c:	08009381 	.word	0x08009381

08007e30 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
 8007e30:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8007e32:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <rt_test_011_002_execute+0x54>)
  test_set_step(1);
 8007e34:	4d14      	ldr	r5, [pc, #80]	; (8007e88 <rt_test_011_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 8007e36:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <rt_test_011_002_execute+0x5c>)
 8007e3a:	6899      	ldr	r1, [r3, #8]
 8007e3c:	4814      	ldr	r0, [pc, #80]	; (8007e90 <rt_test_011_002_execute+0x60>)
 8007e3e:	3101      	adds	r1, #1
  test_set_step(1);
 8007e40:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007e42:	2300      	movs	r3, #0
  test_set_step(1);
 8007e44:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007e46:	f7fb f873 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <rt_test_011_002_execute+0x64>)
  test_set_step(2);
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8007e50:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8007e52:	f7fc fd25 	bl	80048a0 <msg_loop_test>
 8007e56:	4604      	mov	r4, r0
    test_wait_threads();
 8007e58:	f7ff fe02 	bl	8007a60 <test_wait_threads>
  test_set_step(3);
 8007e5c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8007e5e:	480e      	ldr	r0, [pc, #56]	; (8007e98 <rt_test_011_002_execute+0x68>)
  test_set_step(3);
 8007e60:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8007e62:	f7f9 f845 	bl	8000ef0 <test_print>
    test_printn(n);
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7f8 ff72 	bl	8000d50 <test_printn>
    test_print(" msgs/S, ");
 8007e6c:	480b      	ldr	r0, [pc, #44]	; (8007e9c <rt_test_011_002_execute+0x6c>)
 8007e6e:	f7f9 f83f 	bl	8000ef0 <test_print>
    test_printn(n << 1);
 8007e72:	0060      	lsls	r0, r4, #1
 8007e74:	f7f8 ff6c 	bl	8000d50 <test_printn>
}
 8007e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 8007e7c:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <rt_test_011_002_execute+0x70>)
 8007e7e:	f7f9 b817 	b.w	8000eb0 <test_println>
 8007e82:	bf00      	nop
 8007e84:	200009b0 	.word	0x200009b0
 8007e88:	20001cac 	.word	0x20001cac
 8007e8c:	08004831 	.word	0x08004831
 8007e90:	20001598 	.word	0x20001598
 8007e94:	20001cc4 	.word	0x20001cc4
 8007e98:	0800b0f0 	.word	0x0800b0f0
 8007e9c:	0800b628 	.word	0x0800b628
 8007ea0:	0800b608 	.word	0x0800b608
	...

08007eb0 <rt_test_011_001_execute>:
static void rt_test_011_001_execute(void) {
 8007eb0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8007eb2:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <rt_test_011_001_execute+0x54>)
  test_set_step(1);
 8007eb4:	4d14      	ldr	r5, [pc, #80]	; (8007f08 <rt_test_011_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 8007eb6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007eb8:	4a14      	ldr	r2, [pc, #80]	; (8007f0c <rt_test_011_001_execute+0x5c>)
 8007eba:	6899      	ldr	r1, [r3, #8]
 8007ebc:	4814      	ldr	r0, [pc, #80]	; (8007f10 <rt_test_011_001_execute+0x60>)
 8007ebe:	3901      	subs	r1, #1
  test_set_step(1);
 8007ec0:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007ec2:	2300      	movs	r3, #0
  test_set_step(1);
 8007ec4:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007ec6:	f7fb f833 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8007eca:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <rt_test_011_001_execute+0x64>)
  test_set_step(2);
 8007ecc:	2202      	movs	r2, #2
 8007ece:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007ed0:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8007ed2:	f7fc fce5 	bl	80048a0 <msg_loop_test>
 8007ed6:	4604      	mov	r4, r0
    test_wait_threads();
 8007ed8:	f7ff fdc2 	bl	8007a60 <test_wait_threads>
  test_set_step(3);
 8007edc:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8007ede:	480e      	ldr	r0, [pc, #56]	; (8007f18 <rt_test_011_001_execute+0x68>)
  test_set_step(3);
 8007ee0:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8007ee2:	f7f9 f805 	bl	8000ef0 <test_print>
    test_printn(n);
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f7f8 ff32 	bl	8000d50 <test_printn>
    test_print(" msgs/S, ");
 8007eec:	480b      	ldr	r0, [pc, #44]	; (8007f1c <rt_test_011_001_execute+0x6c>)
 8007eee:	f7f8 ffff 	bl	8000ef0 <test_print>
    test_printn(n << 1);
 8007ef2:	0060      	lsls	r0, r4, #1
 8007ef4:	f7f8 ff2c 	bl	8000d50 <test_printn>
}
 8007ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 8007efc:	4808      	ldr	r0, [pc, #32]	; (8007f20 <rt_test_011_001_execute+0x70>)
 8007efe:	f7f8 bfd7 	b.w	8000eb0 <test_println>
 8007f02:	bf00      	nop
 8007f04:	200009b0 	.word	0x200009b0
 8007f08:	20001cac 	.word	0x20001cac
 8007f0c:	08004831 	.word	0x08004831
 8007f10:	20001598 	.word	0x20001598
 8007f14:	20001cc4 	.word	0x20001cc4
 8007f18:	0800b0f0 	.word	0x0800b0f0
 8007f1c:	0800b628 	.word	0x0800b628
 8007f20:	0800b608 	.word	0x0800b608
	...

08007f30 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007f32:	4d43      	ldr	r5, [pc, #268]	; (8008040 <rt_test_010_002_execute+0x110>)
 8007f34:	4b43      	ldr	r3, [pc, #268]	; (8008044 <rt_test_010_002_execute+0x114>)
 8007f36:	4a44      	ldr	r2, [pc, #272]	; (8008048 <rt_test_010_002_execute+0x118>)
 8007f38:	4944      	ldr	r1, [pc, #272]	; (800804c <rt_test_010_002_execute+0x11c>)
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	6028      	str	r0, [r5, #0]
  {
    for (i = 0; i < 4; i++)
 8007f3e:	f103 070c 	add.w	r7, r3, #12
 8007f42:	2620      	movs	r6, #32
 8007f44:	2400      	movs	r4, #0
 8007f46:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8007f4a:	6808      	ldr	r0, [r1, #0]
 8007f4c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8007f4e:	600a      	str	r2, [r1, #0]
 8007f50:	f384 8811 	msr	BASEPRI, r4
 8007f54:	429f      	cmp	r7, r3
 8007f56:	d002      	beq.n	8007f5e <rt_test_010_002_execute+0x2e>
 8007f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5c:	e7f3      	b.n	8007f46 <rt_test_010_002_execute+0x16>
  return ch.rlist.current;
 8007f5e:	4b3c      	ldr	r3, [pc, #240]	; (8008050 <rt_test_010_002_execute+0x120>)
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007f60:	4a3c      	ldr	r2, [pc, #240]	; (8008054 <rt_test_010_002_execute+0x124>)
  return chThdGetSelfX()->prio;
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	483c      	ldr	r0, [pc, #240]	; (8008058 <rt_test_010_002_execute+0x128>)
 8007f66:	689e      	ldr	r6, [r3, #8]
 8007f68:	4c3c      	ldr	r4, [pc, #240]	; (800805c <rt_test_010_002_execute+0x12c>)
 8007f6a:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007f70:	f7fb f836 	bl	8002fe0 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f74:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007f76:	4603      	mov	r3, r0
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f78:	4a39      	ldr	r2, [pc, #228]	; (8008060 <rt_test_010_002_execute+0x130>)
 8007f7a:	483a      	ldr	r0, [pc, #232]	; (8008064 <rt_test_010_002_execute+0x134>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007f7c:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f7e:	f7fb f82f 	bl	8002fe0 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f82:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f84:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f86:	4a38      	ldr	r2, [pc, #224]	; (8008068 <rt_test_010_002_execute+0x138>)
 8007f88:	4838      	ldr	r0, [pc, #224]	; (800806c <rt_test_010_002_execute+0x13c>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007f8a:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f8c:	f7fb f828 	bl	8002fe0 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007f90:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f92:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007f94:	4a36      	ldr	r2, [pc, #216]	; (8008070 <rt_test_010_002_execute+0x140>)
 8007f96:	4837      	ldr	r0, [pc, #220]	; (8008074 <rt_test_010_002_execute+0x144>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007f98:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007f9a:	f7fb f821 	bl	8002fe0 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007f9e:	4a36      	ldr	r2, [pc, #216]	; (8008078 <rt_test_010_002_execute+0x148>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007fa0:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007fa2:	1f71      	subs	r1, r6, #5
 8007fa4:	4835      	ldr	r0, [pc, #212]	; (800807c <rt_test_010_002_execute+0x14c>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007fa6:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007fa8:	f7fb f81a 	bl	8002fe0 <chThdCreateFromMemoryPool.constprop.0>
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8007fac:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007fae:	6120      	str	r0, [r4, #16]
  test_set_step(4);
 8007fb0:	2204      	movs	r2, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007fb2:	4606      	mov	r6, r0
  test_set_step(4);
 8007fb4:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d03b      	beq.n	8008032 <rt_test_010_002_execute+0x102>
 8007fba:	6860      	ldr	r0, [r4, #4]
 8007fbc:	b128      	cbz	r0, 8007fca <rt_test_010_002_execute+0x9a>
 8007fbe:	68a0      	ldr	r0, [r4, #8]
 8007fc0:	b118      	cbz	r0, 8007fca <rt_test_010_002_execute+0x9a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	3800      	subs	r0, #0
 8007fc6:	bf18      	it	ne
 8007fc8:	2001      	movne	r0, #1
 8007fca:	492d      	ldr	r1, [pc, #180]	; (8008080 <rt_test_010_002_execute+0x150>)
 8007fcc:	f7f8 fe28 	bl	8000c20 <_test_assert>
 8007fd0:	b100      	cbz	r0, 8007fd4 <rt_test_010_002_execute+0xa4>
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8007fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8007fd4:	fab6 f086 	clz	r0, r6
 8007fd8:	492a      	ldr	r1, [pc, #168]	; (8008084 <rt_test_010_002_execute+0x154>)
 8007fda:	0940      	lsrs	r0, r0, #5
 8007fdc:	f7f8 fe20 	bl	8000c20 <_test_assert>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d1f6      	bne.n	8007fd2 <rt_test_010_002_execute+0xa2>
  test_set_step(5);
 8007fe4:	2305      	movs	r3, #5
 8007fe6:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8007fe8:	f7ff fd3a 	bl	8007a60 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8007fec:	4926      	ldr	r1, [pc, #152]	; (8008088 <rt_test_010_002_execute+0x158>)
 8007fee:	4827      	ldr	r0, [pc, #156]	; (800808c <rt_test_010_002_execute+0x15c>)
 8007ff0:	f7f8 ff96 	bl	8000f20 <_test_assert_sequence>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d1ec      	bne.n	8007fd2 <rt_test_010_002_execute+0xa2>
  test_set_step(6);
 8007ff8:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8007ffa:	4f14      	ldr	r7, [pc, #80]	; (800804c <rt_test_010_002_execute+0x11c>)
 8007ffc:	4e24      	ldr	r6, [pc, #144]	; (8008090 <rt_test_010_002_execute+0x160>)
  test_set_step(6);
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8008002:	4638      	mov	r0, r7
 8008004:	f7f9 f80c 	bl	8001020 <chPoolAlloc>
 8008008:	3800      	subs	r0, #0
 800800a:	bf18      	it	ne
 800800c:	2001      	movne	r0, #1
 800800e:	4631      	mov	r1, r6
 8008010:	f7f8 fe06 	bl	8000c20 <_test_assert>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1dc      	bne.n	8007fd2 <rt_test_010_002_execute+0xa2>
    for (i = 0; i < 4; i++)
 8008018:	3c01      	subs	r4, #1
 800801a:	d1f2      	bne.n	8008002 <rt_test_010_002_execute+0xd2>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800801c:	480b      	ldr	r0, [pc, #44]	; (800804c <rt_test_010_002_execute+0x11c>)
 800801e:	f7f8 ffff 	bl	8001020 <chPoolAlloc>
 8008022:	fab0 f080 	clz	r0, r0
}
 8008026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800802a:	491a      	ldr	r1, [pc, #104]	; (8008094 <rt_test_010_002_execute+0x164>)
 800802c:	0940      	lsrs	r0, r0, #5
 800802e:	f7f8 bdf7 	b.w	8000c20 <_test_assert>
    test_assert((threads[0] != NULL) &&
 8008032:	4913      	ldr	r1, [pc, #76]	; (8008080 <rt_test_010_002_execute+0x150>)
 8008034:	4618      	mov	r0, r3
 8008036:	f7f8 fdf3 	bl	8000c20 <_test_assert>
 800803a:	2800      	cmp	r0, #0
 800803c:	d1c9      	bne.n	8007fd2 <rt_test_010_002_execute+0xa2>
 800803e:	e7c9      	b.n	8007fd4 <rt_test_010_002_execute+0xa4>
 8008040:	20001cac 	.word	0x20001cac
 8008044:	0800ca64 	.word	0x0800ca64
 8008048:	20001598 	.word	0x20001598
 800804c:	20001448 	.word	0x20001448
 8008050:	200009b0 	.word	0x200009b0
 8008054:	0800b2bc 	.word	0x0800b2bc
 8008058:	0800b634 	.word	0x0800b634
 800805c:	20001cc4 	.word	0x20001cc4
 8008060:	0800b2c0 	.word	0x0800b2c0
 8008064:	0800b63c 	.word	0x0800b63c
 8008068:	0800b644 	.word	0x0800b644
 800806c:	0800b648 	.word	0x0800b648
 8008070:	0800c1e4 	.word	0x0800c1e4
 8008074:	0800b650 	.word	0x0800b650
 8008078:	0800b774 	.word	0x0800b774
 800807c:	0800b658 	.word	0x0800b658
 8008080:	0800b660 	.word	0x0800b660
 8008084:	0800b678 	.word	0x0800b678
 8008088:	0800a0d4 	.word	0x0800a0d4
 800808c:	0800b0a8 	.word	0x0800b0a8
 8008090:	0800b694 	.word	0x0800b694
 8008094:	0800b6a4 	.word	0x0800b6a4
	...

080080a0 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80080a4:	4b46      	ldr	r3, [pc, #280]	; (80081c0 <rt_test_010_001_execute+0x120>)
  test_set_step(2);
 80080a6:	4d47      	ldr	r5, [pc, #284]	; (80081c4 <rt_test_010_001_execute+0x124>)
  return chThdGetSelfX()->prio;
 80080a8:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80080aa:	4847      	ldr	r0, [pc, #284]	; (80081c8 <rt_test_010_001_execute+0x128>)
 80080ac:	689e      	ldr	r6, [r3, #8]
static void rt_test_010_001_execute(void) {
 80080ae:	b086      	sub	sp, #24
  test_set_step(2);
 80080b0:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80080b2:	a905      	add	r1, sp, #20
 80080b4:	aa04      	add	r2, sp, #16
  test_set_step(2);
 80080b6:	602b      	str	r3, [r5, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80080b8:	f7fd fe32 	bl	8005d20 <chHeapStatus>
 80080bc:	4604      	mov	r4, r0
    test_assert(n1 == 1, "heap fragmented");
 80080be:	f1a0 0001 	sub.w	r0, r0, #1
 80080c2:	fab0 f080 	clz	r0, r0
 80080c6:	4941      	ldr	r1, [pc, #260]	; (80081cc <rt_test_010_001_execute+0x12c>)
 80080c8:	0940      	lsrs	r0, r0, #5
 80080ca:	f7f8 fda9 	bl	8000c20 <_test_assert>
 80080ce:	b110      	cbz	r0, 80080d6 <rt_test_010_001_execute+0x36>
}
 80080d0:	b006      	add	sp, #24
 80080d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    threads[0] = chThdCreateFromHeap(&heap1,
 80080d6:	4b3e      	ldr	r3, [pc, #248]	; (80081d0 <rt_test_010_001_execute+0x130>)
 80080d8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8008208 <rt_test_010_001_execute+0x168>
 80080dc:	4a3d      	ldr	r2, [pc, #244]	; (80081d4 <rt_test_010_001_execute+0x134>)
 80080de:	483a      	ldr	r0, [pc, #232]	; (80081c8 <rt_test_010_001_execute+0x128>)
 80080e0:	4f3d      	ldr	r7, [pc, #244]	; (80081d8 <rt_test_010_001_execute+0x138>)
  test_set_step(3);
 80080e2:	2103      	movs	r1, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 80080e4:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(3);
 80080e8:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 80080ea:	1e73      	subs	r3, r6, #1
 80080ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80080f0:	f7fc fd56 	bl	8004ba0 <chThdCreateFromHeap>
 80080f4:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 80080f6:	3800      	subs	r0, #0
 80080f8:	bf18      	it	ne
 80080fa:	2001      	movne	r0, #1
 80080fc:	4937      	ldr	r1, [pc, #220]	; (80081dc <rt_test_010_001_execute+0x13c>)
 80080fe:	f7f8 fd8f 	bl	8000c20 <_test_assert>
 8008102:	2800      	cmp	r0, #0
 8008104:	d1e4      	bne.n	80080d0 <rt_test_010_001_execute+0x30>
    threads[1] = chThdCreateFromHeap(&heap1,
 8008106:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <rt_test_010_001_execute+0x140>)
 8008108:	4a36      	ldr	r2, [pc, #216]	; (80081e4 <rt_test_010_001_execute+0x144>)
 800810a:	482f      	ldr	r0, [pc, #188]	; (80081c8 <rt_test_010_001_execute+0x128>)
  test_set_step(4);
 800810c:	2104      	movs	r1, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800810e:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(4);
 8008112:	6029      	str	r1, [r5, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8008114:	1eb3      	subs	r3, r6, #2
 8008116:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800811a:	f7fc fd41 	bl	8004ba0 <chThdCreateFromHeap>
 800811e:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8008120:	3800      	subs	r0, #0
 8008122:	bf18      	it	ne
 8008124:	2001      	movne	r0, #1
 8008126:	492d      	ldr	r1, [pc, #180]	; (80081dc <rt_test_010_001_execute+0x13c>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8008128:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 800812a:	f7f8 fd79 	bl	8000c20 <_test_assert>
 800812e:	2800      	cmp	r0, #0
 8008130:	d1ce      	bne.n	80080d0 <rt_test_010_001_execute+0x30>
    threads[2] = chThdCreateFromHeap(&heap1,
 8008132:	4a2d      	ldr	r2, [pc, #180]	; (80081e8 <rt_test_010_001_execute+0x148>)
 8008134:	9201      	str	r2, [sp, #4]
  test_set_step(5);
 8008136:	2105      	movs	r1, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8008138:	1ef3      	subs	r3, r6, #3
  test_set_step(5);
 800813a:	6029      	str	r1, [r5, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 800813c:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <rt_test_010_001_execute+0x14c>)
 800813e:	4822      	ldr	r0, [pc, #136]	; (80081c8 <rt_test_010_001_execute+0x128>)
 8008140:	f8cd 8000 	str.w	r8, [sp]
 8008144:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008148:	f7fc fd2a 	bl	8004ba0 <chThdCreateFromHeap>
 800814c:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 800814e:	fab0 f080 	clz	r0, r0
 8008152:	4927      	ldr	r1, [pc, #156]	; (80081f0 <rt_test_010_001_execute+0x150>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8008154:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8008156:	0940      	lsrs	r0, r0, #5
 8008158:	f7f8 fd62 	bl	8000c20 <_test_assert>
 800815c:	2800      	cmp	r0, #0
 800815e:	d1b7      	bne.n	80080d0 <rt_test_010_001_execute+0x30>
  test_set_step(6);
 8008160:	2306      	movs	r3, #6
 8008162:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8008164:	f7ff fc7c 	bl	8007a60 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8008168:	4922      	ldr	r1, [pc, #136]	; (80081f4 <rt_test_010_001_execute+0x154>)
 800816a:	4823      	ldr	r0, [pc, #140]	; (80081f8 <rt_test_010_001_execute+0x158>)
 800816c:	f7f8 fed8 	bl	8000f20 <_test_assert_sequence>
 8008170:	2800      	cmp	r0, #0
 8008172:	d1ad      	bne.n	80080d0 <rt_test_010_001_execute+0x30>
  test_set_step(7);
 8008174:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8008176:	a903      	add	r1, sp, #12
 8008178:	4813      	ldr	r0, [pc, #76]	; (80081c8 <rt_test_010_001_execute+0x128>)
  test_set_step(7);
 800817a:	602b      	str	r3, [r5, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800817c:	aa02      	add	r2, sp, #8
 800817e:	f7fd fdcf 	bl	8005d20 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8008182:	1a20      	subs	r0, r4, r0
 8008184:	fab0 f080 	clz	r0, r0
 8008188:	491c      	ldr	r1, [pc, #112]	; (80081fc <rt_test_010_001_execute+0x15c>)
 800818a:	0940      	lsrs	r0, r0, #5
 800818c:	f7f8 fd48 	bl	8000c20 <_test_assert>
 8008190:	2800      	cmp	r0, #0
 8008192:	d19d      	bne.n	80080d0 <rt_test_010_001_execute+0x30>
    test_assert(total1 == total2, "total free space changed");
 8008194:	9805      	ldr	r0, [sp, #20]
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	4919      	ldr	r1, [pc, #100]	; (8008200 <rt_test_010_001_execute+0x160>)
 800819a:	1ac0      	subs	r0, r0, r3
 800819c:	fab0 f080 	clz	r0, r0
 80081a0:	0940      	lsrs	r0, r0, #5
 80081a2:	f7f8 fd3d 	bl	8000c20 <_test_assert>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d192      	bne.n	80080d0 <rt_test_010_001_execute+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 80081aa:	9804      	ldr	r0, [sp, #16]
 80081ac:	9b02      	ldr	r3, [sp, #8]
 80081ae:	4915      	ldr	r1, [pc, #84]	; (8008204 <rt_test_010_001_execute+0x164>)
 80081b0:	1ac0      	subs	r0, r0, r3
 80081b2:	fab0 f080 	clz	r0, r0
 80081b6:	0940      	lsrs	r0, r0, #5
 80081b8:	f7f8 fd32 	bl	8000c20 <_test_assert>
 80081bc:	e788      	b.n	80080d0 <rt_test_010_001_execute+0x30>
 80081be:	bf00      	nop
 80081c0:	200009b0 	.word	0x200009b0
 80081c4:	20001cac 	.word	0x20001cac
 80081c8:	200013b8 	.word	0x200013b8
 80081cc:	0800b3f4 	.word	0x0800b3f4
 80081d0:	0800b2bc 	.word	0x0800b2bc
 80081d4:	0800b634 	.word	0x0800b634
 80081d8:	20001cc4 	.word	0x20001cc4
 80081dc:	0800b660 	.word	0x0800b660
 80081e0:	0800b2c0 	.word	0x0800b2c0
 80081e4:	0800b63c 	.word	0x0800b63c
 80081e8:	0800b644 	.word	0x0800b644
 80081ec:	0800b648 	.word	0x0800b648
 80081f0:	0800b678 	.word	0x0800b678
 80081f4:	0800a0d4 	.word	0x0800a0d4
 80081f8:	0800b6b8 	.word	0x0800b6b8
 80081fc:	0800b6bc 	.word	0x0800b6bc
 8008200:	0800b6d4 	.word	0x0800b6d4
 8008204:	0800b6f0 	.word	0x0800b6f0
 8008208:	08000ea1 	.word	0x08000ea1
 800820c:	00000000 	.word	0x00000000

08008210 <rt_test_009_007_execute>:

static void rt_test_009_007_execute(void) {
 8008210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [9.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8008214:	4d39      	ldr	r5, [pc, #228]	; (80082fc <rt_test_009_007_execute+0xec>)
 8008216:	2301      	movs	r3, #1
static void rt_test_009_007_execute(void) {
 8008218:	b08a      	sub	sp, #40	; 0x28
  test_set_step(1);
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	2420      	movs	r4, #32
 800821e:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 8008222:	4f37      	ldr	r7, [pc, #220]	; (8008300 <rt_test_009_007_execute+0xf0>)
  elp->listener = currp;
 8008224:	4e37      	ldr	r6, [pc, #220]	; (8008304 <rt_test_009_007_execute+0xf4>)
  elp->next     = esp->next;
 8008226:	6839      	ldr	r1, [r7, #0]
  elp->listener = currp;
 8008228:	69b2      	ldr	r2, [r6, #24]
  elp->events   = events;
 800822a:	9307      	str	r3, [sp, #28]
  esp->next     = elp;
 800822c:	f10d 0a14 	add.w	sl, sp, #20
  elp->flags    = (eventflags_t)0;
 8008230:	2300      	movs	r3, #0
  elp->wflags   = wflags;
 8008232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 8008236:	e9cd 1205 	strd	r1, r2, [sp, #20]
  elp->wflags   = wflags;
 800823a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  esp->next     = elp;
 800823e:	f8c7 a000 	str.w	sl, [r7]
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 800824a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008320 <rt_test_009_007_execute+0x110>
  elp->listener = currp;
 800824e:	69b2      	ldr	r2, [r6, #24]
  elp->next     = esp->next;
 8008250:	f8d8 1000 	ldr.w	r1, [r8]
  elp->flags    = (eventflags_t)0;
 8008254:	9303      	str	r3, [sp, #12]
  elp->events   = events;
 8008256:	f04f 0904 	mov.w	r9, #4
  elp->listener = currp;
 800825a:	e9cd 1200 	strd	r1, r2, [sp]
  elp->wflags   = wflags;
 800825e:	9004      	str	r0, [sp, #16]
  esp->next     = elp;
 8008260:	f8c8 d000 	str.w	sp, [r8]
  elp->events   = events;
 8008264:	f8cd 9008 	str.w	r9, [sp, #8]
 8008268:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 800826c:	2302      	movs	r3, #2
 800826e:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008270:	f7fc f826 	bl	80042c0 <test_wait_tick>
 8008274:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <rt_test_009_007_execute+0xf8>)
 8008278:	6891      	ldr	r1, [r2, #8]
 800827a:	4a24      	ldr	r2, [pc, #144]	; (800830c <rt_test_009_007_execute+0xfc>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800827c:	4604      	mov	r4, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800827e:	3901      	subs	r1, #1
 8008280:	4823      	ldr	r0, [pc, #140]	; (8008310 <rt_test_009_007_execute+0x100>)
 8008282:	f7fa fe55 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008286:	4b23      	ldr	r3, [pc, #140]	; (8008314 <rt_test_009_007_execute+0x104>)
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8008288:	2203      	movs	r2, #3
 800828a:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800828c:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 800828e:	f7fa ffe7 	bl	8003260 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 8008292:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8008296:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 800829a:	f7f8 fa61 	bl	8000760 <_test_assert_time_window.constprop.0>
 800829e:	b110      	cbz	r0, 80082a6 <rt_test_009_007_execute+0x96>
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 80082a0:	b00a      	add	sp, #40	; 0x28
 80082a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80082a6:	f7f8 fa4b 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80082aa:	fab0 f080 	clz	r0, r0
 80082ae:	491a      	ldr	r1, [pc, #104]	; (8008318 <rt_test_009_007_execute+0x108>)
 80082b0:	0940      	lsrs	r0, r0, #5
 80082b2:	f7f8 fcb5 	bl	8000c20 <_test_assert>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d1f2      	bne.n	80082a0 <rt_test_009_007_execute+0x90>
    test_wait_threads();
 80082ba:	f7ff fbd1 	bl	8007a60 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 80082be:	4651      	mov	r1, sl
 80082c0:	4638      	mov	r0, r7
  test_set_step(4);
 80082c2:	f8c5 9000 	str.w	r9, [r5]
    chEvtUnregister(&es1, &el1);
 80082c6:	f7f8 ff5b 	bl	8001180 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 80082ca:	4669      	mov	r1, sp
 80082cc:	4640      	mov	r0, r8
 80082ce:	f7f8 ff57 	bl	8001180 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 80082d2:	6838      	ldr	r0, [r7, #0]
 80082d4:	4911      	ldr	r1, [pc, #68]	; (800831c <rt_test_009_007_execute+0x10c>)
 80082d6:	1bc0      	subs	r0, r0, r7
 80082d8:	fab0 f080 	clz	r0, r0
 80082dc:	0940      	lsrs	r0, r0, #5
 80082de:	f7f8 fc9f 	bl	8000c20 <_test_assert>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d1dc      	bne.n	80082a0 <rt_test_009_007_execute+0x90>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 80082e6:	f8d8 0000 	ldr.w	r0, [r8]
 80082ea:	490c      	ldr	r1, [pc, #48]	; (800831c <rt_test_009_007_execute+0x10c>)
 80082ec:	eba0 0008 	sub.w	r0, r0, r8
 80082f0:	fab0 f080 	clz	r0, r0
 80082f4:	0940      	lsrs	r0, r0, #5
 80082f6:	f7f8 fc93 	bl	8000c20 <_test_assert>
 80082fa:	e7d1      	b.n	80082a0 <rt_test_009_007_execute+0x90>
 80082fc:	20001cac 	.word	0x20001cac
 8008300:	20000808 	.word	0x20000808
 8008304:	200009b0 	.word	0x200009b0
 8008308:	0800b2bc 	.word	0x0800b2bc
 800830c:	08004081 	.word	0x08004081
 8008310:	20001598 	.word	0x20001598
 8008314:	20001cc4 	.word	0x20001cc4
 8008318:	0800b710 	.word	0x0800b710
 800831c:	0800a130 	.word	0x0800a130
 8008320:	2000080c 	.word	0x2000080c
	...

08008330 <rt_test_009_005_execute>:
static void rt_test_009_005_execute(void) {
 8008330:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8008332:	2005      	movs	r0, #5
  test_set_step(2);
 8008334:	4c28      	ldr	r4, [pc, #160]	; (80083d8 <rt_test_009_005_execute+0xa8>)
    chEvtAddEvents(5);
 8008336:	f7f8 ff13 	bl	8001160 <chEvtAddEvents>
  test_set_step(2);
 800833a:	2302      	movs	r3, #2
 800833c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 800833e:	f7fa ff8f 	bl	8003260 <chEvtWaitAll.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8008342:	f1a0 0005 	sub.w	r0, r0, #5
 8008346:	fab0 f080 	clz	r0, r0
 800834a:	4924      	ldr	r1, [pc, #144]	; (80083dc <rt_test_009_005_execute+0xac>)
 800834c:	0940      	lsrs	r0, r0, #5
 800834e:	f7f8 fc67 	bl	8000c20 <_test_assert>
 8008352:	b100      	cbz	r0, 8008356 <rt_test_009_005_execute+0x26>
}
 8008354:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008356:	f7f8 f9f3 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800835a:	fab0 f080 	clz	r0, r0
 800835e:	4920      	ldr	r1, [pc, #128]	; (80083e0 <rt_test_009_005_execute+0xb0>)
 8008360:	0940      	lsrs	r0, r0, #5
 8008362:	f7f8 fc5d 	bl	8000c20 <_test_assert>
 8008366:	2800      	cmp	r0, #0
 8008368:	d1f4      	bne.n	8008354 <rt_test_009_005_execute+0x24>
    chEvtAddEvents(4);
 800836a:	2004      	movs	r0, #4
 800836c:	f7f8 fef8 	bl	8001160 <chEvtAddEvents>
  test_set_step(4);
 8008370:	2304      	movs	r3, #4
 8008372:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008374:	f7fb ffa4 	bl	80042c0 <test_wait_tick>
  return ch.rlist.current;
 8008378:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <rt_test_009_005_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800837a:	4a1b      	ldr	r2, [pc, #108]	; (80083e8 <rt_test_009_005_execute+0xb8>)
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008380:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008382:	3901      	subs	r1, #1
 8008384:	4819      	ldr	r0, [pc, #100]	; (80083ec <rt_test_009_005_execute+0xbc>)
 8008386:	f7fa fdd3 	bl	8002f30 <chThdCreateStatic.constprop.0>
 800838a:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <rt_test_009_005_execute+0xc0>)
  test_set_step(5);
 800838c:	2305      	movs	r3, #5
 800838e:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008390:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 8008392:	f7fa ff65 	bl	8003260 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 8008396:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 800839a:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 800839c:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 80083a0:	f7f8 f9de 	bl	8000760 <_test_assert_time_window.constprop.0>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d1d5      	bne.n	8008354 <rt_test_009_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 80083a8:	f1a4 0005 	sub.w	r0, r4, #5
 80083ac:	fab0 f080 	clz	r0, r0
 80083b0:	4910      	ldr	r1, [pc, #64]	; (80083f4 <rt_test_009_005_execute+0xc4>)
 80083b2:	0940      	lsrs	r0, r0, #5
 80083b4:	f7f8 fc34 	bl	8000c20 <_test_assert>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d1cb      	bne.n	8008354 <rt_test_009_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80083bc:	f7f8 f9c0 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80083c0:	fab0 f080 	clz	r0, r0
 80083c4:	4906      	ldr	r1, [pc, #24]	; (80083e0 <rt_test_009_005_execute+0xb0>)
 80083c6:	0940      	lsrs	r0, r0, #5
 80083c8:	f7f8 fc2a 	bl	8000c20 <_test_assert>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d1c1      	bne.n	8008354 <rt_test_009_005_execute+0x24>
}
 80083d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 80083d4:	f7ff bb44 	b.w	8007a60 <test_wait_threads>
 80083d8:	20001cac 	.word	0x20001cac
 80083dc:	0800b71c 	.word	0x0800b71c
 80083e0:	0800b710 	.word	0x0800b710
 80083e4:	200009b0 	.word	0x200009b0
 80083e8:	080040c1 	.word	0x080040c1
 80083ec:	20001598 	.word	0x20001598
 80083f0:	20001cc4 	.word	0x20001cc4
 80083f4:	0800b734 	.word	0x0800b734
	...

08008400 <rt_test_009_004_execute>:
static void rt_test_009_004_execute(void) {
 8008400:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8008402:	2005      	movs	r0, #5
  test_set_step(2);
 8008404:	4c27      	ldr	r4, [pc, #156]	; (80084a4 <rt_test_009_004_execute+0xa4>)
    chEvtAddEvents(5);
 8008406:	f7f8 feab 	bl	8001160 <chEvtAddEvents>
  test_set_step(2);
 800840a:	2302      	movs	r3, #2
 800840c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 800840e:	f7fa ff07 	bl	8003220 <chEvtWaitAny.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8008412:	f1a0 0005 	sub.w	r0, r0, #5
 8008416:	fab0 f080 	clz	r0, r0
 800841a:	4923      	ldr	r1, [pc, #140]	; (80084a8 <rt_test_009_004_execute+0xa8>)
 800841c:	0940      	lsrs	r0, r0, #5
 800841e:	f7f8 fbff 	bl	8000c20 <_test_assert>
 8008422:	b100      	cbz	r0, 8008426 <rt_test_009_004_execute+0x26>
}
 8008424:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008426:	f7f8 f98b 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800842a:	fab0 f080 	clz	r0, r0
 800842e:	491f      	ldr	r1, [pc, #124]	; (80084ac <rt_test_009_004_execute+0xac>)
 8008430:	0940      	lsrs	r0, r0, #5
 8008432:	f7f8 fbf5 	bl	8000c20 <_test_assert>
 8008436:	2800      	cmp	r0, #0
 8008438:	d1f4      	bne.n	8008424 <rt_test_009_004_execute+0x24>
  test_set_step(3);
 800843a:	2303      	movs	r3, #3
 800843c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800843e:	f7fb ff3f 	bl	80042c0 <test_wait_tick>
 8008442:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <rt_test_009_004_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008444:	4a1b      	ldr	r2, [pc, #108]	; (80084b4 <rt_test_009_004_execute+0xb4>)
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800844a:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800844c:	3901      	subs	r1, #1
 800844e:	481a      	ldr	r0, [pc, #104]	; (80084b8 <rt_test_009_004_execute+0xb8>)
 8008450:	f7fa fd6e 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008454:	4a19      	ldr	r2, [pc, #100]	; (80084bc <rt_test_009_004_execute+0xbc>)
  test_set_step(4);
 8008456:	2304      	movs	r3, #4
 8008458:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800845a:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 800845c:	f7fa fee0 	bl	8003220 <chEvtWaitAny.constprop.0>
    test_assert_time_window(target_time,
 8008460:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8008464:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008466:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800846a:	f7f8 f979 	bl	8000760 <_test_assert_time_window.constprop.0>
 800846e:	2800      	cmp	r0, #0
 8008470:	d1d8      	bne.n	8008424 <rt_test_009_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 8008472:	f1a4 0001 	sub.w	r0, r4, #1
 8008476:	fab0 f080 	clz	r0, r0
 800847a:	4911      	ldr	r1, [pc, #68]	; (80084c0 <rt_test_009_004_execute+0xc0>)
 800847c:	0940      	lsrs	r0, r0, #5
 800847e:	f7f8 fbcf 	bl	8000c20 <_test_assert>
 8008482:	2800      	cmp	r0, #0
 8008484:	d1ce      	bne.n	8008424 <rt_test_009_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008486:	f7f8 f95b 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800848a:	fab0 f080 	clz	r0, r0
 800848e:	4907      	ldr	r1, [pc, #28]	; (80084ac <rt_test_009_004_execute+0xac>)
 8008490:	0940      	lsrs	r0, r0, #5
 8008492:	f7f8 fbc5 	bl	8000c20 <_test_assert>
 8008496:	2800      	cmp	r0, #0
 8008498:	d1c4      	bne.n	8008424 <rt_test_009_004_execute+0x24>
}
 800849a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800849e:	f7ff badf 	b.w	8007a60 <test_wait_threads>
 80084a2:	bf00      	nop
 80084a4:	20001cac 	.word	0x20001cac
 80084a8:	0800b71c 	.word	0x0800b71c
 80084ac:	0800b710 	.word	0x0800b710
 80084b0:	200009b0 	.word	0x200009b0
 80084b4:	080040c1 	.word	0x080040c1
 80084b8:	20001598 	.word	0x20001598
 80084bc:	20001cc4 	.word	0x20001cc4
 80084c0:	0800b748 	.word	0x0800b748
	...

080084d0 <rt_test_009_003_execute>:
static void rt_test_009_003_execute(void) {
 80084d0:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 80084d2:	2007      	movs	r0, #7
  test_set_step(2);
 80084d4:	4c33      	ldr	r4, [pc, #204]	; (80085a4 <rt_test_009_003_execute+0xd4>)
    chEvtAddEvents(7);
 80084d6:	f7f8 fe43 	bl	8001160 <chEvtAddEvents>
  test_set_step(2);
 80084da:	2302      	movs	r3, #2
 80084dc:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80084de:	f7fa fe7f 	bl	80031e0 <chEvtWaitOne.constprop.0>
    test_assert(m == 1, "single event error");
 80084e2:	f1a0 0001 	sub.w	r0, r0, #1
 80084e6:	fab0 f080 	clz	r0, r0
 80084ea:	492f      	ldr	r1, [pc, #188]	; (80085a8 <rt_test_009_003_execute+0xd8>)
 80084ec:	0940      	lsrs	r0, r0, #5
 80084ee:	f7f8 fb97 	bl	8000c20 <_test_assert>
 80084f2:	b100      	cbz	r0, 80084f6 <rt_test_009_003_execute+0x26>
}
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 80084f6:	f7fa fe73 	bl	80031e0 <chEvtWaitOne.constprop.0>
    test_assert(m == 2, "single event error");
 80084fa:	f1a0 0002 	sub.w	r0, r0, #2
 80084fe:	fab0 f080 	clz	r0, r0
 8008502:	4929      	ldr	r1, [pc, #164]	; (80085a8 <rt_test_009_003_execute+0xd8>)
 8008504:	0940      	lsrs	r0, r0, #5
 8008506:	f7f8 fb8b 	bl	8000c20 <_test_assert>
 800850a:	2800      	cmp	r0, #0
 800850c:	d1f2      	bne.n	80084f4 <rt_test_009_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 800850e:	f7fa fe67 	bl	80031e0 <chEvtWaitOne.constprop.0>
    test_assert(m == 4, "single event error");
 8008512:	f1a0 0004 	sub.w	r0, r0, #4
 8008516:	fab0 f080 	clz	r0, r0
 800851a:	4923      	ldr	r1, [pc, #140]	; (80085a8 <rt_test_009_003_execute+0xd8>)
 800851c:	0940      	lsrs	r0, r0, #5
 800851e:	f7f8 fb7f 	bl	8000c20 <_test_assert>
 8008522:	2800      	cmp	r0, #0
 8008524:	d1e6      	bne.n	80084f4 <rt_test_009_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008526:	f7f8 f90b 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800852a:	fab0 f080 	clz	r0, r0
 800852e:	491f      	ldr	r1, [pc, #124]	; (80085ac <rt_test_009_003_execute+0xdc>)
 8008530:	0940      	lsrs	r0, r0, #5
 8008532:	f7f8 fb75 	bl	8000c20 <_test_assert>
 8008536:	2800      	cmp	r0, #0
 8008538:	d1dc      	bne.n	80084f4 <rt_test_009_003_execute+0x24>
  test_set_step(3);
 800853a:	2303      	movs	r3, #3
 800853c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800853e:	f7fb febf 	bl	80042c0 <test_wait_tick>
 8008542:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <rt_test_009_003_execute+0xe0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008544:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <rt_test_009_003_execute+0xe4>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800854a:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800854c:	3901      	subs	r1, #1
 800854e:	481a      	ldr	r0, [pc, #104]	; (80085b8 <rt_test_009_003_execute+0xe8>)
 8008550:	f7fa fcee 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008554:	4a19      	ldr	r2, [pc, #100]	; (80085bc <rt_test_009_003_execute+0xec>)
  test_set_step(4);
 8008556:	2304      	movs	r3, #4
 8008558:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800855a:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 800855c:	f7fa fe40 	bl	80031e0 <chEvtWaitOne.constprop.0>
    test_assert_time_window(target_time,
 8008560:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8008564:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8008566:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800856a:	f7f8 f8f9 	bl	8000760 <_test_assert_time_window.constprop.0>
 800856e:	2800      	cmp	r0, #0
 8008570:	d1c0      	bne.n	80084f4 <rt_test_009_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 8008572:	f1a4 0001 	sub.w	r0, r4, #1
 8008576:	fab0 f080 	clz	r0, r0
 800857a:	4911      	ldr	r1, [pc, #68]	; (80085c0 <rt_test_009_003_execute+0xf0>)
 800857c:	0940      	lsrs	r0, r0, #5
 800857e:	f7f8 fb4f 	bl	8000c20 <_test_assert>
 8008582:	2800      	cmp	r0, #0
 8008584:	d1b6      	bne.n	80084f4 <rt_test_009_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008586:	f7f8 f8db 	bl	8000740 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 800858a:	fab0 f080 	clz	r0, r0
 800858e:	4907      	ldr	r1, [pc, #28]	; (80085ac <rt_test_009_003_execute+0xdc>)
 8008590:	0940      	lsrs	r0, r0, #5
 8008592:	f7f8 fb45 	bl	8000c20 <_test_assert>
 8008596:	2800      	cmp	r0, #0
 8008598:	d1ac      	bne.n	80084f4 <rt_test_009_003_execute+0x24>
}
 800859a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800859e:	f7ff ba5f 	b.w	8007a60 <test_wait_threads>
 80085a2:	bf00      	nop
 80085a4:	20001cac 	.word	0x20001cac
 80085a8:	0800b75c 	.word	0x0800b75c
 80085ac:	0800b710 	.word	0x0800b710
 80085b0:	200009b0 	.word	0x200009b0
 80085b4:	080040c1 	.word	0x080040c1
 80085b8:	20001598 	.word	0x20001598
 80085bc:	20001cc4 	.word	0x20001cc4
 80085c0:	0800b748 	.word	0x0800b748
	...

080085d0 <rt_test_008_001_execute>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	4b16      	ldr	r3, [pc, #88]	; (800862c <rt_test_008_001_execute+0x5c>)
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 80085d4:	4c16      	ldr	r4, [pc, #88]	; (8008630 <rt_test_008_001_execute+0x60>)
 80085d6:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80085d8:	4a16      	ldr	r2, [pc, #88]	; (8008634 <rt_test_008_001_execute+0x64>)
 80085da:	6899      	ldr	r1, [r3, #8]
 80085dc:	4816      	ldr	r0, [pc, #88]	; (8008638 <rt_test_008_001_execute+0x68>)
 80085de:	3101      	adds	r1, #1
  test_set_step(1);
 80085e0:	2501      	movs	r5, #1
 80085e2:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80085e4:	f7fa fca4 	bl	8002f30 <chThdCreateStatic.constprop.0>
 80085e8:	4a14      	ldr	r2, [pc, #80]	; (800863c <rt_test_008_001_execute+0x6c>)
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 80085ea:	2302      	movs	r3, #2
 80085ec:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80085ee:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80085f0:	2404      	movs	r4, #4
 80085f2:	2720      	movs	r7, #32
 80085f4:	2600      	movs	r6, #0
 80085f6:	f387 8811 	msr	BASEPRI, r7
  tp = chMsgWaitS();
 80085fa:	f7fc f8f9 	bl	80047f0 <chMsgWaitS>
 80085fe:	f386 8811 	msr	BASEPRI, r6
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
 8008602:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008604:	f387 8811 	msr	BASEPRI, r7
  chSchWakeupS(tp, msg);
 8008608:	4629      	mov	r1, r5
 800860a:	f7fa fc59 	bl	8002ec0 <chSchWakeupS>
 800860e:	f386 8811 	msr	BASEPRI, r6
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8008612:	b2e8      	uxtb	r0, r5
 8008614:	f7f8 fbac 	bl	8000d70 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8008618:	3c01      	subs	r4, #1
 800861a:	d1ec      	bne.n	80085f6 <rt_test_008_001_execute+0x26>
    }
    test_wait_threads();
 800861c:	f7ff fa20 	bl	8007a60 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
  test_end_step(2);
}
 8008620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8008624:	4906      	ldr	r1, [pc, #24]	; (8008640 <rt_test_008_001_execute+0x70>)
 8008626:	4807      	ldr	r0, [pc, #28]	; (8008644 <rt_test_008_001_execute+0x74>)
 8008628:	f7f8 bc7a 	b.w	8000f20 <_test_assert_sequence>
 800862c:	200009b0 	.word	0x200009b0
 8008630:	20001cac 	.word	0x20001cac
 8008634:	080048e1 	.word	0x080048e1
 8008638:	20001598 	.word	0x20001598
 800863c:	20001cc4 	.word	0x20001cc4
 8008640:	0800a0d4 	.word	0x0800a0d4
 8008644:	0800b0a8 	.word	0x0800b0a8
	...

08008650 <rt_test_007_009_execute>:

static void rt_test_007_009_execute(void) {
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	4b1e      	ldr	r3, [pc, #120]	; (80086cc <rt_test_007_009_execute+0x7c>)

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008654:	4e1e      	ldr	r6, [pc, #120]	; (80086d0 <rt_test_007_009_execute+0x80>)
  return chThdGetSelfX()->prio;
 8008656:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 8008658:	4c1e      	ldr	r4, [pc, #120]	; (80086d4 <rt_test_007_009_execute+0x84>)
 800865a:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800865c:	4a1e      	ldr	r2, [pc, #120]	; (80086d8 <rt_test_007_009_execute+0x88>)
 800865e:	4b1f      	ldr	r3, [pc, #124]	; (80086dc <rt_test_007_009_execute+0x8c>)
 8008660:	4d1f      	ldr	r5, [pc, #124]	; (80086e0 <rt_test_007_009_execute+0x90>)
 8008662:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 8008664:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008668:	4630      	mov	r0, r6
  test_set_step(2);
 800866a:	f8c4 c000 	str.w	ip, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800866e:	f7fa fc5f 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008672:	4602      	mov	r2, r0
  }
  test_end_step(2);

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8008674:	f04f 0c03 	mov.w	ip, #3
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008678:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800867a:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800867c:	4b19      	ldr	r3, [pc, #100]	; (80086e4 <rt_test_007_009_execute+0x94>)
 800867e:	4a1a      	ldr	r2, [pc, #104]	; (80086e8 <rt_test_007_009_execute+0x98>)
  test_set_step(3);
 8008680:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008684:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008688:	f7fa fc52 	bl	8002f30 <chThdCreateStatic.constprop.0>

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800868c:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800868e:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008690:	4a16      	ldr	r2, [pc, #88]	; (80086ec <rt_test_007_009_execute+0x9c>)
 8008692:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <rt_test_007_009_execute+0xa0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008694:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008698:	f506 7024 	add.w	r0, r6, #656	; 0x290
  test_set_step(4);
 800869c:	2604      	movs	r6, #4
 800869e:	6026      	str	r6, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80086a0:	f7fa fc46 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 80086a4:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80086a6:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 80086a8:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 80086aa:	f7fa fc81 	bl	8002fb0 <chCondSignal.constprop.0>
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 80086ae:	2306      	movs	r3, #6
 80086b0:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 80086b2:	f7fa fc7d 	bl	8002fb0 <chCondSignal.constprop.0>
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 80086b6:	2307      	movs	r3, #7
 80086b8:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 80086ba:	f7ff f9d1 	bl	8007a60 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(7);
}
 80086be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80086c2:	490c      	ldr	r1, [pc, #48]	; (80086f4 <rt_test_007_009_execute+0xa4>)
 80086c4:	480c      	ldr	r0, [pc, #48]	; (80086f8 <rt_test_007_009_execute+0xa8>)
 80086c6:	f7f8 bc2b 	b.w	8000f20 <_test_assert_sequence>
 80086ca:	bf00      	nop
 80086cc:	200009b0 	.word	0x200009b0
 80086d0:	20001598 	.word	0x20001598
 80086d4:	20001cac 	.word	0x20001cac
 80086d8:	080056e1 	.word	0x080056e1
 80086dc:	0800b2bc 	.word	0x0800b2bc
 80086e0:	20001cc4 	.word	0x20001cc4
 80086e4:	0800b644 	.word	0x0800b644
 80086e8:	08005771 	.word	0x08005771
 80086ec:	080057e1 	.word	0x080057e1
 80086f0:	0800b2c0 	.word	0x0800b2c0
 80086f4:	0800a0d4 	.word	0x0800a0d4
 80086f8:	0800a0e8 	.word	0x0800a0e8
 80086fc:	00000000 	.word	0x00000000

08008700 <rt_test_007_008_execute>:
static void rt_test_007_008_execute(void) {
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8008702:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <rt_test_007_008_execute+0xa4>)
  test_set_step(1);
 8008704:	4e28      	ldr	r6, [pc, #160]	; (80087a8 <rt_test_007_008_execute+0xa8>)
  return chThdGetSelfX()->prio;
 8008706:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008708:	4828      	ldr	r0, [pc, #160]	; (80087ac <rt_test_007_008_execute+0xac>)
 800870a:	6895      	ldr	r5, [r2, #8]
 800870c:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <rt_test_007_008_execute+0xb0>)
 800870e:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <rt_test_007_008_execute+0xb4>)
 8008710:	4c29      	ldr	r4, [pc, #164]	; (80087b8 <rt_test_007_008_execute+0xb8>)
 8008712:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8008714:	2701      	movs	r7, #1
 8008716:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008718:	f7fa fc0a 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800871c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800871e:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008720:	4b26      	ldr	r3, [pc, #152]	; (80087bc <rt_test_007_008_execute+0xbc>)
 8008722:	4a24      	ldr	r2, [pc, #144]	; (80087b4 <rt_test_007_008_execute+0xb4>)
 8008724:	4826      	ldr	r0, [pc, #152]	; (80087c0 <rt_test_007_008_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008726:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008728:	f7fa fc02 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800872c:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800872e:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008730:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <rt_test_007_008_execute+0xc4>)
 8008732:	4a20      	ldr	r2, [pc, #128]	; (80087b4 <rt_test_007_008_execute+0xb4>)
 8008734:	4824      	ldr	r0, [pc, #144]	; (80087c8 <rt_test_007_008_execute+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008736:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008738:	f7fa fbfa 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800873c:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800873e:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008740:	4b22      	ldr	r3, [pc, #136]	; (80087cc <rt_test_007_008_execute+0xcc>)
 8008742:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <rt_test_007_008_execute+0xb4>)
 8008744:	4822      	ldr	r0, [pc, #136]	; (80087d0 <rt_test_007_008_execute+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008746:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008748:	f7fa fbf2 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800874c:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <rt_test_007_008_execute+0xd4>)
 800874e:	4a19      	ldr	r2, [pc, #100]	; (80087b4 <rt_test_007_008_execute+0xb4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008750:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008752:	1d69      	adds	r1, r5, #5
 8008754:	4820      	ldr	r0, [pc, #128]	; (80087d8 <rt_test_007_008_execute+0xd8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008756:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008758:	f7fa fbea 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800875c:	2302      	movs	r3, #2
 800875e:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008760:	6120      	str	r0, [r4, #16]
 8008762:	2320      	movs	r3, #32
 8008764:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008768:	4c1c      	ldr	r4, [pc, #112]	; (80087dc <rt_test_007_008_execute+0xdc>)
 800876a:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 800876c:	42a3      	cmp	r3, r4
 800876e:	d00b      	beq.n	8008788 <rt_test_007_008_execute+0x88>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8008770:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	6022      	str	r2, [r4, #0]
 8008778:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 800877a:	6054      	str	r4, [r2, #4]
 800877c:	f7f8 fe40 	bl	8001400 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8008784:	42a3      	cmp	r3, r4
 8008786:	d1f5      	bne.n	8008774 <rt_test_007_008_execute+0x74>
  chSchRescheduleS();
 8008788:	f7fa f8d2 	bl	8002930 <chSchRescheduleS>
 800878c:	2300      	movs	r3, #0
 800878e:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008792:	f7ff f965 	bl	8007a60 <test_wait_threads>
}
 8008796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800879a:	4911      	ldr	r1, [pc, #68]	; (80087e0 <rt_test_007_008_execute+0xe0>)
 800879c:	4811      	ldr	r0, [pc, #68]	; (80087e4 <rt_test_007_008_execute+0xe4>)
 800879e:	f7f8 bbbf 	b.w	8000f20 <_test_assert_sequence>
 80087a2:	bf00      	nop
 80087a4:	200009b0 	.word	0x200009b0
 80087a8:	20001cac 	.word	0x20001cac
 80087ac:	20001598 	.word	0x20001598
 80087b0:	0800b774 	.word	0x0800b774
 80087b4:	08005771 	.word	0x08005771
 80087b8:	20001cc4 	.word	0x20001cc4
 80087bc:	0800c1e4 	.word	0x0800c1e4
 80087c0:	200016e0 	.word	0x200016e0
 80087c4:	0800b644 	.word	0x0800b644
 80087c8:	20001828 	.word	0x20001828
 80087cc:	0800b2c0 	.word	0x0800b2c0
 80087d0:	20001970 	.word	0x20001970
 80087d4:	0800b2bc 	.word	0x0800b2bc
 80087d8:	20001ab8 	.word	0x20001ab8
 80087dc:	20000800 	.word	0x20000800
 80087e0:	0800a0d4 	.word	0x0800a0d4
 80087e4:	0800b770 	.word	0x0800b770
	...

080087f0 <rt_test_007_007_execute>:
  return ch.rlist.current;
 80087f0:	4b2c      	ldr	r3, [pc, #176]	; (80088a4 <rt_test_007_007_execute+0xb4>)
  return chThdGetSelfX()->prio;
 80087f2:	699b      	ldr	r3, [r3, #24]
static void rt_test_007_007_execute(void) {
 80087f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80087fa:	4e2b      	ldr	r6, [pc, #172]	; (80088a8 <rt_test_007_007_execute+0xb8>)
 80087fc:	4d2b      	ldr	r5, [pc, #172]	; (80088ac <rt_test_007_007_execute+0xbc>)
  test_set_step(1);
 80087fe:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088d0 <rt_test_007_007_execute+0xe0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008802:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <rt_test_007_007_execute+0xc0>)
 8008804:	4c2b      	ldr	r4, [pc, #172]	; (80088b4 <rt_test_007_007_execute+0xc4>)
 8008806:	1c79      	adds	r1, r7, #1
 8008808:	4632      	mov	r2, r6
  test_set_step(1);
 800880a:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800880e:	4628      	mov	r0, r5
  test_set_step(1);
 8008810:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008814:	f7fa fb8c 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008818:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800881a:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800881c:	4632      	mov	r2, r6
 800881e:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <rt_test_007_007_execute+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008820:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008824:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8008828:	f7fa fb82 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800882c:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800882e:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008830:	4632      	mov	r2, r6
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <rt_test_007_007_execute+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008834:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008838:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800883c:	f7fa fb78 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008840:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008842:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008844:	4632      	mov	r2, r6
 8008846:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <rt_test_007_007_execute+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008848:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800884c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008850:	f7fa fb6e 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008854:	4b1b      	ldr	r3, [pc, #108]	; (80088c4 <rt_test_007_007_execute+0xd4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008856:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008858:	1d79      	adds	r1, r7, #5
 800885a:	4632      	mov	r2, r6
 800885c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008860:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008864:	f7fa fb64 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8008868:	2302      	movs	r3, #2
 800886a:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800886e:	6120      	str	r0, [r4, #16]
 8008870:	2320      	movs	r3, #32
 8008872:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8008876:	f7f8 fe7b 	bl	8001570 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 800887a:	f7f8 fe79 	bl	8001570 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 800887e:	f7f8 fe77 	bl	8001570 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8008882:	f7f8 fe75 	bl	8001570 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8008886:	f7f8 fe73 	bl	8001570 <chCondSignalI.constprop.0>
    chSchRescheduleS();
 800888a:	f7fa f851 	bl	8002930 <chSchRescheduleS>
 800888e:	2300      	movs	r3, #0
 8008890:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008894:	f7ff f8e4 	bl	8007a60 <test_wait_threads>
}
 8008898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800889c:	490a      	ldr	r1, [pc, #40]	; (80088c8 <rt_test_007_007_execute+0xd8>)
 800889e:	480b      	ldr	r0, [pc, #44]	; (80088cc <rt_test_007_007_execute+0xdc>)
 80088a0:	f7f8 bb3e 	b.w	8000f20 <_test_assert_sequence>
 80088a4:	200009b0 	.word	0x200009b0
 80088a8:	08005771 	.word	0x08005771
 80088ac:	20001598 	.word	0x20001598
 80088b0:	0800b774 	.word	0x0800b774
 80088b4:	20001cc4 	.word	0x20001cc4
 80088b8:	0800c1e4 	.word	0x0800c1e4
 80088bc:	0800b644 	.word	0x0800b644
 80088c0:	0800b2c0 	.word	0x0800b2c0
 80088c4:	0800b2bc 	.word	0x0800b2bc
 80088c8:	0800a0d4 	.word	0x0800a0d4
 80088cc:	0800b770 	.word	0x0800b770
 80088d0:	20001cac 	.word	0x20001cac
	...

080088e0 <rt_test_006_006_teardown>:
  test_wait_threads();
 80088e0:	f7ff b8be 	b.w	8007a60 <test_wait_threads>
	...

080088f0 <rt_test_007_004_teardown>:
 80088f0:	f7ff b8b6 	b.w	8007a60 <test_wait_threads>
	...

08008900 <rt_test_007_001_execute>:
static void rt_test_007_001_execute(void) {
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8008902:	4f29      	ldr	r7, [pc, #164]	; (80089a8 <rt_test_007_001_execute+0xa8>)
  test_set_step(2);
 8008904:	4e29      	ldr	r6, [pc, #164]	; (80089ac <rt_test_007_001_execute+0xac>)
  return chThdGetSelfX()->prio;
 8008906:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8008908:	4829      	ldr	r0, [pc, #164]	; (80089b0 <rt_test_007_001_execute+0xb0>)
 800890a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800890c:	4d29      	ldr	r5, [pc, #164]	; (80089b4 <rt_test_007_001_execute+0xb4>)
  test_set_step(2);
 800890e:	2302      	movs	r3, #2
 8008910:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8008912:	f7fc f88d 	bl	8004a30 <chMtxLock>
  test_set_step(3);
 8008916:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800891a:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <rt_test_007_001_execute+0xb8>)
 800891c:	4a27      	ldr	r2, [pc, #156]	; (80089bc <rt_test_007_001_execute+0xbc>)
 800891e:	4828      	ldr	r0, [pc, #160]	; (80089c0 <rt_test_007_001_execute+0xc0>)
  test_set_step(3);
 8008920:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008924:	1c61      	adds	r1, r4, #1
 8008926:	f7fa fb03 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800892a:	4b26      	ldr	r3, [pc, #152]	; (80089c4 <rt_test_007_001_execute+0xc4>)
 800892c:	4a23      	ldr	r2, [pc, #140]	; (80089bc <rt_test_007_001_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800892e:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008930:	1ca1      	adds	r1, r4, #2
 8008932:	4825      	ldr	r0, [pc, #148]	; (80089c8 <rt_test_007_001_execute+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008934:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008938:	f7fa fafa 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800893c:	4b23      	ldr	r3, [pc, #140]	; (80089cc <rt_test_007_001_execute+0xcc>)
 800893e:	4a1f      	ldr	r2, [pc, #124]	; (80089bc <rt_test_007_001_execute+0xbc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008940:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008942:	1ce1      	adds	r1, r4, #3
 8008944:	4822      	ldr	r0, [pc, #136]	; (80089d0 <rt_test_007_001_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008946:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800894a:	f7fa faf1 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800894e:	4b21      	ldr	r3, [pc, #132]	; (80089d4 <rt_test_007_001_execute+0xd4>)
 8008950:	4a1a      	ldr	r2, [pc, #104]	; (80089bc <rt_test_007_001_execute+0xbc>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008952:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008954:	1d21      	adds	r1, r4, #4
 8008956:	4820      	ldr	r0, [pc, #128]	; (80089d8 <rt_test_007_001_execute+0xd8>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008958:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800895c:	f7fa fae8 	bl	8002f30 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008960:	1d61      	adds	r1, r4, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008962:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008964:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <rt_test_007_001_execute+0xdc>)
 8008966:	4a15      	ldr	r2, [pc, #84]	; (80089bc <rt_test_007_001_execute+0xbc>)
 8008968:	481d      	ldr	r0, [pc, #116]	; (80089e0 <rt_test_007_001_execute+0xe0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800896a:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800896e:	f7fa fadf 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8008972:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008974:	4602      	mov	r2, r0
    chMtxUnlock(&m1);
 8008976:	480e      	ldr	r0, [pc, #56]	; (80089b0 <rt_test_007_001_execute+0xb0>)
  test_set_step(4);
 8008978:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800897a:	612a      	str	r2, [r5, #16]
    chMtxUnlock(&m1);
 800897c:	f7fa f8c0 	bl	8002b00 <chMtxUnlock>
    test_wait_threads();
 8008980:	f7ff f86e 	bl	8007a60 <test_wait_threads>
 8008984:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8008986:	4917      	ldr	r1, [pc, #92]	; (80089e4 <rt_test_007_001_execute+0xe4>)
 8008988:	6898      	ldr	r0, [r3, #8]
 800898a:	1b00      	subs	r0, r0, r4
 800898c:	fab0 f080 	clz	r0, r0
 8008990:	0940      	lsrs	r0, r0, #5
 8008992:	f7f8 f945 	bl	8000c20 <_test_assert>
 8008996:	b100      	cbz	r0, 800899a <rt_test_007_001_execute+0x9a>
}
 8008998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800899e:	4912      	ldr	r1, [pc, #72]	; (80089e8 <rt_test_007_001_execute+0xe8>)
 80089a0:	4812      	ldr	r0, [pc, #72]	; (80089ec <rt_test_007_001_execute+0xec>)
 80089a2:	f7f8 babd 	b.w	8000f20 <_test_assert_sequence>
 80089a6:	bf00      	nop
 80089a8:	200009b0 	.word	0x200009b0
 80089ac:	20001cac 	.word	0x20001cac
 80089b0:	2000082c 	.word	0x2000082c
 80089b4:	20001cc4 	.word	0x20001cc4
 80089b8:	0800b774 	.word	0x0800b774
 80089bc:	08005961 	.word	0x08005961
 80089c0:	20001598 	.word	0x20001598
 80089c4:	0800c1e4 	.word	0x0800c1e4
 80089c8:	200016e0 	.word	0x200016e0
 80089cc:	0800b644 	.word	0x0800b644
 80089d0:	20001828 	.word	0x20001828
 80089d4:	0800b2c0 	.word	0x0800b2c0
 80089d8:	20001970 	.word	0x20001970
 80089dc:	0800b2bc 	.word	0x0800b2bc
 80089e0:	20001ab8 	.word	0x20001ab8
 80089e4:	0800af14 	.word	0x0800af14
 80089e8:	0800a0d4 	.word	0x0800a0d4
 80089ec:	0800b770 	.word	0x0800b770

080089f0 <rt_test_006_005_teardown>:
 80089f0:	f7ff b836 	b.w	8007a60 <test_wait_threads>
	...

08008a00 <rt_test_006_004_execute>:
  return ch.rlist.current;
 8008a00:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <rt_test_006_004_execute+0x90>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008a02:	4824      	ldr	r0, [pc, #144]	; (8008a94 <rt_test_006_004_execute+0x94>)
  return chThdGetSelfX()->prio;
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <rt_test_006_004_execute+0x98>)
 8008a08:	6891      	ldr	r1, [r2, #8]
 8008a0a:	4a24      	ldr	r2, [pc, #144]	; (8008a9c <rt_test_006_004_execute+0x9c>)
static void rt_test_006_004_execute(void) {
 8008a0c:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8008a0e:	4c24      	ldr	r4, [pc, #144]	; (8008aa0 <rt_test_006_004_execute+0xa0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008a10:	3101      	adds	r1, #1
  test_set_step(1);
 8008a12:	2501      	movs	r5, #1
 8008a14:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008a16:	f7fa fa8b 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <rt_test_006_004_execute+0xa4>)
  test_set_step(2);
 8008a1c:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008a1e:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8008a20:	6025      	str	r5, [r4, #0]
 8008a22:	2320      	movs	r3, #32
 8008a24:	f383 8811 	msr	BASEPRI, r3
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8008a28:	4c1f      	ldr	r4, [pc, #124]	; (8008aa8 <rt_test_006_004_execute+0xa8>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	e002      	b.n	8008a34 <rt_test_006_004_execute+0x34>
  while (n > (cnt_t)0) {
 8008a2e:	2d01      	cmp	r5, #1
 8008a30:	d00e      	beq.n	8008a50 <rt_test_006_004_execute+0x50>
 8008a32:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8008a34:	68a3      	ldr	r3, [r4, #8]
 8008a36:	3301      	adds	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	dcf7      	bgt.n	8008a2e <rt_test_006_004_execute+0x2e>
  thread_t *tp = tqp->next;
 8008a3e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008a40:	6803      	ldr	r3, [r0, #0]
 8008a42:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008a44:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008a46:	f7f8 fcdb 	bl	8001400 <chSchReadyI>
  while (n > (cnt_t)0) {
 8008a4a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008a4c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 8008a4e:	d1f0      	bne.n	8008a32 <rt_test_006_004_execute+0x32>
    chSchRescheduleS();
 8008a50:	f7f9 ff6e 	bl	8002930 <chSchRescheduleS>
 8008a54:	2500      	movs	r5, #0
 8008a56:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 8008a5a:	f7ff f801 	bl	8007a60 <test_wait_threads>
 8008a5e:	2320      	movs	r3, #32
 8008a60:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8008a64:	68a0      	ldr	r0, [r4, #8]
 8008a66:	4911      	ldr	r1, [pc, #68]	; (8008aac <rt_test_006_004_execute+0xac>)
 8008a68:	f1a0 0001 	sub.w	r0, r0, #1
 8008a6c:	fab0 f080 	clz	r0, r0
 8008a70:	0940      	lsrs	r0, r0, #5
 8008a72:	f7f8 f8d5 	bl	8000c20 <_test_assert>
 8008a76:	b110      	cbz	r0, 8008a7e <rt_test_006_004_execute+0x7e>
 8008a78:	f385 8811 	msr	BASEPRI, r5
}
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 8008a82:	490b      	ldr	r1, [pc, #44]	; (8008ab0 <rt_test_006_004_execute+0xb0>)
 8008a84:	4804      	ldr	r0, [pc, #16]	; (8008a98 <rt_test_006_004_execute+0x98>)
}
 8008a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 8008a8a:	f7f8 ba49 	b.w	8000f20 <_test_assert_sequence>
 8008a8e:	bf00      	nop
 8008a90:	200009b0 	.word	0x200009b0
 8008a94:	20001598 	.word	0x20001598
 8008a98:	0800b2bc 	.word	0x0800b2bc
 8008a9c:	080071a1 	.word	0x080071a1
 8008aa0:	20001cac 	.word	0x20001cac
 8008aa4:	20001cc4 	.word	0x20001cc4
 8008aa8:	20001578 	.word	0x20001578
 8008aac:	0800b778 	.word	0x0800b778
 8008ab0:	0800a0d4 	.word	0x0800a0d4
	...

08008ac0 <rt_test_006_003_execute>:
static void rt_test_006_003_execute(void) {
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8008ac4:	4d4b      	ldr	r5, [pc, #300]	; (8008bf4 <rt_test_006_003_execute+0x134>)
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	6028      	str	r0, [r5, #0]
 8008aca:	2320      	movs	r3, #32
 8008acc:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8008ad0:	4c49      	ldr	r4, [pc, #292]	; (8008bf8 <rt_test_006_003_execute+0x138>)
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	bf5c      	itt	pl
 8008ad8:	60a3      	strpl	r3, [r4, #8]
 8008ada:	2000      	movpl	r0, #0
 8008adc:	2300      	movs	r3, #0
 8008ade:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008ae2:	4946      	ldr	r1, [pc, #280]	; (8008bfc <rt_test_006_003_execute+0x13c>)
 8008ae4:	f7f8 f89c 	bl	8000c20 <_test_assert>
 8008ae8:	b108      	cbz	r0, 8008aee <rt_test_006_003_execute+0x2e>
}
 8008aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 8008aee:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008af0:	4943      	ldr	r1, [pc, #268]	; (8008c00 <rt_test_006_003_execute+0x140>)
 8008af2:	1b00      	subs	r0, r0, r4
 8008af4:	fab0 f080 	clz	r0, r0
 8008af8:	0940      	lsrs	r0, r0, #5
 8008afa:	f7f8 f891 	bl	8000c20 <_test_assert>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1f3      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008b02:	68a0      	ldr	r0, [r4, #8]
 8008b04:	493f      	ldr	r1, [pc, #252]	; (8008c04 <rt_test_006_003_execute+0x144>)
 8008b06:	fab0 f080 	clz	r0, r0
 8008b0a:	0940      	lsrs	r0, r0, #5
 8008b0c:	f7f8 f888 	bl	8000c20 <_test_assert>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d1e9      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
  return ch.rlist.current;
 8008b16:	493c      	ldr	r1, [pc, #240]	; (8008c08 <rt_test_006_003_execute+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b18:	4a3c      	ldr	r2, [pc, #240]	; (8008c0c <rt_test_006_003_execute+0x14c>)
  return chThdGetSelfX()->prio;
 8008b1a:	6989      	ldr	r1, [r1, #24]
 8008b1c:	483c      	ldr	r0, [pc, #240]	; (8008c10 <rt_test_006_003_execute+0x150>)
 8008b1e:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
 8008b20:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b22:	3901      	subs	r1, #1
  test_set_step(2);
 8008b24:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b26:	f7fa fa03 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008b2a:	4b3a      	ldr	r3, [pc, #232]	; (8008c14 <rt_test_006_003_execute+0x154>)
 8008b2c:	4602      	mov	r2, r0
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8008b2e:	f241 3088 	movw	r0, #5000	; 0x1388
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008b32:	601a      	str	r2, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8008b34:	f7fa fbf4 	bl	8003320 <chSemWaitTimeout.constprop.0>
 8008b38:	4606      	mov	r6, r0
    test_wait_threads();
 8008b3a:	f7fe ff91 	bl	8007a60 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 8008b3e:	fab6 f086 	clz	r0, r6
 8008b42:	492e      	ldr	r1, [pc, #184]	; (8008bfc <rt_test_006_003_execute+0x13c>)
 8008b44:	0940      	lsrs	r0, r0, #5
 8008b46:	f7f8 f86b 	bl	8000c20 <_test_assert>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1cd      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
 8008b4e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008b50:	492b      	ldr	r1, [pc, #172]	; (8008c00 <rt_test_006_003_execute+0x140>)
 8008b52:	1b00      	subs	r0, r0, r4
 8008b54:	fab0 f080 	clz	r0, r0
 8008b58:	0940      	lsrs	r0, r0, #5
 8008b5a:	f7f8 f861 	bl	8000c20 <_test_assert>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d1c3      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008b62:	68a0      	ldr	r0, [r4, #8]
 8008b64:	4927      	ldr	r1, [pc, #156]	; (8008c04 <rt_test_006_003_execute+0x144>)
 8008b66:	fab0 f080 	clz	r0, r0
 8008b6a:	0940      	lsrs	r0, r0, #5
 8008b6c:	f7f8 f858 	bl	8000c20 <_test_assert>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1ba      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
  test_set_step(3);
 8008b74:	2303      	movs	r3, #3
 8008b76:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8008b78:	f7fb fba2 	bl	80042c0 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008b7c:	4f1f      	ldr	r7, [pc, #124]	; (8008bfc <rt_test_006_003_execute+0x13c>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008b7e:	4e20      	ldr	r6, [pc, #128]	; (8008c00 <rt_test_006_003_execute+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 8008b80:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008c04 <rt_test_006_003_execute+0x144>
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8008b84:	4681      	mov	r9, r0
 8008b86:	2541      	movs	r5, #65	; 0x41
      test_emit_token('A' + i);
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f7f8 f8f1 	bl	8000d70 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 8008b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b92:	f7fa fbc5 	bl	8003320 <chSemWaitTimeout.constprop.0>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008b96:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8008b9a:	fab0 f080 	clz	r0, r0
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	0940      	lsrs	r0, r0, #5
 8008ba2:	f7f8 f83d 	bl	8000c20 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008ba6:	4631      	mov	r1, r6
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d19e      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
 8008bac:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008bae:	1b00      	subs	r0, r0, r4
 8008bb0:	fab0 f080 	clz	r0, r0
 8008bb4:	0940      	lsrs	r0, r0, #5
 8008bb6:	f7f8 f833 	bl	8000c20 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 8008bba:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d194      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 8008bc0:	68a0      	ldr	r0, [r4, #8]
 8008bc2:	fab0 f080 	clz	r0, r0
 8008bc6:	0940      	lsrs	r0, r0, #5
 8008bc8:	f7f8 f82a 	bl	8000c20 <_test_assert>
    for (i = 0; i < 5; i++) {
 8008bcc:	3501      	adds	r5, #1
 8008bce:	b2ed      	uxtb	r5, r5
      test_assert(sem1.cnt == 0, "counter not zero");
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d18a      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
    for (i = 0; i < 5; i++) {
 8008bd4:	2d46      	cmp	r5, #70	; 0x46
 8008bd6:	d1d7      	bne.n	8008b88 <rt_test_006_003_execute+0xc8>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008bd8:	490f      	ldr	r1, [pc, #60]	; (8008c18 <rt_test_006_003_execute+0x158>)
 8008bda:	4810      	ldr	r0, [pc, #64]	; (8008c1c <rt_test_006_003_execute+0x15c>)
 8008bdc:	f7f8 f9a0 	bl	8000f20 <_test_assert_sequence>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d182      	bne.n	8008aea <rt_test_006_003_execute+0x2a>
    test_assert_time_window(target_time,
 8008be4:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8008be8:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 8008bec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 8008bf0:	f7f7 bdb6 	b.w	8000760 <_test_assert_time_window.constprop.0>
 8008bf4:	20001cac 	.word	0x20001cac
 8008bf8:	20001578 	.word	0x20001578
 8008bfc:	0800afe0 	.word	0x0800afe0
 8008c00:	0800af04 	.word	0x0800af04
 8008c04:	0800afbc 	.word	0x0800afbc
 8008c08:	200009b0 	.word	0x200009b0
 8008c0c:	080040f1 	.word	0x080040f1
 8008c10:	20001598 	.word	0x20001598
 8008c14:	20001cc4 	.word	0x20001cc4
 8008c18:	0800a0d4 	.word	0x0800a0d4
 8008c1c:	0800b770 	.word	0x0800b770

08008c20 <rt_test_006_002_execute>:
static void rt_test_006_002_execute(void) {
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008c24:	4c2b      	ldr	r4, [pc, #172]	; (8008cd4 <rt_test_006_002_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008c26:	4f2c      	ldr	r7, [pc, #176]	; (8008cd8 <rt_test_006_002_execute+0xb8>)
  return chThdGetSelfX()->prio;
 8008c28:	69a3      	ldr	r3, [r4, #24]
 8008c2a:	4e2c      	ldr	r6, [pc, #176]	; (8008cdc <rt_test_006_002_execute+0xbc>)
 8008c2c:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8008c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008d04 <rt_test_006_002_execute+0xe4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008c32:	4b2b      	ldr	r3, [pc, #172]	; (8008ce0 <rt_test_006_002_execute+0xc0>)
 8008c34:	4d2b      	ldr	r5, [pc, #172]	; (8008ce4 <rt_test_006_002_execute+0xc4>)
  test_set_step(1);
 8008c36:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	3105      	adds	r1, #5
 8008c3e:	4630      	mov	r0, r6
  test_set_step(1);
 8008c40:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008c44:	f7fa f974 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008c48:	69a2      	ldr	r2, [r4, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008c4a:	4b27      	ldr	r3, [pc, #156]	; (8008ce8 <rt_test_006_002_execute+0xc8>)
 8008c4c:	6891      	ldr	r1, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008c4e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008c50:	463a      	mov	r2, r7
 8008c52:	3101      	adds	r1, #1
 8008c54:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008c58:	f7fa f96a 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008c5c:	69a2      	ldr	r2, [r4, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8008c5e:	4b23      	ldr	r3, [pc, #140]	; (8008cec <rt_test_006_002_execute+0xcc>)
 8008c60:	6891      	ldr	r1, [r2, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8008c62:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8008c64:	463a      	mov	r2, r7
 8008c66:	3103      	adds	r1, #3
 8008c68:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8008c6c:	f7fa f960 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008c70:	69a2      	ldr	r2, [r4, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8008c72:	4b1f      	ldr	r3, [pc, #124]	; (8008cf0 <rt_test_006_002_execute+0xd0>)
 8008c74:	6891      	ldr	r1, [r2, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8008c76:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8008c78:	463a      	mov	r2, r7
 8008c7a:	3104      	adds	r1, #4
 8008c7c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8008c80:	f7fa f956 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008c84:	69a3      	ldr	r3, [r4, #24]
    chSemSignal(&sem1);
 8008c86:	4c1b      	ldr	r4, [pc, #108]	; (8008cf4 <rt_test_006_002_execute+0xd4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8008c88:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8008c8a:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8008c8c:	3102      	adds	r1, #2
 8008c8e:	463a      	mov	r2, r7
 8008c90:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <rt_test_006_002_execute+0xd8>)
 8008c92:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8008c96:	f7fa f94b 	bl	8002f30 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8008c9a:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8008c9c:	4602      	mov	r2, r0
    chSemSignal(&sem1);
 8008c9e:	4620      	mov	r0, r4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8008ca0:	612a      	str	r2, [r5, #16]
  test_set_step(2);
 8008ca2:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 8008ca6:	f7fa f9cb 	bl	8003040 <chSemSignal>
    chSemSignal(&sem1);
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7fa f9c8 	bl	8003040 <chSemSignal>
    chSemSignal(&sem1);
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7fa f9c5 	bl	8003040 <chSemSignal>
    chSemSignal(&sem1);
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f7fa f9c2 	bl	8003040 <chSemSignal>
    chSemSignal(&sem1);
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7fa f9bf 	bl	8003040 <chSemSignal>
    test_wait_threads();
 8008cc2:	f7fe fecd 	bl	8007a60 <test_wait_threads>
}
 8008cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008cca:	490c      	ldr	r1, [pc, #48]	; (8008cfc <rt_test_006_002_execute+0xdc>)
 8008ccc:	480c      	ldr	r0, [pc, #48]	; (8008d00 <rt_test_006_002_execute+0xe0>)
 8008cce:	f7f8 b927 	b.w	8000f20 <_test_assert_sequence>
 8008cd2:	bf00      	nop
 8008cd4:	200009b0 	.word	0x200009b0
 8008cd8:	080071a1 	.word	0x080071a1
 8008cdc:	20001598 	.word	0x20001598
 8008ce0:	0800b2bc 	.word	0x0800b2bc
 8008ce4:	20001cc4 	.word	0x20001cc4
 8008ce8:	0800b2c0 	.word	0x0800b2c0
 8008cec:	0800b644 	.word	0x0800b644
 8008cf0:	0800c1e4 	.word	0x0800c1e4
 8008cf4:	20001578 	.word	0x20001578
 8008cf8:	0800b774 	.word	0x0800b774
 8008cfc:	0800a0d4 	.word	0x0800a0d4
 8008d00:	0800b770 	.word	0x0800b770
 8008d04:	20001cac 	.word	0x20001cac
	...

08008d10 <rt_test_005_001_execute>:

static void rt_test_005_001_execute(void) {
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008d14:	4d30      	ldr	r5, [pc, #192]	; (8008dd8 <rt_test_005_001_execute+0xc8>)
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8008d16:	4f31      	ldr	r7, [pc, #196]	; (8008ddc <rt_test_005_001_execute+0xcc>)
  return chThdGetSelfX()->prio;
 8008d18:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008d1a:	4b31      	ldr	r3, [pc, #196]	; (8008de0 <rt_test_005_001_execute+0xd0>)
 8008d1c:	6891      	ldr	r1, [r2, #8]
 8008d1e:	4831      	ldr	r0, [pc, #196]	; (8008de4 <rt_test_005_001_execute+0xd4>)
 8008d20:	4a31      	ldr	r2, [pc, #196]	; (8008de8 <rt_test_005_001_execute+0xd8>)
 8008d22:	3901      	subs	r1, #1
  test_set_step(1);
 8008d24:	2401      	movs	r4, #1
 8008d26:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008d28:	f7fa f902 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008d2c:	4b2f      	ldr	r3, [pc, #188]	; (8008dec <rt_test_005_001_execute+0xdc>)
 8008d2e:	2620      	movs	r6, #32
 8008d30:	6018      	str	r0, [r3, #0]
 8008d32:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 8008d36:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8008d38:	4c2d      	ldr	r4, [pc, #180]	; (8008df0 <rt_test_005_001_execute+0xe0>)
  tp->u.wttrp = trp;
 8008d3a:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 8008d3c:	2003      	movs	r0, #3
  *trp = tp;
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	f7fa f9ae 	bl	80030a0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8008d44:	69aa      	ldr	r2, [r5, #24]
 8008d46:	2300      	movs	r3, #0
 8008d48:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8008d4c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	4928      	ldr	r1, [pc, #160]	; (8008df4 <rt_test_005_001_execute+0xe4>)
 8008d54:	fab0 f080 	clz	r0, r0
 8008d58:	0940      	lsrs	r0, r0, #5
 8008d5a:	f7f7 ff61 	bl	8000c20 <_test_assert>
 8008d5e:	b108      	cbz	r0, 8008d64 <rt_test_005_001_execute+0x54>
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 8008d64:	fab8 f088 	clz	r0, r8
 8008d68:	4923      	ldr	r1, [pc, #140]	; (8008df8 <rt_test_005_001_execute+0xe8>)
 8008d6a:	0940      	lsrs	r0, r0, #5
 8008d6c:	f7f7 ff58 	bl	8000c20 <_test_assert>
 8008d70:	4680      	mov	r8, r0
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d1f4      	bne.n	8008d60 <rt_test_005_001_execute+0x50>
    test_wait_threads();
 8008d76:	f7fe fe73 	bl	8007a60 <test_wait_threads>
  test_set_step(2);
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	f386 8811 	msr	BASEPRI, r6
 8008d82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d86:	69ab      	ldr	r3, [r5, #24]
 8008d88:	6a56      	ldr	r6, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 8008d8a:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8008d8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008d90:	2003      	movs	r0, #3
  *trp = tp;
 8008d92:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8008d94:	f7fa fa9c 	bl	80032d0 <chSchGoSleepTimeoutS>
 8008d98:	4605      	mov	r5, r0
 8008d9a:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 8008d9e:	f506 511c 	add.w	r1, r6, #9984	; 0x2700
 8008da2:	4608      	mov	r0, r1
 8008da4:	3010      	adds	r0, #16
 8008da6:	3113      	adds	r1, #19
 8008da8:	f7f7 fcda 	bl	8000760 <_test_assert_time_window.constprop.0>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1d7      	bne.n	8008d60 <rt_test_005_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	4910      	ldr	r1, [pc, #64]	; (8008df4 <rt_test_005_001_execute+0xe4>)
 8008db4:	fab0 f080 	clz	r0, r0
 8008db8:	0940      	lsrs	r0, r0, #5
 8008dba:	f7f7 ff31 	bl	8000c20 <_test_assert>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d1ce      	bne.n	8008d60 <rt_test_005_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008dc2:	f1a5 30ff 	sub.w	r0, r5, #4294967295	; 0xffffffff
 8008dc6:	fab0 f080 	clz	r0, r0
}
 8008dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008dce:	490a      	ldr	r1, [pc, #40]	; (8008df8 <rt_test_005_001_execute+0xe8>)
 8008dd0:	0940      	lsrs	r0, r0, #5
 8008dd2:	f7f7 bf25 	b.w	8000c20 <_test_assert>
 8008dd6:	bf00      	nop
 8008dd8:	200009b0 	.word	0x200009b0
 8008ddc:	20001cac 	.word	0x20001cac
 8008de0:	0800b2bc 	.word	0x0800b2bc
 8008de4:	20001598 	.word	0x20001598
 8008de8:	08002a81 	.word	0x08002a81
 8008dec:	20001cc4 	.word	0x20001cc4
 8008df0:	20001cd8 	.word	0x20001cd8
 8008df4:	0800b788 	.word	0x0800b788
 8008df8:	0800b588 	.word	0x0800b588
 8008dfc:	00000000 	.word	0x00000000

08008e00 <rt_test_004_002_execute>:
static void rt_test_004_002_execute(void) {
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	4d5a      	ldr	r5, [pc, #360]	; (8008f6c <rt_test_004_002_execute+0x16c>)
  test_set_step(1);
 8008e04:	4e5a      	ldr	r6, [pc, #360]	; (8008f70 <rt_test_004_002_execute+0x170>)
  return chThdGetSelfX()->prio;
 8008e06:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008e08:	4b5a      	ldr	r3, [pc, #360]	; (8008f74 <rt_test_004_002_execute+0x174>)
 8008e0a:	6891      	ldr	r1, [r2, #8]
 8008e0c:	485a      	ldr	r0, [pc, #360]	; (8008f78 <rt_test_004_002_execute+0x178>)
 8008e0e:	4a5b      	ldr	r2, [pc, #364]	; (8008f7c <rt_test_004_002_execute+0x17c>)
 8008e10:	4c5b      	ldr	r4, [pc, #364]	; (8008f80 <rt_test_004_002_execute+0x180>)
 8008e12:	3905      	subs	r1, #5
  test_set_step(1);
 8008e14:	2701      	movs	r7, #1
 8008e16:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008e18:	f7fa f88a 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008e1c:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008e1e:	4b59      	ldr	r3, [pc, #356]	; (8008f84 <rt_test_004_002_execute+0x184>)
 8008e20:	6891      	ldr	r1, [r2, #8]
 8008e22:	4a56      	ldr	r2, [pc, #344]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008e24:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008e26:	3904      	subs	r1, #4
 8008e28:	4857      	ldr	r0, [pc, #348]	; (8008f88 <rt_test_004_002_execute+0x188>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008e2a:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008e2c:	f7fa f880 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008e30:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008e32:	4b56      	ldr	r3, [pc, #344]	; (8008f8c <rt_test_004_002_execute+0x18c>)
 8008e34:	6891      	ldr	r1, [r2, #8]
 8008e36:	4a51      	ldr	r2, [pc, #324]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008e38:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008e3a:	3903      	subs	r1, #3
 8008e3c:	4854      	ldr	r0, [pc, #336]	; (8008f90 <rt_test_004_002_execute+0x190>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008e3e:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008e40:	f7fa f876 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008e44:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e46:	4b53      	ldr	r3, [pc, #332]	; (8008f94 <rt_test_004_002_execute+0x194>)
 8008e48:	6891      	ldr	r1, [r2, #8]
 8008e4a:	4a4c      	ldr	r2, [pc, #304]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008e4c:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e4e:	3902      	subs	r1, #2
 8008e50:	4851      	ldr	r0, [pc, #324]	; (8008f98 <rt_test_004_002_execute+0x198>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008e52:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e54:	f7fa f86c 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008e58:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008e5a:	4b50      	ldr	r3, [pc, #320]	; (8008f9c <rt_test_004_002_execute+0x19c>)
 8008e5c:	6891      	ldr	r1, [r2, #8]
 8008e5e:	4a47      	ldr	r2, [pc, #284]	; (8008f7c <rt_test_004_002_execute+0x17c>)
 8008e60:	3901      	subs	r1, #1
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e62:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008e64:	484e      	ldr	r0, [pc, #312]	; (8008fa0 <rt_test_004_002_execute+0x1a0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e66:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008e68:	f7fa f862 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008e6c:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8008e6e:	f7fe fdf7 	bl	8007a60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008e72:	494c      	ldr	r1, [pc, #304]	; (8008fa4 <rt_test_004_002_execute+0x1a4>)
 8008e74:	484c      	ldr	r0, [pc, #304]	; (8008fa8 <rt_test_004_002_execute+0x1a8>)
 8008e76:	f7f8 f853 	bl	8000f20 <_test_assert_sequence>
 8008e7a:	b100      	cbz	r0, 8008e7e <rt_test_004_002_execute+0x7e>
}
 8008e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7e:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008e80:	4b46      	ldr	r3, [pc, #280]	; (8008f9c <rt_test_004_002_execute+0x19c>)
 8008e82:	6891      	ldr	r1, [r2, #8]
 8008e84:	4846      	ldr	r0, [pc, #280]	; (8008fa0 <rt_test_004_002_execute+0x1a0>)
 8008e86:	4a3d      	ldr	r2, [pc, #244]	; (8008f7c <rt_test_004_002_execute+0x17c>)
 8008e88:	3901      	subs	r1, #1
  test_set_step(2);
 8008e8a:	2702      	movs	r7, #2
 8008e8c:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008e8e:	f7fa f84f 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008e92:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e94:	4b3f      	ldr	r3, [pc, #252]	; (8008f94 <rt_test_004_002_execute+0x194>)
 8008e96:	6891      	ldr	r1, [r2, #8]
 8008e98:	4a38      	ldr	r2, [pc, #224]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008e9a:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008e9c:	3902      	subs	r1, #2
 8008e9e:	483e      	ldr	r0, [pc, #248]	; (8008f98 <rt_test_004_002_execute+0x198>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008ea0:	6127      	str	r7, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008ea2:	f7fa f845 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008ea6:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008ea8:	4b38      	ldr	r3, [pc, #224]	; (8008f8c <rt_test_004_002_execute+0x18c>)
 8008eaa:	6891      	ldr	r1, [r2, #8]
 8008eac:	4a33      	ldr	r2, [pc, #204]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008eae:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008eb0:	3903      	subs	r1, #3
 8008eb2:	4837      	ldr	r0, [pc, #220]	; (8008f90 <rt_test_004_002_execute+0x190>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008eb4:	60e7      	str	r7, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008eb6:	f7fa f83b 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008eba:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ebc:	4b31      	ldr	r3, [pc, #196]	; (8008f84 <rt_test_004_002_execute+0x184>)
 8008ebe:	6891      	ldr	r1, [r2, #8]
 8008ec0:	4a2e      	ldr	r2, [pc, #184]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008ec2:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ec4:	3904      	subs	r1, #4
 8008ec6:	4830      	ldr	r0, [pc, #192]	; (8008f88 <rt_test_004_002_execute+0x188>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008ec8:	60a7      	str	r7, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008eca:	f7fa f831 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008ece:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008ed0:	4b28      	ldr	r3, [pc, #160]	; (8008f74 <rt_test_004_002_execute+0x174>)
 8008ed2:	6891      	ldr	r1, [r2, #8]
 8008ed4:	4a29      	ldr	r2, [pc, #164]	; (8008f7c <rt_test_004_002_execute+0x17c>)
 8008ed6:	3905      	subs	r1, #5
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ed8:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008eda:	4827      	ldr	r0, [pc, #156]	; (8008f78 <rt_test_004_002_execute+0x178>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008edc:	6067      	str	r7, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008ede:	f7fa f827 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008ee2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8008ee4:	f7fe fdbc 	bl	8007a60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008ee8:	492e      	ldr	r1, [pc, #184]	; (8008fa4 <rt_test_004_002_execute+0x1a4>)
 8008eea:	482f      	ldr	r0, [pc, #188]	; (8008fa8 <rt_test_004_002_execute+0x1a8>)
 8008eec:	f7f8 f818 	bl	8000f20 <_test_assert_sequence>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1c3      	bne.n	8008e7c <rt_test_004_002_execute+0x7c>
 8008ef4:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ef6:	4b23      	ldr	r3, [pc, #140]	; (8008f84 <rt_test_004_002_execute+0x184>)
 8008ef8:	6891      	ldr	r1, [r2, #8]
 8008efa:	4823      	ldr	r0, [pc, #140]	; (8008f88 <rt_test_004_002_execute+0x188>)
 8008efc:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <rt_test_004_002_execute+0x17c>)
 8008efe:	3904      	subs	r1, #4
  test_set_step(3);
 8008f00:	2703      	movs	r7, #3
 8008f02:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008f04:	f7fa f814 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008f08:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <rt_test_004_002_execute+0x174>)
 8008f0c:	6891      	ldr	r1, [r2, #8]
 8008f0e:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008f10:	4606      	mov	r6, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008f12:	3905      	subs	r1, #5
 8008f14:	4818      	ldr	r0, [pc, #96]	; (8008f78 <rt_test_004_002_execute+0x178>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008f16:	6066      	str	r6, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008f18:	f7fa f80a 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008f1c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008f1e:	4b1f      	ldr	r3, [pc, #124]	; (8008f9c <rt_test_004_002_execute+0x19c>)
 8008f20:	6891      	ldr	r1, [r2, #8]
 8008f22:	4a16      	ldr	r2, [pc, #88]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008f24:	4606      	mov	r6, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008f26:	3901      	subs	r1, #1
 8008f28:	481d      	ldr	r0, [pc, #116]	; (8008fa0 <rt_test_004_002_execute+0x1a0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008f2a:	6026      	str	r6, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008f2c:	f7fa f800 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008f30:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008f32:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <rt_test_004_002_execute+0x194>)
 8008f34:	6891      	ldr	r1, [r2, #8]
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008f38:	4606      	mov	r6, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008f3a:	3902      	subs	r1, #2
 8008f3c:	4816      	ldr	r0, [pc, #88]	; (8008f98 <rt_test_004_002_execute+0x198>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008f3e:	6126      	str	r6, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008f40:	f7f9 fff6 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008f44:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008f46:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <rt_test_004_002_execute+0x18c>)
 8008f48:	6891      	ldr	r1, [r2, #8]
 8008f4a:	4a0c      	ldr	r2, [pc, #48]	; (8008f7c <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008f4c:	4606      	mov	r6, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008f4e:	3903      	subs	r1, #3
 8008f50:	480f      	ldr	r0, [pc, #60]	; (8008f90 <rt_test_004_002_execute+0x190>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008f52:	60e6      	str	r6, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008f54:	f7f9 ffec 	bl	8002f30 <chThdCreateStatic.constprop.0>
 8008f58:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8008f5a:	f7fe fd81 	bl	8007a60 <test_wait_threads>
}
 8008f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008f62:	4910      	ldr	r1, [pc, #64]	; (8008fa4 <rt_test_004_002_execute+0x1a4>)
 8008f64:	4810      	ldr	r0, [pc, #64]	; (8008fa8 <rt_test_004_002_execute+0x1a8>)
 8008f66:	f7f7 bfdb 	b.w	8000f20 <_test_assert_sequence>
 8008f6a:	bf00      	nop
 8008f6c:	200009b0 	.word	0x200009b0
 8008f70:	20001cac 	.word	0x20001cac
 8008f74:	0800b774 	.word	0x0800b774
 8008f78:	20001598 	.word	0x20001598
 8008f7c:	08000e91 	.word	0x08000e91
 8008f80:	20001cc4 	.word	0x20001cc4
 8008f84:	0800c1e4 	.word	0x0800c1e4
 8008f88:	200016e0 	.word	0x200016e0
 8008f8c:	0800b644 	.word	0x0800b644
 8008f90:	20001828 	.word	0x20001828
 8008f94:	0800b2c0 	.word	0x0800b2c0
 8008f98:	20001970 	.word	0x20001970
 8008f9c:	0800b2bc 	.word	0x0800b2bc
 8008fa0:	20001ab8 	.word	0x20001ab8
 8008fa4:	0800a0d4 	.word	0x0800a0d4
 8008fa8:	0800b770 	.word	0x0800b770
 8008fac:	00000000 	.word	0x00000000

08008fb0 <cmd_test>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008fb0:	b510      	push	{r4, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8008fb2:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	4604      	mov	r4, r0
  if (argc != 1) {
 8008fb8:	d121      	bne.n	8008ffe <cmd_test+0x4e>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 8008fba:	6810      	ldr	r0, [r2, #0]
 8008fbc:	7803      	ldrb	r3, [r0, #0]
 8008fbe:	2b72      	cmp	r3, #114	; 0x72
 8008fc0:	d015      	beq.n	8008fee <cmd_test+0x3e>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8008fc2:	4916      	ldr	r1, [pc, #88]	; (800901c <cmd_test+0x6c>)
 8008fc4:	f7f7 fa30 	bl	8000428 <strcmp>
 8008fc8:	b9c8      	cbnz	r0, 8008ffe <cmd_test+0x4e>
    tfp = test_oslib;
 8008fca:	4915      	ldr	r1, [pc, #84]	; (8009020 <cmd_test+0x70>)
  return ch.rlist.current;
 8008fcc:	4b15      	ldr	r3, [pc, #84]	; (8009024 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 8008fce:	4a16      	ldr	r2, [pc, #88]	; (8009028 <cmd_test+0x78>)
  return chThdGetSelfX()->prio;
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	e9cd 1400 	strd	r1, r4, [sp]
 8008fda:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8008fde:	f7fb fddf 	bl	8004ba0 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 8008fe2:	b1a0      	cbz	r0, 800900e <cmd_test+0x5e>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 8008fe4:	b002      	add	sp, #8
 8008fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdWait(tp);
 8008fea:	f7fe b949 	b.w	8007280 <chThdWait>
  if (!strcmp(argv[0], "rt")) {
 8008fee:	7843      	ldrb	r3, [r0, #1]
 8008ff0:	2b74      	cmp	r3, #116	; 0x74
 8008ff2:	d1e6      	bne.n	8008fc2 <cmd_test+0x12>
 8008ff4:	7883      	ldrb	r3, [r0, #2]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e3      	bne.n	8008fc2 <cmd_test+0x12>
    tfp = test_rt;
 8008ffa:	490c      	ldr	r1, [pc, #48]	; (800902c <cmd_test+0x7c>)
 8008ffc:	e7e6      	b.n	8008fcc <cmd_test+0x1c>
    shellUsage(chp, "test rt|oslib");
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <cmd_test+0x80>)
 8009000:	490c      	ldr	r1, [pc, #48]	; (8009034 <cmd_test+0x84>)
 8009002:	4620      	mov	r0, r4
}
 8009004:	b002      	add	sp, #8
 8009006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    shellUsage(chp, "test rt|oslib");
 800900a:	f7f9 b889 	b.w	8002120 <chprintf>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 800900e:	490a      	ldr	r1, [pc, #40]	; (8009038 <cmd_test+0x88>)
 8009010:	4620      	mov	r0, r4
}
 8009012:	b002      	add	sp, #8
 8009014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8009018:	f7f9 b882 	b.w	8002120 <chprintf>
 800901c:	0800b79c 	.word	0x0800b79c
 8009020:	080047e1 	.word	0x080047e1
 8009024:	200009b0 	.word	0x200009b0
 8009028:	0800bcd8 	.word	0x0800bcd8
 800902c:	080047d1 	.word	0x080047d1
 8009030:	0800b794 	.word	0x0800b794
 8009034:	0800ad94 	.word	0x0800ad94
 8009038:	0800b7a4 	.word	0x0800b7a4
 800903c:	00000000 	.word	0x00000000

08009040 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8009040:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8009042:	4b10      	ldr	r3, [pc, #64]	; (8009084 <chThdExitS+0x44>)
 8009044:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8009046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8009048:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800904a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800904e:	42ab      	cmp	r3, r5
 8009050:	d007      	beq.n	8009062 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8009056:	4618      	mov	r0, r3
 8009058:	f7f8 f9d2 	bl	8001400 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800905c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800905e:	42ab      	cmp	r3, r5
 8009060:	d1f7      	bne.n	8009052 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8009062:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8009066:	b93b      	cbnz	r3, 8009078 <chThdExitS+0x38>
 8009068:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800906c:	079b      	lsls	r3, r3, #30
 800906e:	d103      	bne.n	8009078 <chThdExitS+0x38>
    REG_REMOVE(tp);
 8009070:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009074:	6113      	str	r3, [r2, #16]
 8009076:	615a      	str	r2, [r3, #20]
}
 8009078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800907c:	200f      	movs	r0, #15
 800907e:	f7fa b80f 	b.w	80030a0 <chSchGoSleepS>
 8009082:	bf00      	nop
 8009084:	200009b0 	.word	0x200009b0
	...

08009090 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80092d4 <shellThread+0x244>
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8009098:	6807      	ldr	r7, [r0, #0]
 800909a:	f8d9 3018 	ldr.w	r3, [r9, #24]
  const ShellCommand *scp = scfg->sc_commands;
 800909e:	6841      	ldr	r1, [r0, #4]
 80090a0:	4a7d      	ldr	r2, [pc, #500]	; (8009298 <shellThread+0x208>)
 80090a2:	619a      	str	r2, [r3, #24]
THD_FUNCTION(shellThread, p) {
 80090a4:	b09b      	sub	sp, #108	; 0x6c
 80090a6:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 80090a8:	9101      	str	r1, [sp, #4]
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 80090aa:	4638      	mov	r0, r7
 80090ac:	497b      	ldr	r1, [pc, #492]	; (800929c <shellThread+0x20c>)
 80090ae:	f7f9 f837 	bl	8002120 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 80090b2:	497b      	ldr	r1, [pc, #492]	; (80092a0 <shellThread+0x210>)
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7f9 f833 	bl	8002120 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80090ba:	f8d9 3018 	ldr.w	r3, [r9, #24]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 80090be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80090c2:	075a      	lsls	r2, r3, #29
 80090c4:	d47a      	bmi.n	80091bc <shellThread+0x12c>
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 80090c6:	f8df a210 	ldr.w	sl, [pc, #528]	; 80092d8 <shellThread+0x248>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 80090ca:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 800929c <shellThread+0x20c>
 80090ce:	ae0a      	add	r6, sp, #40	; 0x28
    chprintf(chp, SHELL_PROMPT_STR);
 80090d0:	4651      	mov	r1, sl
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7f9 f824 	bl	8002120 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 80090d8:	9b00      	ldr	r3, [sp, #0]
 80090da:	681c      	ldr	r4, [r3, #0]
  char *p = line;
 80090dc:	4635      	mov	r5, r6
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	2201      	movs	r2, #1
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f10d 010f 	add.w	r1, sp, #15
 80090e8:	4620      	mov	r0, r4
 80090ea:	4798      	blx	r3
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d07d      	beq.n	80091ec <shellThread+0x15c>
    if (c == 4) {
 80090f0:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80090f4:	2904      	cmp	r1, #4
 80090f6:	d075      	beq.n	80091e4 <shellThread+0x154>
    if ((c == 8) || (c == 127)) {
 80090f8:	2908      	cmp	r1, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80090fa:	f10d 0367 	add.w	r3, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 80090fe:	d010      	beq.n	8009122 <shellThread+0x92>
 8009100:	297f      	cmp	r1, #127	; 0x7f
 8009102:	d00e      	beq.n	8009122 <shellThread+0x92>
    if (c == '\r') {
 8009104:	290d      	cmp	r1, #13
 8009106:	d020      	beq.n	800914a <shellThread+0xba>
    if (c < 0x20)
 8009108:	291f      	cmp	r1, #31
 800910a:	d9e8      	bls.n	80090de <shellThread+0x4e>
    if (p < line + size - 1) {
 800910c:	429d      	cmp	r5, r3
      streamPut(chp, c);
 800910e:	4620      	mov	r0, r4
    if (p < line + size - 1) {
 8009110:	d2e5      	bcs.n	80090de <shellThread+0x4e>
      streamPut(chp, c);
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	4798      	blx	r3
      *p++ = (char)c;
 8009118:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800911c:	f805 3b01 	strb.w	r3, [r5], #1
 8009120:	e7dd      	b.n	80090de <shellThread+0x4e>
      if (p != line) {
 8009122:	42b5      	cmp	r5, r6
        streamPut(chp, 0x08);
 8009124:	f04f 0108 	mov.w	r1, #8
 8009128:	4620      	mov	r0, r4
      if (p != line) {
 800912a:	d0d8      	beq.n	80090de <shellThread+0x4e>
        streamPut(chp, 0x08);
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4798      	blx	r3
        streamPut(chp, 0x20);
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	2120      	movs	r1, #32
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4620      	mov	r0, r4
 800913a:	4798      	blx	r3
        streamPut(chp, 0x08);
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	2108      	movs	r1, #8
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	4620      	mov	r0, r4
        p--;
 8009144:	3d01      	subs	r5, #1
        streamPut(chp, 0x08);
 8009146:	4798      	blx	r3
 8009148:	e7c9      	b.n	80090de <shellThread+0x4e>
      chprintf(chp, SHELL_NEWLINE_STR);
 800914a:	4620      	mov	r0, r4
 800914c:	4659      	mov	r1, fp
      *p = 0;
 800914e:	f04f 0800 	mov.w	r8, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 8009152:	f7f8 ffe5 	bl	8002120 <chprintf>
      *p = 0;
 8009156:	f885 8000 	strb.w	r8, [r5]
    lp = parse_arguments(line, &tokp);
 800915a:	a904      	add	r1, sp, #16
 800915c:	4630      	mov	r0, r6
 800915e:	f7f8 ffaf 	bl	80020c0 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8009162:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8009164:	4604      	mov	r4, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8009166:	2000      	movs	r0, #0
 8009168:	ad05      	add	r5, sp, #20
 800916a:	f7f8 ffa9 	bl	80020c0 <parse_arguments>
 800916e:	b160      	cbz	r0, 800918a <shellThread+0xfa>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8009170:	f1b8 0f04 	cmp.w	r8, #4
 8009174:	d02f      	beq.n	80091d6 <shellThread+0x146>
      args[n++] = lp;
 8009176:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800917a:	a904      	add	r1, sp, #16
 800917c:	2000      	movs	r0, #0
      args[n++] = lp;
 800917e:	f108 0801 	add.w	r8, r8, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8009182:	f7f8 ff9d 	bl	80020c0 <parse_arguments>
 8009186:	2800      	cmp	r0, #0
 8009188:	d1f2      	bne.n	8009170 <shellThread+0xe0>
    args[n] = NULL;
 800918a:	ab1a      	add	r3, sp, #104	; 0x68
 800918c:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 8009190:	f842 0c54 	str.w	r0, [r2, #-84]
    if (cmd != NULL) {
 8009194:	b164      	cbz	r4, 80091b0 <shellThread+0x120>
      if (strcmp(cmd, "help") == 0) {
 8009196:	4943      	ldr	r1, [pc, #268]	; (80092a4 <shellThread+0x214>)
 8009198:	4620      	mov	r0, r4
 800919a:	f7f7 f945 	bl	8000428 <strcmp>
 800919e:	bb70      	cbnz	r0, 80091fe <shellThread+0x16e>
        if (n > 0) {
 80091a0:	f1b8 0f00 	cmp.w	r8, #0
 80091a4:	d03c      	beq.n	8009220 <shellThread+0x190>
          shellUsage(chp, "help");
 80091a6:	4a3f      	ldr	r2, [pc, #252]	; (80092a4 <shellThread+0x214>)
 80091a8:	493f      	ldr	r1, [pc, #252]	; (80092a8 <shellThread+0x218>)
 80091aa:	4638      	mov	r0, r7
 80091ac:	f7f8 ffb8 	bl	8002120 <chprintf>
 80091b0:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 80091b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80091b8:	075b      	lsls	r3, r3, #29
 80091ba:	d589      	bpl.n	80090d0 <shellThread+0x40>
 80091bc:	2320      	movs	r3, #32
 80091be:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80091c2:	2100      	movs	r1, #0
 80091c4:	4839      	ldr	r0, [pc, #228]	; (80092ac <shellThread+0x21c>)
 80091c6:	f7f8 f9fb 	bl	80015c0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80091ca:	2000      	movs	r0, #0
 80091cc:	f7ff ff38 	bl	8009040 <chThdExitS>
}
 80091d0:	b01b      	add	sp, #108	; 0x6c
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 80091d6:	4936      	ldr	r1, [pc, #216]	; (80092b0 <shellThread+0x220>)
 80091d8:	4638      	mov	r0, r7
 80091da:	f7f8 ffa1 	bl	8002120 <chprintf>
    args[n] = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	9309      	str	r3, [sp, #36]	; 0x24
    if (cmd != NULL) {
 80091e2:	e7e5      	b.n	80091b0 <shellThread+0x120>
      chprintf(chp, "^D");
 80091e4:	4933      	ldr	r1, [pc, #204]	; (80092b4 <shellThread+0x224>)
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7f8 ff9a 	bl	8002120 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 80091ec:	492b      	ldr	r1, [pc, #172]	; (800929c <shellThread+0x20c>)
 80091ee:	4638      	mov	r0, r7
 80091f0:	f7f8 ff96 	bl	8002120 <chprintf>
      chprintf(chp, "logout");
 80091f4:	4930      	ldr	r1, [pc, #192]	; (80092b8 <shellThread+0x228>)
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7f8 ff92 	bl	8002120 <chprintf>
      break;
 80091fc:	e7de      	b.n	80091bc <shellThread+0x12c>
 80091fe:	4d2f      	ldr	r5, [pc, #188]	; (80092bc <shellThread+0x22c>)
  while (scp->sc_name != NULL) {
 8009200:	482f      	ldr	r0, [pc, #188]	; (80092c0 <shellThread+0x230>)
 8009202:	e002      	b.n	800920a <shellThread+0x17a>
 8009204:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8009208:	b300      	cbz	r0, 800924c <shellThread+0x1bc>
    if (strcmp(scp->sc_name, name) == 0) {
 800920a:	4621      	mov	r1, r4
 800920c:	f7f7 f90c 	bl	8000428 <strcmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	d1f7      	bne.n	8009204 <shellThread+0x174>
      scp->sc_function(chp, argc, argv);
 8009214:	686c      	ldr	r4, [r5, #4]
 8009216:	aa05      	add	r2, sp, #20
 8009218:	4641      	mov	r1, r8
 800921a:	4638      	mov	r0, r7
 800921c:	47a0      	blx	r4
      return false;
 800921e:	e7c7      	b.n	80091b0 <shellThread+0x120>
        chprintf(chp, "Commands: help ");
 8009220:	4928      	ldr	r1, [pc, #160]	; (80092c4 <shellThread+0x234>)
 8009222:	4c26      	ldr	r4, [pc, #152]	; (80092bc <shellThread+0x22c>)
    chprintf(chp, "%s ", scp->sc_name);
 8009224:	4d28      	ldr	r5, [pc, #160]	; (80092c8 <shellThread+0x238>)
        chprintf(chp, "Commands: help ");
 8009226:	4638      	mov	r0, r7
 8009228:	f7f8 ff7a 	bl	8002120 <chprintf>
  while (scp->sc_name != NULL) {
 800922c:	4a24      	ldr	r2, [pc, #144]	; (80092c0 <shellThread+0x230>)
    chprintf(chp, "%s ", scp->sc_name);
 800922e:	4629      	mov	r1, r5
 8009230:	4638      	mov	r0, r7
 8009232:	f7f8 ff75 	bl	8002120 <chprintf>
  while (scp->sc_name != NULL) {
 8009236:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800923a:	2a00      	cmp	r2, #0
 800923c:	d1f7      	bne.n	800922e <shellThread+0x19e>
        if (scp != NULL)
 800923e:	9c01      	ldr	r4, [sp, #4]
 8009240:	b9e4      	cbnz	r4, 800927c <shellThread+0x1ec>
        chprintf(chp, SHELL_NEWLINE_STR);
 8009242:	4659      	mov	r1, fp
 8009244:	4638      	mov	r0, r7
 8009246:	f7f8 ff6b 	bl	8002120 <chprintf>
 800924a:	e7b1      	b.n	80091b0 <shellThread+0x120>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800924c:	9d01      	ldr	r5, [sp, #4]
 800924e:	b15d      	cbz	r5, 8009268 <shellThread+0x1d8>
  while (scp->sc_name != NULL) {
 8009250:	6828      	ldr	r0, [r5, #0]
 8009252:	b918      	cbnz	r0, 800925c <shellThread+0x1cc>
 8009254:	e008      	b.n	8009268 <shellThread+0x1d8>
 8009256:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800925a:	b128      	cbz	r0, 8009268 <shellThread+0x1d8>
    if (strcmp(scp->sc_name, name) == 0) {
 800925c:	4621      	mov	r1, r4
 800925e:	f7f7 f8e3 	bl	8000428 <strcmp>
 8009262:	2800      	cmp	r0, #0
 8009264:	d1f7      	bne.n	8009256 <shellThread+0x1c6>
 8009266:	e7d5      	b.n	8009214 <shellThread+0x184>
        chprintf(chp, "%s", cmd);
 8009268:	4918      	ldr	r1, [pc, #96]	; (80092cc <shellThread+0x23c>)
 800926a:	4622      	mov	r2, r4
 800926c:	4638      	mov	r0, r7
 800926e:	f7f8 ff57 	bl	8002120 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8009272:	4917      	ldr	r1, [pc, #92]	; (80092d0 <shellThread+0x240>)
 8009274:	4638      	mov	r0, r7
 8009276:	f7f8 ff53 	bl	8002120 <chprintf>
 800927a:	e799      	b.n	80091b0 <shellThread+0x120>
  while (scp->sc_name != NULL) {
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	2a00      	cmp	r2, #0
 8009280:	d0df      	beq.n	8009242 <shellThread+0x1b2>
    chprintf(chp, "%s ", scp->sc_name);
 8009282:	4d11      	ldr	r5, [pc, #68]	; (80092c8 <shellThread+0x238>)
 8009284:	4629      	mov	r1, r5
 8009286:	4638      	mov	r0, r7
 8009288:	f7f8 ff4a 	bl	8002120 <chprintf>
  while (scp->sc_name != NULL) {
 800928c:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8009290:	2a00      	cmp	r2, #0
 8009292:	d1f7      	bne.n	8009284 <shellThread+0x1f4>
 8009294:	e7d5      	b.n	8009242 <shellThread+0x1b2>
 8009296:	bf00      	nop
 8009298:	0800b5a0 	.word	0x0800b5a0
 800929c:	0800b7cc 	.word	0x0800b7cc
 80092a0:	0800b7bc 	.word	0x0800b7bc
 80092a4:	0800b7fc 	.word	0x0800b7fc
 80092a8:	0800ad94 	.word	0x0800ad94
 80092ac:	20001590 	.word	0x20001590
 80092b0:	0800b7e4 	.word	0x0800b7e4
 80092b4:	0800b7d8 	.word	0x0800b7d8
 80092b8:	0800b7dc 	.word	0x0800b7dc
 80092bc:	0800c9b8 	.word	0x0800c9b8
 80092c0:	0800b7b4 	.word	0x0800b7b4
 80092c4:	0800b804 	.word	0x0800b804
 80092c8:	0800b814 	.word	0x0800b814
 80092cc:	0800b818 	.word	0x0800b818
 80092d0:	0800b81c 	.word	0x0800b81c
 80092d4:	200009b0 	.word	0x200009b0
 80092d8:	0800b7d0 	.word	0x0800b7d0
 80092dc:	00000000 	.word	0x00000000

080092e0 <cmd_exit>:
  if (argc > 0) {
 80092e0:	2900      	cmp	r1, #0
 80092e2:	dc0c      	bgt.n	80092fe <cmd_exit+0x1e>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 80092e4:	b508      	push	{r3, lr}
 80092e6:	2320      	movs	r3, #32
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	4806      	ldr	r0, [pc, #24]	; (8009308 <cmd_exit+0x28>)
 80092ee:	2100      	movs	r1, #0
 80092f0:	f7f8 f966 	bl	80015c0 <chEvtBroadcastFlagsI>
}
 80092f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdExitS(msg);
 80092f8:	2000      	movs	r0, #0
 80092fa:	f7ff bea1 	b.w	8009040 <chThdExitS>
    shellUsage(chp, "exit");
 80092fe:	4a03      	ldr	r2, [pc, #12]	; (800930c <cmd_exit+0x2c>)
 8009300:	4903      	ldr	r1, [pc, #12]	; (8009310 <cmd_exit+0x30>)
 8009302:	f7f8 bf0d 	b.w	8002120 <chprintf>
 8009306:	bf00      	nop
 8009308:	20001590 	.word	0x20001590
 800930c:	0800b7b4 	.word	0x0800b7b4
 8009310:	0800ad94 	.word	0x0800ad94
	...

08009320 <chThdExit>:
 8009320:	2320      	movs	r3, #32
 8009322:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8009326:	f7ff be8b 	b.w	8009040 <chThdExitS>
 800932a:	bf00      	nop
 800932c:	0000      	movs	r0, r0
	...

08009330 <Thread1.lto_priv.1>:
static THD_FUNCTION(Thread1, arg) {
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  exit_flag = false;
 8009332:	4f10      	ldr	r7, [pc, #64]	; (8009374 <Thread1.lto_priv.1+0x44>)
 8009334:	2500      	movs	r5, #0
 8009336:	703d      	strb	r5, [r7, #0]
 8009338:	2620      	movs	r6, #32
 800933a:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 800933e:	f7fb fa57 	bl	80047f0 <chMsgWaitS>
 8009342:	4604      	mov	r4, r0
 8009344:	f385 8811 	msr	BASEPRI, r5
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 8009348:	6a43      	ldr	r3, [r0, #36]	; 0x24
  ret = cmp->veneer(cmp->argsp);
 800934a:	e9d3 2000 	ldrd	r2, r0, [r3]
 800934e:	4790      	blx	r2
 8009350:	4601      	mov	r1, r0
 8009352:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 8009356:	4620      	mov	r0, r4
 8009358:	f7f9 fdb2 	bl	8002ec0 <chSchWakeupS>
 800935c:	f385 8811 	msr	BASEPRI, r5
  } while (!exit_flag);
 8009360:	783b      	ldrb	r3, [r7, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0e9      	beq.n	800933a <Thread1.lto_priv.1+0xa>
}
 8009366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chThdExit(0x0FA5);
 800936a:	f640 70a5 	movw	r0, #4005	; 0xfa5
 800936e:	f7ff bfd7 	b.w	8009320 <chThdExit>
 8009372:	bf00      	nop
 8009374:	20001374 	.word	0x20001374
	...

08009380 <bmk_thread3>:
  chThdExit((msg_t)p);
 8009380:	f7ff bfce 	b.w	8009320 <chThdExit>
	...

08009390 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009390:	4b99      	ldr	r3, [pc, #612]	; (80095f8 <__early_init+0x268>)
  gpiop->PUPDR   = config->pupdr;
 8009392:	f8df c310 	ldr.w	ip, [pc, #784]	; 80096a4 <__early_init+0x314>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8009396:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8009398:	4898      	ldr	r0, [pc, #608]	; (80095fc <__early_init+0x26c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800939a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800939e:	430a      	orrs	r2, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80093a0:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80093a2:	611a      	str	r2, [r3, #16]
 80093a4:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80093a6:	4d96      	ldr	r5, [pc, #600]	; (8009600 <__early_init+0x270>)
  gpiop->AFRL    = config->afrl;
 80093a8:	4e96      	ldr	r6, [pc, #600]	; (8009604 <__early_init+0x274>)
  gpiop->OTYPER  = config->otyper;
 80093aa:	4c97      	ldr	r4, [pc, #604]	; (8009608 <__early_init+0x278>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80093ac:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80093b0:	f022 0207 	bic.w	r2, r2, #7
 80093b4:	611a      	str	r2, [r3, #16]
 80093b6:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80093b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ba:	430a      	orrs	r2, r1
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30
 80093be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093c0:	430a      	orrs	r2, r1
 80093c2:	651a      	str	r2, [r3, #80]	; 0x50
 80093c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80093c6:	2200      	movs	r2, #0
  gpiop->ODR     = config->odr;
 80093c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 80093cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  gpiop->OTYPER  = config->otyper;
 80093d0:	606a      	str	r2, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80093d2:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80093d4:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 80093d8:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80093da:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80093dc:	4e8b      	ldr	r6, [pc, #556]	; (800960c <__early_init+0x27c>)
 80093de:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80093e0:	f106 46d5 	add.w	r6, r6, #1786773504	; 0x6a800000
 80093e4:	f506 1610 	add.w	r6, r6, #2359296	; 0x240000
 80093e8:	f506 76d4 	add.w	r6, r6, #424	; 0x1a8
 80093ec:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 80093ee:	2511      	movs	r5, #17
  gpiop->OTYPER  = config->otyper;
 80093f0:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80093f2:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80093f4:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
 80093f6:	4d86      	ldr	r5, [pc, #536]	; (8009610 <__early_init+0x280>)
  gpiop->ODR     = config->odr;
 80093f8:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80093fa:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80093fc:	4d85      	ldr	r5, [pc, #532]	; (8009614 <__early_init+0x284>)
 80093fe:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009400:	4d85      	ldr	r5, [pc, #532]	; (8009618 <__early_init+0x288>)
 8009402:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8009404:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009406:	6087      	str	r7, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8009408:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 800940c:	60c7      	str	r7, [r0, #12]
  gpiop->AFRL    = config->afrl;
 800940e:	4f83      	ldr	r7, [pc, #524]	; (800961c <__early_init+0x28c>)
  gpiop->ODR     = config->odr;
 8009410:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8009412:	6207      	str	r7, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8009414:	4f82      	ldr	r7, [pc, #520]	; (8009620 <__early_init+0x290>)
 8009416:	6247      	str	r7, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009418:	4f82      	ldr	r7, [pc, #520]	; (8009624 <__early_init+0x294>)
  gpiop->OTYPER  = config->otyper;
 800941a:	4e83      	ldr	r6, [pc, #524]	; (8009628 <__early_init+0x298>)
  gpiop->MODER   = config->moder;
 800941c:	6007      	str	r7, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800941e:	4f83      	ldr	r7, [pc, #524]	; (800962c <__early_init+0x29c>)
  gpiop->OTYPER  = config->otyper;
 8009420:	6072      	str	r2, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009422:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8009424:	f107 478a 	add.w	r7, r7, #1157627904	; 0x45000000
 8009428:	f507 07aa 	add.w	r7, r7, #5570560	; 0x550000
 800942c:	3715      	adds	r7, #21
 800942e:	60f7      	str	r7, [r6, #12]
  gpiop->AFRL    = config->afrl;
 8009430:	4f7f      	ldr	r7, [pc, #508]	; (8009630 <__early_init+0x2a0>)
  gpiop->ODR     = config->odr;
 8009432:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8009434:	6237      	str	r7, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8009436:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800943a:	6277      	str	r7, [r6, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 800943c:	4d7d      	ldr	r5, [pc, #500]	; (8009634 <__early_init+0x2a4>)
  gpiop->MODER   = config->moder;
 800943e:	4f7e      	ldr	r7, [pc, #504]	; (8009638 <__early_init+0x2a8>)
 8009440:	6037      	str	r7, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8009442:	f643 77ff 	movw	r7, #16383	; 0x3fff
  gpiop->PUPDR   = config->pupdr;
 8009446:	4e7d      	ldr	r6, [pc, #500]	; (800963c <__early_init+0x2ac>)
  gpiop->OTYPER  = config->otyper;
 8009448:	606a      	str	r2, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800944a:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800944c:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 800944e:	4e7c      	ldr	r6, [pc, #496]	; (8009640 <__early_init+0x2b0>)
  gpiop->ODR     = config->odr;
 8009450:	6169      	str	r1, [r5, #20]
  gpiop->OTYPER  = config->otyper;
 8009452:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  gpiop->AFRL    = config->afrl;
 8009456:	622e      	str	r6, [r5, #32]
  gpiop->MODER   = config->moder;
 8009458:	f642 26aa 	movw	r6, #10922	; 0x2aaa
  gpiop->AFRH    = config->afrh;
 800945c:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800945e:	602e      	str	r6, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8009460:	4d78      	ldr	r5, [pc, #480]	; (8009644 <__early_init+0x2b4>)
  gpiop->OTYPER  = config->otyper;
 8009462:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009464:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8009466:	4d78      	ldr	r5, [pc, #480]	; (8009648 <__early_init+0x2b8>)
 8009468:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
 800946a:	f04f 4519 	mov.w	r5, #2566914048	; 0x99000000
  gpiop->ODR     = config->odr;
 800946e:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8009470:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8009472:	f64c 1599 	movw	r5, #51609	; 0xc999
 8009476:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8009478:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  gpiop->MODER   = config->moder;
 800947c:	4d73      	ldr	r5, [pc, #460]	; (800964c <__early_init+0x2bc>)
 800947e:	6025      	str	r5, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8009480:	4c73      	ldr	r4, [pc, #460]	; (8009650 <__early_init+0x2c0>)
  gpiop->OTYPER  = config->otyper;
 8009482:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8009484:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8009486:	4c73      	ldr	r4, [pc, #460]	; (8009654 <__early_init+0x2c4>)
 8009488:	60c4      	str	r4, [r0, #12]
  gpiop->AFRL    = config->afrl;
 800948a:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 800948e:	6141      	str	r1, [r0, #20]
  gpiop->OTYPER  = config->otyper;
 8009490:	4e71      	ldr	r6, [pc, #452]	; (8009658 <__early_init+0x2c8>)
  gpiop->AFRL    = config->afrl;
 8009492:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8009494:	4c71      	ldr	r4, [pc, #452]	; (800965c <__early_init+0x2cc>)
 8009496:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8009498:	4c71      	ldr	r4, [pc, #452]	; (8009660 <__early_init+0x2d0>)
 800949a:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 800949c:	6072      	str	r2, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800949e:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80094a0:	4f70      	ldr	r7, [pc, #448]	; (8009664 <__early_init+0x2d4>)
 80094a2:	60f7      	str	r7, [r6, #12]
  gpiop->AFRL    = config->afrl;
 80094a4:	4f70      	ldr	r7, [pc, #448]	; (8009668 <__early_init+0x2d8>)
  gpiop->OTYPER  = config->otyper;
 80094a6:	4d71      	ldr	r5, [pc, #452]	; (800966c <__early_init+0x2dc>)
  gpiop->ODR     = config->odr;
 80094a8:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80094aa:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 80094ac:	f645 27a0 	movw	r7, #23200	; 0x5aa0
  gpiop->AFRH    = config->afrh;
 80094b0:	6272      	str	r2, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80094b2:	6037      	str	r7, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80094b4:	f44f 6770 	mov.w	r7, #3840	; 0xf00
  gpiop->OTYPER  = config->otyper;
 80094b8:	606a      	str	r2, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80094ba:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80094bc:	4f6c      	ldr	r7, [pc, #432]	; (8009670 <__early_init+0x2e0>)
 80094be:	60ef      	str	r7, [r5, #12]
  gpiop->AFRL    = config->afrl;
 80094c0:	f44f 074c 	mov.w	r7, #13369344	; 0xcc0000
  gpiop->ODR     = config->odr;
 80094c4:	6169      	str	r1, [r5, #20]
  gpiop->OTYPER  = config->otyper;
 80094c6:	4c6b      	ldr	r4, [pc, #428]	; (8009674 <__early_init+0x2e4>)
  gpiop->AFRL    = config->afrl;
 80094c8:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 80094ca:	f44f 6720 	mov.w	r7, #2560	; 0xa00
  gpiop->AFRH    = config->afrh;
 80094ce:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80094d0:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80094d2:	2530      	movs	r5, #48	; 0x30
  gpiop->OTYPER  = config->otyper;
 80094d4:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80094d6:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80094d8:	4d67      	ldr	r5, [pc, #412]	; (8009678 <__early_init+0x2e8>)
 80094da:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
 80094dc:	f44f 6550 	mov.w	r5, #3328	; 0xd00
  gpiop->ODR     = config->odr;
 80094e0:	6161      	str	r1, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 80094e2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  gpiop->AFRL    = config->afrl;
 80094e6:	6225      	str	r5, [r4, #32]
  gpiop->MODER   = config->moder;
 80094e8:	2520      	movs	r5, #32
  gpiop->AFRH    = config->afrh;
 80094ea:	6262      	str	r2, [r4, #36]	; 0x24
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80094ec:	f5a6 36d6 	sub.w	r6, r6, #109568	; 0x1ac00
  gpiop->MODER   = config->moder;
 80094f0:	6025      	str	r5, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
 80094f2:	4c62      	ldr	r4, [pc, #392]	; (800967c <__early_init+0x2ec>)
  gpiop->OTYPER  = config->otyper;
 80094f4:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80094f6:	25c0      	movs	r5, #192	; 0xc0
 80094f8:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80094fa:	60c4      	str	r4, [r0, #12]
  gpiop->MODER   = config->moder;
 80094fc:	2540      	movs	r5, #64	; 0x40
  gpiop->ODR     = config->odr;
 80094fe:	6141      	str	r1, [r0, #20]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009500:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8009504:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  gpiop->AFRL    = config->afrl;
 8009508:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 800950a:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800950c:	6005      	str	r5, [r0, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800950e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8009510:	6031      	str	r1, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	f042 0201 	orr.w	r2, r2, #1
 8009518:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	0792      	lsls	r2, r2, #30
 800951e:	d5fc      	bpl.n	800951a <__early_init+0x18a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8009520:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8009522:	4a35      	ldr	r2, [pc, #212]	; (80095f8 <__early_init+0x268>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8009524:	f021 0103 	bic.w	r1, r1, #3
 8009528:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800952a:	6893      	ldr	r3, [r2, #8]
 800952c:	f013 030c 	ands.w	r3, r3, #12
 8009530:	d1fb      	bne.n	800952a <__early_init+0x19a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009532:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8009534:	4930      	ldr	r1, [pc, #192]	; (80095f8 <__early_init+0x268>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009536:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800953a:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800953c:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 800953e:	6813      	ldr	r3, [r2, #0]
 8009540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009544:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8009546:	680b      	ldr	r3, [r1, #0]
 8009548:	039f      	lsls	r7, r3, #14
 800954a:	d5fc      	bpl.n	8009546 <__early_init+0x1b6>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800954c:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800954e:	4b2a      	ldr	r3, [pc, #168]	; (80095f8 <__early_init+0x268>)
  RCC->CSR |= RCC_CSR_LSION;
 8009550:	f042 0201 	orr.w	r2, r2, #1
 8009554:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8009556:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009558:	0796      	lsls	r6, r2, #30
 800955a:	d5fc      	bpl.n	8009556 <__early_init+0x1c6>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800955c:	4a48      	ldr	r2, [pc, #288]	; (8009680 <__early_init+0x2f0>)
 800955e:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8009560:	6819      	ldr	r1, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8009562:	4a48      	ldr	r2, [pc, #288]	; (8009684 <__early_init+0x2f4>)
  RCC->CR |= RCC_CR_PLLON;
 8009564:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009568:	6019      	str	r1, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800956a:	6853      	ldr	r3, [r2, #4]
 800956c:	045d      	lsls	r5, r3, #17
 800956e:	d5fc      	bpl.n	800956a <__early_init+0x1da>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8009570:	6811      	ldr	r1, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8009572:	4b44      	ldr	r3, [pc, #272]	; (8009684 <__early_init+0x2f4>)
  PWR->CR |= PWR_CR_ODEN;
 8009574:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009578:	6011      	str	r1, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	03d4      	lsls	r4, r2, #15
 800957e:	d5fc      	bpl.n	800957a <__early_init+0x1ea>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 8009580:	681a      	ldr	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8009582:	4940      	ldr	r1, [pc, #256]	; (8009684 <__early_init+0x2f4>)
  PWR->CR |= PWR_CR_ODSWEN;
 8009584:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009588:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 800958a:	684b      	ldr	r3, [r1, #4]
 800958c:	0398      	lsls	r0, r3, #14
 800958e:	d5fc      	bpl.n	800958a <__early_init+0x1fa>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8009590:	4a19      	ldr	r2, [pc, #100]	; (80095f8 <__early_init+0x268>)
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	0199      	lsls	r1, r3, #6
 8009596:	d5fc      	bpl.n	8009592 <__early_init+0x202>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8009598:	4b3b      	ldr	r3, [pc, #236]	; (8009688 <__early_init+0x2f8>)
 800959a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 800959e:	6811      	ldr	r1, [r2, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80095a0:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <__early_init+0x268>)
  RCC->CR |= RCC_CR_PLLI2SON;
 80095a2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80095a6:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	0112      	lsls	r2, r2, #4
 80095ac:	d5fc      	bpl.n	80095a8 <__early_init+0x218>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 80095ae:	4a37      	ldr	r2, [pc, #220]	; (800968c <__early_init+0x2fc>)
 80095b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 80095b4:	6819      	ldr	r1, [r3, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80095b6:	4a10      	ldr	r2, [pc, #64]	; (80095f8 <__early_init+0x268>)
  RCC->CR |= RCC_CR_PLLSAION;
 80095b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80095bc:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	d5fc      	bpl.n	80095be <__early_init+0x22e>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80095c4:	4b32      	ldr	r3, [pc, #200]	; (8009690 <__early_init+0x300>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80095c6:	4833      	ldr	r0, [pc, #204]	; (8009694 <__early_init+0x304>)
    RCC->DCKCFGR = dckcfgr |
 80095c8:	4933      	ldr	r1, [pc, #204]	; (8009698 <__early_init+0x308>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80095ca:	6090      	str	r0, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 80095cc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b32      	ldr	r3, [pc, #200]	; (800969c <__early_init+0x30c>)
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d077      	beq.n	80096c8 <__early_init+0x338>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80095d8:	4b31      	ldr	r3, [pc, #196]	; (80096a0 <__early_init+0x310>)
 80095da:	f240 7205 	movw	r2, #1797	; 0x705
 80095de:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80095e0:	4a2f      	ldr	r2, [pc, #188]	; (80096a0 <__early_init+0x310>)
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	f003 030f 	and.w	r3, r3, #15
 80095e8:	2b05      	cmp	r3, #5
 80095ea:	d1fa      	bne.n	80095e2 <__early_init+0x252>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <__early_init+0x268>)
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	f042 0202 	orr.w	r2, r2, #2
 80095f4:	609a      	str	r2, [r3, #8]
 80095f6:	e057      	b.n	80096a8 <__early_init+0x318>
 80095f8:	40023800 	.word	0x40023800
 80095fc:	40020800 	.word	0x40020800
 8009600:	40020000 	.word	0x40020000
 8009604:	22502220 	.word	0x22502220
 8009608:	40020400 	.word	0x40020400
 800960c:	000aaa00 	.word	0x000aaa00
 8009610:	0a556000 	.word	0x0a556000
 8009614:	55997744 	.word	0x55997744
 8009618:	aaaa2a9d 	.word	0xaaaa2a9d
 800961c:	8800000c 	.word	0x8800000c
 8009620:	000ccccc 	.word	0x000ccccc
 8009624:	02aaaffe 	.word	0x02aaaffe
 8009628:	40020c00 	.word	0x40020c00
 800962c:	0c003ff0 	.word	0x0c003ff0
 8009630:	06005c00 	.word	0x06005c00
 8009634:	40021000 	.word	0x40021000
 8009638:	080025a0 	.word	0x080025a0
 800963c:	55554000 	.word	0x55554000
 8009640:	066666cc 	.word	0x066666cc
 8009644:	00fff000 	.word	0x00fff000
 8009648:	55000555 	.word	0x55000555
 800964c:	00aaa000 	.word	0x00aaa000
 8009650:	c003f030 	.word	0xc003f030
 8009654:	15540555 	.word	0x15540555
 8009658:	40021c00 	.word	0x40021c00
 800965c:	c000000c 	.word	0xc000000c
 8009660:	80029000 	.word	0x80029000
 8009664:	55555000 	.word	0x55555000
 8009668:	0044cc00 	.word	0x0044cc00
 800966c:	40022000 	.word	0x40022000
 8009670:	55555055 	.word	0x55555055
 8009674:	40022400 	.word	0x40022400
 8009678:	55555545 	.word	0x55555545
 800967c:	55555515 	.word	0x55555515
 8009680:	07405a08 	.word	0x07405a08
 8009684:	40007000 	.word	0x40007000
 8009688:	44413004 	.word	0x44413004
 800968c:	44013004 	.word	0x44013004
 8009690:	e0042000 	.word	0xe0042000
 8009694:	40089400 	.word	0x40089400
 8009698:	08800003 	.word	0x08800003
 800969c:	20006411 	.word	0x20006411
 80096a0:	40023c00 	.word	0x40023c00
 80096a4:	64000400 	.word	0x64000400
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	f002 020c 	and.w	r2, r2, #12
 80096ae:	2a08      	cmp	r2, #8
 80096b0:	d1fa      	bne.n	80096a8 <__early_init+0x318>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80096b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096b8:	645a      	str	r2, [r3, #68]	; 0x44
 80096ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80096bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096c0:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 80096c2:	bcf0      	pop	{r4, r5, r6, r7}
 80096c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c6:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80096c8:	4a04      	ldr	r2, [pc, #16]	; (80096dc <__early_init+0x34c>)
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <__early_init+0x350>)
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d182      	bne.n	80095d8 <__early_init+0x248>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80096d2:	4b04      	ldr	r3, [pc, #16]	; (80096e4 <__early_init+0x354>)
 80096d4:	f240 1205 	movw	r2, #261	; 0x105
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	e781      	b.n	80095e0 <__early_init+0x250>
 80096dc:	e000ed00 	.word	0xe000ed00
 80096e0:	410fc241 	.word	0x410fc241
 80096e4:	40023c00 	.word	0x40023c00
	...

080096f0 <VectorDC>:
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80096f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80096f4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80098e8 <VectorDC+0x1f8>
 80096f8:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 80096fc:	f013 0402 	ands.w	r4, r3, #2
 8009700:	f000 8094 	beq.w	800982c <VectorDC+0x13c>
  USART_TypeDef *u = sdp->usart;
 8009704:	4c74      	ldr	r4, [pc, #464]	; (80098d8 <VectorDC+0x1e8>)
 8009706:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8009708:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 800970c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800970e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8009710:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8009712:	d47c      	bmi.n	800980e <VectorDC+0x11e>
 8009714:	2320      	movs	r3, #32
 8009716:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800971a:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 800971e:	d045      	beq.n	80097ac <VectorDC+0xbc>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8009720:	4f6e      	ldr	r7, [pc, #440]	; (80098dc <VectorDC+0x1ec>)
  chThdDequeueNextI(tqp, msg);
 8009722:	f107 0a08 	add.w	sl, r7, #8
 8009726:	e008      	b.n	800973a <VectorDC+0x4a>
    if (sr & USART_SR_RXNE)
 8009728:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800972a:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 800972e:	d41e      	bmi.n	800976e <VectorDC+0x7e>
    sr = u->SR;
 8009730:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8009732:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8009736:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8009738:	d038      	beq.n	80097ac <VectorDC+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800973a:	072b      	lsls	r3, r5, #28
 800973c:	d0f4      	beq.n	8009728 <VectorDC+0x38>
    sts |= SD_OVERRUN_ERROR;
 800973e:	f015 0f08 	tst.w	r5, #8
 8009742:	bf0c      	ite	eq
 8009744:	2100      	moveq	r1, #0
 8009746:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8009748:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 800974a:	bf48      	it	mi
 800974c:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8009750:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8009752:	bf48      	it	mi
 8009754:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8009758:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800975a:	bf48      	it	mi
 800975c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8009760:	4638      	mov	r0, r7
 8009762:	f7f7 ff2d 	bl	80015c0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8009766:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8009768:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 800976c:	d5e0      	bpl.n	8009730 <VectorDC+0x40>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800976e:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8009770:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8009774:	2b00      	cmp	r3, #0
 8009776:	d039      	beq.n	80097ec <VectorDC+0xfc>
  if (!iqIsFullI(iqp)) {
 8009778:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800977c:	4293      	cmp	r3, r2
 800977e:	d03d      	beq.n	80097fc <VectorDC+0x10c>
    iqp->q_counter++;
 8009780:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8009782:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8009784:	3201      	adds	r2, #1
 8009786:	ea05 050b 	and.w	r5, r5, fp
 800978a:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800978c:	6221      	str	r1, [r4, #32]
 800978e:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8009790:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009794:	429a      	cmp	r2, r3
 8009796:	d301      	bcc.n	800979c <VectorDC+0xac>
      iqp->q_wrptr = iqp->q_buffer;
 8009798:	69a3      	ldr	r3, [r4, #24]
 800979a:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 800979c:	4650      	mov	r0, sl
 800979e:	f7f7 fe47 	bl	8001430 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 80097a2:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80097a4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80097a8:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80097aa:	d1c6      	bne.n	800973a <VectorDC+0x4a>
 80097ac:	2300      	movs	r3, #0
 80097ae:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80097b2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80097b6:	d001      	beq.n	80097bc <VectorDC+0xcc>
 80097b8:	062a      	lsls	r2, r5, #24
 80097ba:	d456      	bmi.n	800986a <VectorDC+0x17a>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80097bc:	f019 0f40 	tst.w	r9, #64	; 0x40
 80097c0:	d00b      	beq.n	80097da <VectorDC+0xea>
 80097c2:	066b      	lsls	r3, r5, #25
 80097c4:	d509      	bpl.n	80097da <VectorDC+0xea>
 80097c6:	2320      	movs	r3, #32
 80097c8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80097cc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d067      	beq.n	80098a4 <VectorDC+0x1b4>
 80097d4:	2300      	movs	r3, #0
 80097d6:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80097da:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 80097de:	f013 0402 	ands.w	r4, r3, #2
 80097e2:	d031      	beq.n	8009848 <VectorDC+0x158>
}
 80097e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80097e8:	f7f8 bfc2 	b.w	8002770 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 80097ec:	2104      	movs	r1, #4
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7f7 fee6 	bl	80015c0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80097f4:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d1c1      	bne.n	8009780 <VectorDC+0x90>
 80097fc:	6962      	ldr	r2, [r4, #20]
 80097fe:	2a00      	cmp	r2, #0
 8009800:	d0be      	beq.n	8009780 <VectorDC+0x90>
 8009802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009806:	4638      	mov	r0, r7
 8009808:	f7f7 feda 	bl	80015c0 <chEvtBroadcastFlagsI>
 800980c:	e790      	b.n	8009730 <VectorDC+0x40>
 800980e:	2320      	movs	r3, #32
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009818:	1d20      	adds	r0, r4, #4
 800981a:	f7f7 fed1 	bl	80015c0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800981e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8009822:	6033      	str	r3, [r6, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	e773      	b.n	8009714 <VectorDC+0x24>
 800982c:	2320      	movs	r3, #32
 800982e:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8009832:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8009836:	4a2a      	ldr	r2, [pc, #168]	; (80098e0 <VectorDC+0x1f0>)
 8009838:	609a      	str	r2, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 800983a:	2202      	movs	r2, #2
 800983c:	701a      	strb	r2, [r3, #0]
    trace_next();
 800983e:	f7f8 ffcf 	bl	80027e0 <trace_next.lto_priv.0>
 8009842:	f384 8811 	msr	BASEPRI, r4
 8009846:	e75d      	b.n	8009704 <VectorDC+0x14>
 8009848:	2320      	movs	r3, #32
 800984a:	f383 8811 	msr	BASEPRI, r3
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800984e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8009852:	4a23      	ldr	r2, [pc, #140]	; (80098e0 <VectorDC+0x1f0>)
 8009854:	609a      	str	r2, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8009856:	2203      	movs	r2, #3
 8009858:	701a      	strb	r2, [r3, #0]
    trace_next();
 800985a:	f7f8 ffc1 	bl	80027e0 <trace_next.lto_priv.0>
 800985e:	f384 8811 	msr	BASEPRI, r4
}
 8009862:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8009866:	f7f8 bf83 	b.w	8002770 <_port_irq_epilogue>
 800986a:	2320      	movs	r3, #32
 800986c:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8009870:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8009874:	429a      	cmp	r2, r3
 8009876:	d022      	beq.n	80098be <VectorDC+0x1ce>
    uint8_t b;

    oqp->q_counter++;
 8009878:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 800987a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800987c:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800987e:	3201      	adds	r2, #1
 8009880:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8009882:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8009884:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8009886:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8009888:	d301      	bcc.n	800988e <VectorDC+0x19e>
      oqp->q_rdptr = oqp->q_buffer;
 800988a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800988c:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 800988e:	4815      	ldr	r0, [pc, #84]	; (80098e4 <VectorDC+0x1f4>)
 8009890:	f7f7 fdce 	bl	8001430 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 8009894:	6077      	str	r7, [r6, #4]
 8009896:	2300      	movs	r3, #0
 8009898:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800989c:	f019 0f40 	tst.w	r9, #64	; 0x40
 80098a0:	d09b      	beq.n	80097da <VectorDC+0xea>
 80098a2:	e78e      	b.n	80097c2 <VectorDC+0xd2>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80098a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d094      	beq.n	80097d4 <VectorDC+0xe4>
  chEvtBroadcastFlagsI(esp, flags);
 80098aa:	480c      	ldr	r0, [pc, #48]	; (80098dc <VectorDC+0x1ec>)
 80098ac:	2110      	movs	r1, #16
 80098ae:	f7f7 fe87 	bl	80015c0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80098b2:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80098b6:	ea09 0303 	and.w	r3, r9, r3
 80098ba:	60f3      	str	r3, [r6, #12]
 80098bc:	e78a      	b.n	80097d4 <VectorDC+0xe4>
  if (!oqIsEmptyI(oqp)) {
 80098be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80098c0:	2a00      	cmp	r2, #0
 80098c2:	d0d9      	beq.n	8009878 <VectorDC+0x188>
 80098c4:	4805      	ldr	r0, [pc, #20]	; (80098dc <VectorDC+0x1ec>)
 80098c6:	2108      	movs	r1, #8
 80098c8:	f7f7 fe7a 	bl	80015c0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80098cc:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80098d0:	ea09 0303 	and.w	r3, r9, r3
 80098d4:	60f3      	str	r3, [r6, #12]
 80098d6:	e7de      	b.n	8009896 <VectorDC+0x1a6>
 80098d8:	200008e0 	.word	0x200008e0
 80098dc:	200008e4 	.word	0x200008e4
 80098e0:	0800c290 	.word	0x0800c290
 80098e4:	20000910 	.word	0x20000910
 80098e8:	200009b0 	.word	0x200009b0
 80098ec:	00000000 	.word	0x00000000

080098f0 <notify3.lto_priv.0>:
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80098f0:	4a02      	ldr	r2, [pc, #8]	; (80098fc <notify3.lto_priv.0+0xc>)
 80098f2:	68d3      	ldr	r3, [r2, #12]
 80098f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098f8:	60d3      	str	r3, [r2, #12]
}
 80098fa:	4770      	bx	lr
 80098fc:	40004800 	.word	0x40004800

08009900 <_ctl.lto_priv.0>:
}
 8009900:	2000      	movs	r0, #0
 8009902:	4770      	bx	lr
	...

08009910 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	4604      	mov	r4, r0
 8009914:	460f      	mov	r7, r1
 8009916:	4616      	mov	r6, r2
 8009918:	2320      	movs	r3, #32
 800991a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800991e:	e003      	b.n	8009928 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8009920:	f7f9 fea6 	bl	8003670 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8009924:	2800      	cmp	r0, #0
 8009926:	db18      	blt.n	800995a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8009928:	68a5      	ldr	r5, [r4, #8]
 800992a:	4631      	mov	r1, r6
 800992c:	4620      	mov	r0, r4
 800992e:	2d00      	cmp	r5, #0
 8009930:	d0f6      	beq.n	8009920 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8009932:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8009934:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8009936:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8009938:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800993a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800993c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800993e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8009940:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009944:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8009946:	bf24      	itt	cs
 8009948:	68e3      	ldrcs	r3, [r4, #12]
 800994a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800994c:	69e3      	ldr	r3, [r4, #28]
 800994e:	b103      	cbz	r3, 8009952 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8009950:	4798      	blx	r3
 8009952:	2000      	movs	r0, #0
 8009954:	f380 8811 	msr	BASEPRI, r0
}
 8009958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995a:	f385 8811 	msr	BASEPRI, r5
 800995e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009960 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8009960:	3030      	adds	r0, #48	; 0x30
 8009962:	f7ff bfd5 	b.w	8009910 <oqPutTimeout>
 8009966:	bf00      	nop
	...

08009970 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8009970:	3030      	adds	r0, #48	; 0x30
 8009972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009976:	f7ff bfcb 	b.w	8009910 <oqPutTimeout>
 800997a:	bf00      	nop
 800997c:	0000      	movs	r0, r0
	...

08009980 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	2320      	movs	r3, #32
 8009984:	4605      	mov	r5, r0
 8009986:	460e      	mov	r6, r1
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	e003      	b.n	8009996 <iqGetTimeout+0x16>
 800998e:	f7f9 fe6f 	bl	8003670 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8009992:	2800      	cmp	r0, #0
 8009994:	db1a      	blt.n	80099cc <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8009996:	68ac      	ldr	r4, [r5, #8]
 8009998:	4631      	mov	r1, r6
 800999a:	4628      	mov	r0, r5
 800999c:	2c00      	cmp	r4, #0
 800999e:	d0f6      	beq.n	800998e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80099a0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80099a2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80099a4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80099a6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80099a8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80099aa:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80099ac:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 80099ae:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80099b0:	bf28      	it	cs
 80099b2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 80099b4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80099b6:	bf28      	it	cs
 80099b8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 80099ba:	69eb      	ldr	r3, [r5, #28]
 80099bc:	b10b      	cbz	r3, 80099c2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80099be:	4628      	mov	r0, r5
 80099c0:	4798      	blx	r3
 80099c2:	2300      	movs	r3, #0
 80099c4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80099c8:	4620      	mov	r0, r4
}
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	f384 8811 	msr	BASEPRI, r4
 80099d0:	bd70      	pop	{r4, r5, r6, pc}
 80099d2:	bf00      	nop
	...

080099e0 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80099e0:	300c      	adds	r0, #12
 80099e2:	f7ff bfcd 	b.w	8009980 <iqGetTimeout>
 80099e6:	bf00      	nop
	...

080099f0 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80099f0:	300c      	adds	r0, #12
 80099f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099f6:	f7ff bfc3 	b.w	8009980 <iqGetTimeout>
 80099fa:	bf00      	nop
 80099fc:	0000      	movs	r0, r0
	...

08009a00 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	b085      	sub	sp, #20
 8009a06:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8009a0a:	69c7      	ldr	r7, [r0, #28]
 8009a0c:	f04f 0920 	mov.w	r9, #32
 8009a10:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8009a14:	b3a2      	cbz	r2, 8009a80 <oqWriteTimeout+0x80>
 8009a16:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	460e      	mov	r6, r1
 8009a1e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8009a22:	68a2      	ldr	r2, [r4, #8]
 8009a24:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8009a26:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8009a2a:	bf8c      	ite	hi
 8009a2c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8009a2e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8009a30:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8009a34:	45a8      	cmp	r8, r5
 8009a36:	d844      	bhi.n	8009ac2 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8009a38:	d229      	bcs.n	8009a8e <oqWriteTimeout+0x8e>
    s2 = n - s1;
 8009a3a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8009a3e:	4642      	mov	r2, r8
 8009a40:	4631      	mov	r1, r6
    s2 = n - s1;
 8009a42:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8009a44:	f7f6 fc52 	bl	80002ec <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8009a48:	eb06 0108 	add.w	r1, r6, r8
 8009a4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a50:	68e0      	ldr	r0, [r4, #12]
 8009a52:	4642      	mov	r2, r8
 8009a54:	f7f6 fc4a 	bl	80002ec <memcpy>
  oqp->q_counter -= n;
 8009a58:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8009a5a:	68e1      	ldr	r1, [r4, #12]
 8009a5c:	4643      	mov	r3, r8
 8009a5e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8009a60:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8009a62:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8009a64:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8009a66:	b10f      	cbz	r7, 8009a6c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8009a68:	4620      	mov	r0, r4
 8009a6a:	47b8      	blx	r7
 8009a6c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8009a70:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8009a74:	442e      	add	r6, r5
 8009a76:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8009a7a:	f1bb 0f00 	cmp.w	fp, #0
 8009a7e:	d1d0      	bne.n	8009a22 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8009a80:	9803      	ldr	r0, [sp, #12]
 8009a82:	2300      	movs	r3, #0
 8009a84:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8009a88:	b005      	add	sp, #20
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8009a8e:	462a      	mov	r2, r5
 8009a90:	4631      	mov	r1, r6
 8009a92:	f7f6 fc2b 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8009a96:	68e2      	ldr	r2, [r4, #12]
 8009a98:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8009a9a:	68a2      	ldr	r2, [r4, #8]
 8009a9c:	1b52      	subs	r2, r2, r5
 8009a9e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8009aa0:	2d00      	cmp	r5, #0
 8009aa2:	d1e0      	bne.n	8009a66 <oqWriteTimeout+0x66>
 8009aa4:	9902      	ldr	r1, [sp, #8]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f7f9 fde2 	bl	8003670 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d0b8      	beq.n	8009a22 <oqWriteTimeout+0x22>
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	eba3 000b 	sub.w	r0, r3, fp
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f383 8811 	msr	BASEPRI, r3
}
 8009abc:	b005      	add	sp, #20
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	f7f6 fc11 	bl	80002ec <memcpy>
    oqp->q_wrptr += n;
 8009aca:	6962      	ldr	r2, [r4, #20]
 8009acc:	442a      	add	r2, r5
 8009ace:	6162      	str	r2, [r4, #20]
 8009ad0:	e7e3      	b.n	8009a9a <oqWriteTimeout+0x9a>
 8009ad2:	bf00      	nop
	...

08009ae0 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8009ae0:	3030      	adds	r0, #48	; 0x30
 8009ae2:	f7ff bf8d 	b.w	8009a00 <oqWriteTimeout>
 8009ae6:	bf00      	nop
	...

08009af0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8009af0:	3030      	adds	r0, #48	; 0x30
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af6:	f7ff bf83 	b.w	8009a00 <oqWriteTimeout>
 8009afa:	bf00      	nop
 8009afc:	0000      	movs	r0, r0
	...

08009b00 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	b085      	sub	sp, #20
 8009b06:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8009b0a:	69c7      	ldr	r7, [r0, #28]
 8009b0c:	f04f 0920 	mov.w	r9, #32
 8009b10:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	d034      	beq.n	8009b82 <iqReadTimeout+0x82>
 8009b18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	460e      	mov	r6, r1
 8009b20:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8009b24:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8009b26:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8009b28:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8009b2a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8009b2c:	bf8c      	ite	hi
 8009b2e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8009b30:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8009b32:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8009b36:	45a8      	cmp	r8, r5
 8009b38:	d844      	bhi.n	8009bc4 <iqReadTimeout+0xc4>
  else if (n > s1) {
 8009b3a:	d229      	bcs.n	8009b90 <iqReadTimeout+0x90>
    s2 = n - s1;
 8009b3c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8009b40:	4642      	mov	r2, r8
 8009b42:	4630      	mov	r0, r6
    s2 = n - s1;
 8009b44:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8009b46:	f7f6 fbd1 	bl	80002ec <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8009b4a:	eb06 0008 	add.w	r0, r6, r8
 8009b4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b52:	68e1      	ldr	r1, [r4, #12]
 8009b54:	4642      	mov	r2, r8
 8009b56:	f7f6 fbc9 	bl	80002ec <memcpy>
  iqp->q_counter -= n;
 8009b5a:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8009b5c:	68e1      	ldr	r1, [r4, #12]
 8009b5e:	4643      	mov	r3, r8
 8009b60:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8009b62:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8009b64:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8009b66:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8009b68:	b10f      	cbz	r7, 8009b6e <iqReadTimeout+0x6e>
        nfy(iqp);
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	47b8      	blx	r7
 8009b6e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8009b72:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8009b76:	442e      	add	r6, r5
 8009b78:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8009b7c:	f1bb 0f00 	cmp.w	fp, #0
 8009b80:	d1d0      	bne.n	8009b24 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8009b82:	9803      	ldr	r0, [sp, #12]
 8009b84:	2300      	movs	r3, #0
 8009b86:	f383 8811 	msr	BASEPRI, r3
}
 8009b8a:	b005      	add	sp, #20
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8009b90:	462a      	mov	r2, r5
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7f6 fbaa 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8009b98:	68e2      	ldr	r2, [r4, #12]
 8009b9a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8009b9c:	68a2      	ldr	r2, [r4, #8]
 8009b9e:	1b52      	subs	r2, r2, r5
 8009ba0:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	d1e0      	bne.n	8009b68 <iqReadTimeout+0x68>
 8009ba6:	9902      	ldr	r1, [sp, #8]
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f7f9 fd61 	bl	8003670 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d0b8      	beq.n	8009b24 <iqReadTimeout+0x24>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	eba3 000b 	sub.w	r0, r3, fp
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f383 8811 	msr	BASEPRI, r3
}
 8009bbe:	b005      	add	sp, #20
 8009bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7f6 fb90 	bl	80002ec <memcpy>
    iqp->q_rdptr += n;
 8009bcc:	69a2      	ldr	r2, [r4, #24]
 8009bce:	442a      	add	r2, r5
 8009bd0:	61a2      	str	r2, [r4, #24]
 8009bd2:	e7e3      	b.n	8009b9c <iqReadTimeout+0x9c>
	...

08009be0 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8009be0:	300c      	adds	r0, #12
 8009be2:	f7ff bf8d 	b.w	8009b00 <iqReadTimeout>
 8009be6:	bf00      	nop
	...

08009bf0 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8009bf0:	300c      	adds	r0, #12
 8009bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bf6:	f7ff bf83 	b.w	8009b00 <iqReadTimeout>
 8009bfa:	bf00      	nop
 8009bfc:	0000      	movs	r0, r0
	...

08009c00 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8009c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8009c04:	4c3c      	ldr	r4, [pc, #240]	; (8009cf8 <VectorB0+0xf8>)
 8009c06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009c08:	f013 0502 	ands.w	r5, r3, #2
 8009c0c:	d011      	beq.n	8009c32 <VectorB0+0x32>
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8009c0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009c12:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8009c14:	68c2      	ldr	r2, [r0, #12]
 8009c16:	4013      	ands	r3, r2
 8009c18:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8009c1a:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8009c1c:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8009c1e:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8009c20:	d424      	bmi.n	8009c6c <VectorB0+0x6c>
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8009c22:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009c24:	f013 0502 	ands.w	r5, r3, #2
 8009c28:	d010      	beq.n	8009c4c <VectorB0+0x4c>
}
 8009c2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8009c2e:	f7f8 bd9f 	b.w	8002770 <_port_irq_epilogue>
 8009c32:	2320      	movs	r3, #32
 8009c34:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8009c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8009c3a:	4a30      	ldr	r2, [pc, #192]	; (8009cfc <VectorB0+0xfc>)
 8009c3c:	609a      	str	r2, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8009c3e:	2202      	movs	r2, #2
 8009c40:	701a      	strb	r2, [r3, #0]
    trace_next();
 8009c42:	f7f8 fdcd 	bl	80027e0 <trace_next.lto_priv.0>
 8009c46:	f385 8811 	msr	BASEPRI, r5
 8009c4a:	e7e0      	b.n	8009c0e <VectorB0+0xe>
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8009c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8009c54:	4a29      	ldr	r2, [pc, #164]	; (8009cfc <VectorB0+0xfc>)
 8009c56:	609a      	str	r2, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8009c58:	2203      	movs	r2, #3
 8009c5a:	701a      	strb	r2, [r3, #0]
    trace_next();
 8009c5c:	f7f8 fdc0 	bl	80027e0 <trace_next.lto_priv.0>
 8009c60:	f385 8811 	msr	BASEPRI, r5
}
 8009c64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8009c68:	f7f8 bd82 	b.w	8002770 <_port_irq_epilogue>
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8009c72:	69e3      	ldr	r3, [r4, #28]
 8009c74:	6a47      	ldr	r7, [r0, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8009c76:	6aa2      	ldr	r2, [r4, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8009c78:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8009c7a:	1abe      	subs	r6, r7, r2
 8009c7c:	42b1      	cmp	r1, r6
 8009c7e:	d837      	bhi.n	8009cf0 <VectorB0+0xf0>
 8009c80:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8009d00 <VectorB0+0x100>
  STM32_ST_TIM->DIER = 0U;
 8009c84:	4605      	mov	r5, r0
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8009c86:	f04f 0800 	mov.w	r8, #0
 8009c8a:	2720      	movs	r7, #32
 8009c8c:	e000      	b.n	8009c90 <VectorB0+0x90>
 8009c8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8009c90:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8009c92:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009c94:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8009c96:	62a2      	str	r2, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8009c98:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8009c9c:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8009c9e:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8009ca2:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8009ca4:	f8c3 800c 	str.w	r8, [r3, #12]
 8009ca8:	bf08      	it	eq
 8009caa:	f8c5 800c 	streq.w	r8, [r5, #12]
 8009cae:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8009cb2:	6918      	ldr	r0, [r3, #16]
 8009cb4:	4790      	blx	r2
 8009cb6:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8009cba:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8009cbc:	6899      	ldr	r1, [r3, #8]
 8009cbe:	428e      	cmp	r6, r1
 8009cc0:	d2e5      	bcs.n	8009c8e <VectorB0+0x8e>
  return (systime_t)STM32_ST_TIM->CNT;
 8009cc2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8009cc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009cc6:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8009cc8:	428e      	cmp	r6, r1
 8009cca:	d2de      	bcs.n	8009c8a <VectorB0+0x8a>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009ccc:	454b      	cmp	r3, r9
 8009cce:	d00b      	beq.n	8009ce8 <VectorB0+0xe8>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8009cd0:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8009cd2:	62a7      	str	r7, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8009cd4:	1bc9      	subs	r1, r1, r7
 8009cd6:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8009cd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8009cdc:	2a02      	cmp	r2, #2
 8009cde:	bf2c      	ite	cs
 8009ce0:	18bf      	addcs	r7, r7, r2
 8009ce2:	3702      	addcc	r7, #2
 8009ce4:	609a      	str	r2, [r3, #8]
 8009ce6:	634f      	str	r7, [r1, #52]	; 0x34
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	e798      	b.n	8009c22 <VectorB0+0x22>
 8009cf0:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8009d00 <VectorB0+0x100>
 8009cf4:	e7ea      	b.n	8009ccc <VectorB0+0xcc>
 8009cf6:	bf00      	nop
 8009cf8:	200009b0 	.word	0x200009b0
 8009cfc:	0800ca74 	.word	0x0800ca74
 8009d00:	200009cc 	.word	0x200009cc
	...

08009d10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8009d10:	b4f0      	push	{r4, r5, r6, r7}
 8009d12:	4f14      	ldr	r7, [pc, #80]	; (8009d64 <__init_ram_areas+0x54>)
 8009d14:	4d14      	ldr	r5, [pc, #80]	; (8009d68 <__init_ram_areas+0x58>)
 8009d16:	4815      	ldr	r0, [pc, #84]	; (8009d6c <__init_ram_areas+0x5c>)
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <__init_ram_areas+0x60>)
 8009d1a:	4916      	ldr	r1, [pc, #88]	; (8009d74 <__init_ram_areas+0x64>)
 8009d1c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8009d20:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8009d22:	4298      	cmp	r0, r3
 8009d24:	d911      	bls.n	8009d4a <__init_ram_areas+0x3a>
 8009d26:	3904      	subs	r1, #4
 8009d28:	461a      	mov	r2, r3
      *p = *tp;
 8009d2a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8009d2e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8009d32:	4290      	cmp	r0, r2
 8009d34:	d8f9      	bhi.n	8009d2a <__init_ram_areas+0x1a>
 8009d36:	1e42      	subs	r2, r0, #1
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	f022 0203 	bic.w	r2, r2, #3
 8009d3e:	3204      	adds	r2, #4
 8009d40:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8009d42:	429d      	cmp	r5, r3
 8009d44:	d903      	bls.n	8009d4e <__init_ram_areas+0x3e>
      *p = 0;
 8009d46:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	d8fb      	bhi.n	8009d46 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8009d4e:	4567      	cmp	r7, ip
 8009d50:	d005      	beq.n	8009d5e <__init_ram_areas+0x4e>
 8009d52:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8009d56:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	e7e1      	b.n	8009d22 <__init_ram_areas+0x12>
#endif
}
 8009d5e:	bcf0      	pop	{r4, r5, r6, r7}
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	0800ca80 	.word	0x0800ca80
 8009d68:	200024f0 	.word	0x200024f0
 8009d6c:	200024f0 	.word	0x200024f0
 8009d70:	200024f0 	.word	0x200024f0
 8009d74:	0800cbdc 	.word	0x0800cbdc
	...

08009d80 <__default_exit>:
  while (true) {
 8009d80:	e7fe      	b.n	8009d80 <__default_exit>
 8009d82:	bf00      	nop
	...

08009d90 <__late_init>:
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
	...

08009da0 <__core_init>:
}
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop

08009da4 <memcmp>:
 8009da4:	2a03      	cmp	r2, #3
 8009da6:	b470      	push	{r4, r5, r6}
 8009da8:	d912      	bls.n	8009dd0 <memcmp+0x2c>
 8009daa:	ea40 0501 	orr.w	r5, r0, r1
 8009dae:	07ad      	lsls	r5, r5, #30
 8009db0:	4604      	mov	r4, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	d11e      	bne.n	8009df4 <memcmp+0x50>
 8009db6:	4619      	mov	r1, r3
 8009db8:	4620      	mov	r0, r4
 8009dba:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dbe:	f854 6b04 	ldr.w	r6, [r4], #4
 8009dc2:	42ae      	cmp	r6, r5
 8009dc4:	d116      	bne.n	8009df4 <memcmp+0x50>
 8009dc6:	3a04      	subs	r2, #4
 8009dc8:	2a03      	cmp	r2, #3
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	d8f2      	bhi.n	8009db6 <memcmp+0x12>
 8009dd0:	1e56      	subs	r6, r2, #1
 8009dd2:	b1a2      	cbz	r2, 8009dfe <memcmp+0x5a>
 8009dd4:	3901      	subs	r1, #1
 8009dd6:	1e44      	subs	r4, r0, #1
 8009dd8:	e001      	b.n	8009dde <memcmp+0x3a>
 8009dda:	18c3      	adds	r3, r0, r3
 8009ddc:	d00c      	beq.n	8009df8 <memcmp+0x54>
 8009dde:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009de2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009de6:	4295      	cmp	r5, r2
 8009de8:	eba6 0304 	sub.w	r3, r6, r4
 8009dec:	d0f5      	beq.n	8009dda <memcmp+0x36>
 8009dee:	1aa8      	subs	r0, r5, r2
 8009df0:	bc70      	pop	{r4, r5, r6}
 8009df2:	4770      	bx	lr
 8009df4:	1e56      	subs	r6, r2, #1
 8009df6:	e7ed      	b.n	8009dd4 <memcmp+0x30>
 8009df8:	4618      	mov	r0, r3
 8009dfa:	bc70      	pop	{r4, r5, r6}
 8009dfc:	4770      	bx	lr
 8009dfe:	4610      	mov	r0, r2
 8009e00:	e7f6      	b.n	8009df0 <memcmp+0x4c>
 8009e02:	bf00      	nop

08009e04 <memset>:
 8009e04:	b4f0      	push	{r4, r5, r6, r7}
 8009e06:	0786      	lsls	r6, r0, #30
 8009e08:	d046      	beq.n	8009e98 <memset+0x94>
 8009e0a:	1e54      	subs	r4, r2, #1
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	d03c      	beq.n	8009e8a <memset+0x86>
 8009e10:	b2ca      	uxtb	r2, r1
 8009e12:	4603      	mov	r3, r0
 8009e14:	e001      	b.n	8009e1a <memset+0x16>
 8009e16:	3c01      	subs	r4, #1
 8009e18:	d337      	bcc.n	8009e8a <memset+0x86>
 8009e1a:	f803 2b01 	strb.w	r2, [r3], #1
 8009e1e:	079d      	lsls	r5, r3, #30
 8009e20:	d1f9      	bne.n	8009e16 <memset+0x12>
 8009e22:	2c03      	cmp	r4, #3
 8009e24:	d92a      	bls.n	8009e7c <memset+0x78>
 8009e26:	b2cd      	uxtb	r5, r1
 8009e28:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8009e2c:	2c0f      	cmp	r4, #15
 8009e2e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009e32:	d934      	bls.n	8009e9e <memset+0x9a>
 8009e34:	f1a4 0210 	sub.w	r2, r4, #16
 8009e38:	f022 0c0f 	bic.w	ip, r2, #15
 8009e3c:	f103 0720 	add.w	r7, r3, #32
 8009e40:	0916      	lsrs	r6, r2, #4
 8009e42:	4467      	add	r7, ip
 8009e44:	f103 0210 	add.w	r2, r3, #16
 8009e48:	e942 5504 	strd	r5, r5, [r2, #-16]
 8009e4c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8009e50:	3210      	adds	r2, #16
 8009e52:	42ba      	cmp	r2, r7
 8009e54:	d1f8      	bne.n	8009e48 <memset+0x44>
 8009e56:	1c72      	adds	r2, r6, #1
 8009e58:	f014 0f0c 	tst.w	r4, #12
 8009e5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009e60:	f004 060f 	and.w	r6, r4, #15
 8009e64:	d013      	beq.n	8009e8e <memset+0x8a>
 8009e66:	1f33      	subs	r3, r6, #4
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4413      	add	r3, r2
 8009e70:	f842 5b04 	str.w	r5, [r2], #4
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d1fb      	bne.n	8009e70 <memset+0x6c>
 8009e78:	f006 0403 	and.w	r4, r6, #3
 8009e7c:	b12c      	cbz	r4, 8009e8a <memset+0x86>
 8009e7e:	b2ca      	uxtb	r2, r1
 8009e80:	441c      	add	r4, r3
 8009e82:	f803 2b01 	strb.w	r2, [r3], #1
 8009e86:	429c      	cmp	r4, r3
 8009e88:	d1fb      	bne.n	8009e82 <memset+0x7e>
 8009e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8009e8c:	4770      	bx	lr
 8009e8e:	4634      	mov	r4, r6
 8009e90:	4613      	mov	r3, r2
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	d1f3      	bne.n	8009e7e <memset+0x7a>
 8009e96:	e7f8      	b.n	8009e8a <memset+0x86>
 8009e98:	4614      	mov	r4, r2
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	e7c1      	b.n	8009e22 <memset+0x1e>
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4626      	mov	r6, r4
 8009ea2:	e7e0      	b.n	8009e66 <memset+0x62>

08009ea4 <strchr>:
 8009ea4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	d044      	beq.n	8009f36 <strchr+0x92>
 8009eac:	0782      	lsls	r2, r0, #30
 8009eae:	d132      	bne.n	8009f16 <strchr+0x72>
 8009eb0:	b470      	push	{r4, r5, r6}
 8009eb2:	6804      	ldr	r4, [r0, #0]
 8009eb4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8009eb8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8009ebc:	ea86 0504 	eor.w	r5, r6, r4
 8009ec0:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8009ec4:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8009ec8:	ea23 0305 	bic.w	r3, r3, r5
 8009ecc:	ea22 0204 	bic.w	r2, r2, r4
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009ed6:	d10f      	bne.n	8009ef8 <strchr+0x54>
 8009ed8:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8009edc:	ea84 0506 	eor.w	r5, r4, r6
 8009ee0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8009ee4:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8009ee8:	ea22 0205 	bic.w	r2, r2, r5
 8009eec:	ea23 0304 	bic.w	r3, r3, r4
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009ef6:	d0ef      	beq.n	8009ed8 <strchr+0x34>
 8009ef8:	7803      	ldrb	r3, [r0, #0]
 8009efa:	b923      	cbnz	r3, 8009f06 <strchr+0x62>
 8009efc:	e036      	b.n	8009f6c <strchr+0xc8>
 8009efe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d032      	beq.n	8009f6c <strchr+0xc8>
 8009f06:	4299      	cmp	r1, r3
 8009f08:	d1f9      	bne.n	8009efe <strchr+0x5a>
 8009f0a:	e030      	b.n	8009f6e <strchr+0xca>
 8009f0c:	428a      	cmp	r2, r1
 8009f0e:	d011      	beq.n	8009f34 <strchr+0x90>
 8009f10:	079a      	lsls	r2, r3, #30
 8009f12:	4618      	mov	r0, r3
 8009f14:	d0cc      	beq.n	8009eb0 <strchr+0xc>
 8009f16:	4618      	mov	r0, r3
 8009f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1c:	2a00      	cmp	r2, #0
 8009f1e:	d1f5      	bne.n	8009f0c <strchr+0x68>
 8009f20:	4610      	mov	r0, r2
 8009f22:	4770      	bx	lr
 8009f24:	0799      	lsls	r1, r3, #30
 8009f26:	4618      	mov	r0, r3
 8009f28:	d007      	beq.n	8009f3a <strchr+0x96>
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	7802      	ldrb	r2, [r0, #0]
 8009f30:	2a00      	cmp	r2, #0
 8009f32:	d1f7      	bne.n	8009f24 <strchr+0x80>
 8009f34:	4770      	bx	lr
 8009f36:	0782      	lsls	r2, r0, #30
 8009f38:	d1f7      	bne.n	8009f2a <strchr+0x86>
 8009f3a:	6802      	ldr	r2, [r0, #0]
 8009f3c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009f40:	ea23 0302 	bic.w	r3, r3, r2
 8009f44:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009f48:	d108      	bne.n	8009f5c <strchr+0xb8>
 8009f4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009f4e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009f52:	ea23 0302 	bic.w	r3, r3, r2
 8009f56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009f5a:	d0f6      	beq.n	8009f4a <strchr+0xa6>
 8009f5c:	7803      	ldrb	r3, [r0, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0e8      	beq.n	8009f34 <strchr+0x90>
 8009f62:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1fb      	bne.n	8009f62 <strchr+0xbe>
 8009f6a:	4770      	bx	lr
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	bc70      	pop	{r4, r5, r6}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop

08009f74 <strncmp>:
 8009f74:	b39a      	cbz	r2, 8009fde <strncmp+0x6a>
 8009f76:	b4f0      	push	{r4, r5, r6, r7}
 8009f78:	ea40 0501 	orr.w	r5, r0, r1
 8009f7c:	07ad      	lsls	r5, r5, #30
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4603      	mov	r3, r0
 8009f82:	4608      	mov	r0, r1
 8009f84:	d028      	beq.n	8009fd8 <strncmp+0x64>
 8009f86:	7820      	ldrb	r0, [r4, #0]
 8009f88:	780e      	ldrb	r6, [r1, #0]
 8009f8a:	4286      	cmp	r6, r0
 8009f8c:	d129      	bne.n	8009fe2 <strncmp+0x6e>
 8009f8e:	2a01      	cmp	r2, #1
 8009f90:	d02a      	beq.n	8009fe8 <strncmp+0x74>
 8009f92:	4625      	mov	r5, r4
 8009f94:	b150      	cbz	r0, 8009fac <strncmp+0x38>
 8009f96:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8009f9a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8009f9e:	43eb      	mvns	r3, r5
 8009fa0:	42b0      	cmp	r0, r6
 8009fa2:	4413      	add	r3, r2
 8009fa4:	d11d      	bne.n	8009fe2 <strncmp+0x6e>
 8009fa6:	18e3      	adds	r3, r4, r3
 8009fa8:	d1f4      	bne.n	8009f94 <strncmp+0x20>
 8009faa:	4618      	mov	r0, r3
 8009fac:	bcf0      	pop	{r4, r5, r6, r7}
 8009fae:	4770      	bx	lr
 8009fb0:	6807      	ldr	r7, [r0, #0]
 8009fb2:	461c      	mov	r4, r3
 8009fb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fb8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8009fbc:	42bd      	cmp	r5, r7
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	ea26 0605 	bic.w	r6, r6, r5
 8009fc4:	f100 0004 	add.w	r0, r0, #4
 8009fc8:	d1dd      	bne.n	8009f86 <strncmp+0x12>
 8009fca:	3a04      	subs	r2, #4
 8009fcc:	461c      	mov	r4, r3
 8009fce:	4601      	mov	r1, r0
 8009fd0:	d00a      	beq.n	8009fe8 <strncmp+0x74>
 8009fd2:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8009fd6:	d107      	bne.n	8009fe8 <strncmp+0x74>
 8009fd8:	2a03      	cmp	r2, #3
 8009fda:	d8e9      	bhi.n	8009fb0 <strncmp+0x3c>
 8009fdc:	e7d3      	b.n	8009f86 <strncmp+0x12>
 8009fde:	4610      	mov	r0, r2
 8009fe0:	4770      	bx	lr
 8009fe2:	1b80      	subs	r0, r0, r6
 8009fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8009fe6:	4770      	bx	lr
 8009fe8:	2000      	movs	r0, #0
 8009fea:	bcf0      	pop	{r4, r5, r6, r7}
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop

08009ff0 <strncpy>:
 8009ff0:	b470      	push	{r4, r5, r6}
 8009ff2:	ea40 0401 	orr.w	r4, r0, r1
 8009ff6:	07a3      	lsls	r3, r4, #30
 8009ff8:	d101      	bne.n	8009ffe <strncpy+0xe>
 8009ffa:	2a03      	cmp	r2, #3
 8009ffc:	d80f      	bhi.n	800a01e <strncpy+0x2e>
 8009ffe:	4604      	mov	r4, r0
 800a000:	1e4d      	subs	r5, r1, #1
 800a002:	e007      	b.n	800a014 <strncpy+0x24>
 800a004:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a008:	f803 1b01 	strb.w	r1, [r3], #1
 800a00c:	1e56      	subs	r6, r2, #1
 800a00e:	b1c9      	cbz	r1, 800a044 <strncpy+0x54>
 800a010:	461c      	mov	r4, r3
 800a012:	4632      	mov	r2, r6
 800a014:	4623      	mov	r3, r4
 800a016:	2a00      	cmp	r2, #0
 800a018:	d1f4      	bne.n	800a004 <strncpy+0x14>
 800a01a:	bc70      	pop	{r4, r5, r6}
 800a01c:	4770      	bx	lr
 800a01e:	460b      	mov	r3, r1
 800a020:	4604      	mov	r4, r0
 800a022:	4619      	mov	r1, r3
 800a024:	f853 6b04 	ldr.w	r6, [r3], #4
 800a028:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800a02c:	ea25 0506 	bic.w	r5, r5, r6
 800a030:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800a034:	d1e4      	bne.n	800a000 <strncpy+0x10>
 800a036:	3a04      	subs	r2, #4
 800a038:	2a03      	cmp	r2, #3
 800a03a:	f844 6b04 	str.w	r6, [r4], #4
 800a03e:	4619      	mov	r1, r3
 800a040:	d8ef      	bhi.n	800a022 <strncpy+0x32>
 800a042:	e7dd      	b.n	800a000 <strncpy+0x10>
 800a044:	4422      	add	r2, r4
 800a046:	2e00      	cmp	r6, #0
 800a048:	d0e7      	beq.n	800a01a <strncpy+0x2a>
 800a04a:	f803 1b01 	strb.w	r1, [r3], #1
 800a04e:	4293      	cmp	r3, r2
 800a050:	d1fb      	bne.n	800a04a <strncpy+0x5a>
 800a052:	bc70      	pop	{r4, r5, r6}
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop

0800a058 <strpbrk>:
 800a058:	b430      	push	{r4, r5}
 800a05a:	7804      	ldrb	r4, [r0, #0]
 800a05c:	b1a4      	cbz	r4, 800a088 <strpbrk+0x30>
 800a05e:	780d      	ldrb	r5, [r1, #0]
 800a060:	460a      	mov	r2, r1
 800a062:	462b      	mov	r3, r5
 800a064:	b91d      	cbnz	r5, 800a06e <strpbrk+0x16>
 800a066:	e00a      	b.n	800a07e <strpbrk+0x26>
 800a068:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a06c:	b13b      	cbz	r3, 800a07e <strpbrk+0x26>
 800a06e:	429c      	cmp	r4, r3
 800a070:	d1fa      	bne.n	800a068 <strpbrk+0x10>
 800a072:	7813      	ldrb	r3, [r2, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	bf08      	it	eq
 800a078:	2000      	moveq	r0, #0
 800a07a:	bc30      	pop	{r4, r5}
 800a07c:	4770      	bx	lr
 800a07e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800a082:	2c00      	cmp	r4, #0
 800a084:	d1ec      	bne.n	800a060 <strpbrk+0x8>
 800a086:	e7f4      	b.n	800a072 <strpbrk+0x1a>
 800a088:	4620      	mov	r0, r4
 800a08a:	bc30      	pop	{r4, r5}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop

0800a090 <strspn>:
 800a090:	b470      	push	{r4, r5, r6}
 800a092:	7804      	ldrb	r4, [r0, #0]
 800a094:	b18c      	cbz	r4, 800a0ba <strspn+0x2a>
 800a096:	780e      	ldrb	r6, [r1, #0]
 800a098:	4605      	mov	r5, r0
 800a09a:	b15e      	cbz	r6, 800a0b4 <strspn+0x24>
 800a09c:	460a      	mov	r2, r1
 800a09e:	4633      	mov	r3, r6
 800a0a0:	e002      	b.n	800a0a8 <strspn+0x18>
 800a0a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a0a6:	b12b      	cbz	r3, 800a0b4 <strspn+0x24>
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	d1fa      	bne.n	800a0a2 <strspn+0x12>
 800a0ac:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	d1f2      	bne.n	800a09a <strspn+0xa>
 800a0b4:	1a28      	subs	r0, r5, r0
 800a0b6:	bc70      	pop	{r4, r5, r6}
 800a0b8:	4770      	bx	lr
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	e7fb      	b.n	800a0b6 <strspn+0x26>
 800a0be:	bf00      	nop
